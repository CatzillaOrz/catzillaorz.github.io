{"meta":{"title":"Catzilla","subtitle":null,"description":null,"author":"catzillaorz","url":"http://catzillaorz.github.io","root":"/"},"posts":[{"tags":[{"name":"Rust","slug":"Rust","permalink":"http://catzillaorz.github.io/tags/Rust/"}],"title":"Generic & Trait & LifeCircle etc. and All in Rust","date":"2024/05/29","text":"Generic & Trait & LifeCircle etc. - XMind | completed | Rust 2018.rc","permalink":"http://catzillaorz.github.io/2024/05/29/Generic-Trait-LifeCircle-in-Rust/","photos":[]},{"tags":[{"name":"Nextjs","slug":"Nextjs","permalink":"http://catzillaorz.github.io/tags/Nextjs/"}],"title":"NextJS Get Started","date":"2024/05/16","text":"What is Nextjs Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations. Pre-Requisite Knowledge To get the most out of our docs, it’s recommended that you have a basic understanding of HTML, CSS, and React. If you need to brush up on your React skills, check out the React Foundations Course, which will introduce you to the fundamentals. Then, learn more about Next.js by building a dashboard application. App Router vs Pages Router Next.js has two different routers: the App Router and the Pages Router. The App Router is a newer router that allows you to use React’s latest features, such as Server Components and Streaming. The Pages Router is the original Next.js router, which allowed you to build server-rendered React applications and continues to be supported for older Next.js applications. At the top of the sidebar, you’ll notice a dropdown menu that allows you to switch between the App Router and the Pages Router features. Since there are features that are unique to each directory, it’s important to keep track of which tab is selected. recommended official document Installation Server-side Rendering (SSR) getServerSideProps styled-components Environment Variables X-mind","permalink":"http://catzillaorz.github.io/2024/05/16/NextJS-Get-Started/","photos":[]},{"tags":[{"name":"React Native","slug":"React-Native","permalink":"http://catzillaorz.github.io/tags/React-Native/"},{"name":"Expo","slug":"Expo","permalink":"http://catzillaorz.github.io/tags/Expo/"},{"name":"Firebase API","slug":"Firebase-API","permalink":"http://catzillaorz.github.io/tags/Firebase-API/"},{"name":"Android","slug":"Android","permalink":"http://catzillaorz.github.io/tags/Android/"},{"name":"Build APK","slug":"Build-APK","permalink":"http://catzillaorz.github.io/tags/Build-APK/"}],"title":"Expo Build React Native Android APK package","date":"2023/10/17","text":"Create Your Project read more about create your first build Prerequire Install expo cli npm install -g eas-cli Login in eas login Config eas eas build:configure Does your app code depend on environment variables? Run a build Build For Android Emulator/device or iOS Simulator Reamme The easiest way to try out EAS Build is to create a build that you can run on your Android device/emulator or iOS Simulator. It’s quicker than uploading it to a store, and you don’t need store developer membership accounts. If you’d like to try this, read about creating an installable APK for Android and creating a simulator build for iOS. Build for app stores Readme Config a profile to build APKsTo generate an .apk, modify the eas.json by adding one of the following properties in a build profile: developmentClient to true (default) android.buildType to apk android.gradleCommand to :app:assembleRelease, :app:assembleDebug or any other gradle command that produces .apk Now you can run your build with the following command: eas build -p android --profile preview Install your buildtips: If you haven’t installed or run an Android Emulator before, follow the Android Studio emulator guide before proceeding. Once your build is completed, the CLI will prompt you to automatically download and install it on the Android Emulator. When prompted, press Y to directly install it on the emulator. In case you have multiple builds, you can also run the eas build:run command at any time to download a specific build and automatically install it on the Android Emulator: eas build:run -p android Running the latest build eas build:run -p android --latest Pyhsical device Download directly to the device Once your build is completed, copy the URL to the APK from the build details page or the link provided when eas build is done. Send that URL to your device. Maybe by email? Up to you. Open the URL on your device, install the APK and run it. Read Bild logs on ExpoThere you can see build history, make sure you have no warnings or Errors in buid process, like: Errors Otherwise your app will crash before runing on you Device Fix Build Warings and Errors Expo cli npx expo install --fix For example Running \"expo doctor\"Running 10 checks on your project...✔ Check Expo config for common issues✔ Check package.json for common issues✔ Check dependencies for packages that should not be installed directly✔ Check for common project setup issues✔ Check npm/ yarn versions✖ Check Expo config (app.json/ app.config.js) schema✔ Check that packages match versions required by installed Expo SDK✔ Check for legacy global CLI installed locally✔ Check that native modules do not use incompatible support packages✔ Check that native modules use compatible support package versions for installed Expo SDKDetailed check results:Error: Problem validating fields in app.json. Learn more: https://docs.expo.dev/workflow/configuration/ • Field: android/adaptiveIcon - should NOT have additional property 'jsEngine'.One or more checks failed, indicating possible issues with the project.Command \"expo doctor\" failed. npx -y expo-doctor exited with non-zero code: 1 we can follow the logs suggesstions: : android/adaptiveIcon - should NOT have additional property ‘jsEngine’. Command “expo doctor” failed. npx -y expo-doctor exited with non-zero code: 1 these waring and error indecated that the building process is not running correct Although it build success After fix issues, it should be like: Push notifications overviewFollow the instructions should do the work! Readme; Key Step Step 3: Get Credentials for development builds Android Setting up FCM Android FCMFor Android and iOS, there are different requirements to set up your credentials. For Android, you need to configure Firebase Cloud Messaging (FCM) to get your credentials and set up your Expo project. It is required for all Android apps using Expo SDK. # FCM is not currently available for expo-notifications on iOS. Setting up FCM Follow these 7 steps Setting up FCM Warning Proxy might need to allow google’s api & analysiz api so on, or you will failed at setting your config and enable services. Upload server credentials Follow these steps key step Enable firebase service & get token paste token in your project path: doerbasemobile/credentials/android/com.yourname.doerbasemobile notice # Expo Notifications only supports the Cloud Messaging API (Legacy) key at this time. This key is deprecated by Firebase. However, it will continue to work until June 30, 2024. We will provide information on migrating to the new v1 key in the future.","permalink":"http://catzillaorz.github.io/2023/10/17/Expo-Build-React-Native-Android-APK-package/","photos":[]},{"tags":[{"name":"Clash","slug":"Clash","permalink":"http://catzillaorz.github.io/tags/Clash/"}],"title":"Clash or Pro enable UWP application Loopback Exemption Utility","date":"2023/09/27","text":"Exemption Utility Usage Exemption All Save Changes","permalink":"http://catzillaorz.github.io/2023/09/27/Clash-or-Pro-enable-UWP-application-Loopback-Exemption-Utility/","photos":[]},{"tags":[{"name":"Online Meeting","slug":"Online-Meeting","permalink":"http://catzillaorz.github.io/tags/Online-Meeting/"},{"name":"Phrase","slug":"Phrase","permalink":"http://catzillaorz.github.io/tags/Phrase/"}],"title":"Must Have Phrase for Online Meeting | Bussiness Vocabulary","date":"2023/09/03","text":"Prepare for success Before the meeting What the key topics would be. Who would be responsible for talking about the topics or giving updates. What if anything will be expected from the participants. Greet others and lead introductions Welcome your participants. Include a greeting + introductions. A quick hello | good morning or good afternoon. If you are the host New participants to you. Introduce yourself at the begining. follow the steps: nice to have quick round of introductions Establish Ground Rules Rules and etc. Establish ground rules to ensure smooth communication and minimize distractions. Demonstrate & encourage active listening. Encouage participants Tell participants to Jump into the conversation | share ideas | Ask questions | turn taking Interrupt skills Practice effective time Management Time Management Encourage appropriate turn-taking Stay on topic or easily returen to the topic Still have sth to talk at the end Handle interruptions Handle interruptions like a pro Let everyone konw necessory Ask others to wait asking for wait thanks for the patience End on the high note Thank for their time tips goodbye I hope you all have good weekend and I’ll see you next week Have a great day everyone","permalink":"http://catzillaorz.github.io/2023/09/03/Must-Have-Phrase-for-Online-Meeting-Bussiness-Vocabulary/","photos":[]},{"tags":[{"name":"IIS","slug":"IIS","permalink":"http://catzillaorz.github.io/tags/IIS/"}],"title":"IIS Server On Windows","date":"2023/09/01","text":"IIS Install follow below IIS Config new Config config IIS modify Web.config modify source= and id=sa;password=","permalink":"http://catzillaorz.github.io/2023/09/01/IIS-Server-On-Windows/","photos":[]},{"tags":[{"name":"React Native","slug":"React-Native","permalink":"http://catzillaorz.github.io/tags/React-Native/"}],"title":"React Native Getting Start","date":"2023/08/26","text":"Development EnviromentExponpm i -g expo-cli Expo Client App Store Only work on iPhone or iPad VSC Extension React Native Tools React-Native-/React/Redux Snippets Prettier Start Serve expo init xxx npm start Xcode App store Use simulator Android simulator Down load: Adroid Studio Config Android Studio Configration & Select SDK Manage SDK Platform Android 10.0 SDK tools Expo Documentation Add SDK to path (Linux| OSX) Install & Config Andriod Simulator Install & config env Debug with React Native Debugger download React Native Debugger set up in setting panel","permalink":"http://catzillaorz.github.io/2023/08/26/React-Native-Getting-Start/","photos":[]},{"tags":[{"name":"react","slug":"react","permalink":"http://catzillaorz.github.io/tags/react/"}],"title":"Thinking about State and Lifting State\n\n","date":"2023/08/20","text":"Problem: Sharing State With Sibling Component Solution: Lifting State Up Devrived State","permalink":"http://catzillaorz.github.io/2023/08/20/Thinking-about-State-and-Lifting-State/","photos":[]},{"tags":[{"name":"react","slug":"react","permalink":"http://catzillaorz.github.io/tags/react/"}],"title":"Thinking in react","date":"2023/08/20","text":"State VS. Props Thinking in React Local VS. Global State State Assertsion Tree When and Where","permalink":"http://catzillaorz.github.io/2023/08/20/Thinking-in-react/","photos":[]},{"tags":[{"name":"react","slug":"react","permalink":"http://catzillaorz.github.io/tags/react/"}],"title":"What is JSX","date":"2023/08/17","text":"What is JSX JSX is DECLARTVIE javascript’s Separation of Concers JSX’s Separation of Concers Pre Life The Rules of JSX","permalink":"http://catzillaorz.github.io/2023/08/17/What-is-JSX/","photos":[]},{"tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://catzillaorz.github.io/tags/Algorithms/"}],"title":"Data Structure and Algorithms","date":"2023/07/27","text":"Data Structure and Algorithms","permalink":"http://catzillaorz.github.io/2023/07/27/Data-Structure-and-Algorithms/","photos":[]},{"tags":[{"name":"SCSS","slug":"SCSS","permalink":"http://catzillaorz.github.io/tags/SCSS/"}],"title":"Basic Responsive Design Principle","date":"2023/04/08","text":"Review Media Queries Layouts","permalink":"http://catzillaorz.github.io/2023/04/08/Basic-Responsive-Design-Principle/","photos":[]},{"tags":[{"name":"GitAction","slug":"GitAction","permalink":"http://catzillaorz.github.io/tags/GitAction/"}],"title":"零成本迁移CI/CD-Travis To Github Action","date":"2023/02/05","text":"Use Github Action Free CI/CD Let’s go! name: catzilla_githubiorun-name: ${{ github.actor }} is testing out GitHub Actions 🚀on: [push]jobs: build: runs-on: ubuntu-latest steps: - name: Cache node modules uses: actions/cache@v3 with: path: | ~/.npm **/node_modules key: ${{runner.os}}v1-npm-deps-${{ hashFiles('**/package-lock.json') }} restore-keys: ${{runner.os}}v1-npm-deps- - name: Use Node.js uses: actions/checkout@v3 with: node-version: '14.x' - run: npm install -g hexo-cli - run: git clone https://github.com/shixiaohu2206/hexo-theme-huhu.git themes/hexo-theme-huhu - run: npm install - run: npm install cheerio@=1.0.0-rc.3 #script: # 在构建阶段需要运行的命令，一条一行，类似的还有 before_script、after_script - run: sed -i'' \"s~landscape~hexo-theme-huhu/~\" _config.yml #替换主题 - run: hexo clean - run: hexo generate # Hexo 常规命令，执行清理和生成 - run: find -maxdepth 7 -mindepth 2 -name 'index.html' -exec sed -i'' \"s~images/logo.jpeg~/cdn.jsdelivr.net/gh/catzillaorz/imgcdn/vsc_img/avatar2020-05-03.JPG~\" {} + #替换logo - run: find -maxdepth 7 -mindepth 2 -name 'index.html' -exec sed -i'' \"s/raw.githubusercontent.com\\/CatzillaOrz\\/imgcdn\\/master\\//cdn.jsdelivr.net\\/gh\\/catzillaorz\\/imgcdn\\//g\" {} + #替换logo # find ./ -name '*12-29-*.md' -type f -exec sed -i'' -e \"s/raw.githubusercontent.com\\/CatzillaOrz\\/imgcdn\\/master\\//cdn.jsdelivr.net\\/gh\\/catzillaorz\\/imgcdn\\//g\" {} \\; # - find -maxdepth 2 -mindepth 2 -name 'index.html' -exec sed -i'' 's~~~' {} + #提交搜索引擎 #after_success: # script 阶段成功时执行，构建失败不会执行，其他同上 - run: git config --global user.name \"catzillaorz\" - run: git config --global user.email \"catzillaorz@outlook.com\" - run: sed -i'' \"s~git@github.com:~https://${{vars.GITIO_REPO_TOKEN}}@github.com/~\" _config.yml - run: hexo deploy > /dev/null # 通过 Hexo 的 deploy 命令部署博客 enjoy","permalink":"http://catzillaorz.github.io/2023/02/05/Travis-2-Github-Action/","photos":[]},{"tags":[{"name":"Clean Code","slug":"Clean-Code","permalink":"http://catzillaorz.github.io/tags/Clean-Code/"}],"title":"Writing Clean and Modern Javascript","date":"2022/08/23","text":"Functional Programming Review: Mondern and Clean Code Review: Mondern and Clean Code 2","permalink":"http://catzillaorz.github.io/2022/08/23/Writing-Clean-and-Modern-Javascript/","photos":[]},{"tags":[{"name":"Module","slug":"Module","permalink":"http://catzillaorz.github.io/tags/Module/"}],"title":"An overview of Modules In Javascript","date":"2022/08/22","text":"Overview of Module Native Javascript (ES6) Modules How ES6 Modules Are Imported","permalink":"http://catzillaorz.github.io/2022/08/22/An-overview-of-Modules-In-Javascript/","photos":[]},{"tags":[{"name":"OOP","slug":"OOP","permalink":"http://catzillaorz.github.io/tags/OOP/"},{"name":"Prototype","slug":"Prototype","permalink":"http://catzillaorz.github.io/tags/Prototype/"}],"title":"Prototypal Inheritance and Delegation","date":"2022/08/12","text":"The 🆕 new Operator Zoom in the Prototype chain","permalink":"http://catzillaorz.github.io/2022/08/12/Prototypal-Inheritance-and-Delegation/","photos":[]},{"tags":[{"name":"OOP","slug":"OOP","permalink":"http://catzillaorz.github.io/tags/OOP/"}],"title":"OOP In JS","date":"2022/08/11","text":"OOP 4 principle Abstraction Encapulation Inheritance Polymorphism OOP IN JS Prototypes 3 ways of implementing prototypal inheritance in javascript","permalink":"http://catzillaorz.github.io/2022/08/11/OOP-In-JS/","photos":[]},{"tags":[{"name":"JIT","slug":"JIT","permalink":"http://catzillaorz.github.io/tags/JIT/"},{"name":"Frontend","slug":"Frontend","permalink":"http://catzillaorz.github.io/tags/Frontend/"}],"title":"Just-In-Time Compilation of Javascript","date":"2022/08/05","text":"Javascript Engine and Runtime Just-In-Time ; Runtime in the Browser Runtime in Node","permalink":"http://catzillaorz.github.io/2022/08/05/Just-In-Time-Compilation-of-Javascript/","photos":[]},{"tags":[{"name":"JS","slug":"JS","permalink":"http://catzillaorz.github.io/tags/JS/"},{"name":"Date","slug":"Date","permalink":"http://catzillaorz.github.io/tags/Date/"}],"title":"JS时间骚操作","date":"2022/03/22","text":"JS中的时间骚操作知道少 Don’t Panic（以当前日期new Date()为例。也可以将例中new Date()换成任意Date对象） 获取今天的0时0分0秒（常用于开始日期的获取） var startDate= new Date(new Date().toLocaleDateString()); //Tue May 15 2018 00:00:00 GMT+0800 (中国标准时间) 获取一个月前的日期 var lastM =new Date(new Date().setMonth(new Date().getMonth()-1));//Sun Apr 15 2018 09:18:08 GMT+0800 (中国标准时间) 获取一个月前的0时0分0秒 var lastM_start =new Date(new Date(new Date().toLocaleDateString()).setMonth(new Date().getMonth()-1));//Sun Apr 15 2018 00:00:00 GMT+0800 (中国标准时间) 获取前一天的日期 var yesterday = new Date(new Date().setDate(new Date().getDate()-1));//Mon May 14 2018 09:26:39 GMT+0800 (中国标准时间) 获取今天的23时59分59秒 var endDate = new Date(new Date(new Date().toLocaleDateString()).getTime()+24*60*60*1000-1);//Tue May 15 2018 23:59:59 GMT+0800 (中国标准时间) 获取昨天的23时59分59秒 var yes_endDate = new Date(new Date(new Date(new Date().setDate(new Date().getDate()-1)).toLocaleDateString()).getTime()+24*60*60*1000-1);//Mon May 14 2018 23:59:59 GMT+0800 (中国标准时间) 实现Date的Format方法 // 对Date的扩展，将 Date 转化为指定格式的String// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)// 例子：// (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423// (new Date()).Format(\"yyyy-M-d h:m:s.S\") ==> 2006-7-2 8:9:4.18Date.prototype.Format = function(fmt){ //author: meizz var o = { \"M+\" : this.getMonth()+1, //月份 \"d+\" : this.getDate(), //日 \"h+\" : this.getHours(), //小时 \"m+\" : this.getMinutes(), //分 \"s+\" : this.getSeconds(), //秒 \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \"S\" : this.getMilliseconds() //毫秒 }; if(/(y+)/.test(fmt)) fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); for(var k in o) if(new RegExp(\"(\"+ k +\")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length))); return fmt;} JavaScript toLocaleString() 方法 定义和用法toLocaleString() 方法可根据本地时间把 Date 对象转换为字符串，并返回结果。 返回值dateObject 的字符串表示，以本地时间区表示，并根据本地规则格式化。 注意： var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));//假定本地时区是 America/Los_Angeles(美国时区)//en-US(美利坚英语)使用 month-day-year 的顺序展示年月日alert(date.toLocaleString(\"en-US\"));// → \"12/19/2012, 7:00:00 PM\"// en-GB(不列颠英语)使用 day-month-year 顺序展示年月日alert(date.toLocaleString(\"en-GB\"));// → \"20/12/2012 03:00:00\"// 韩语使用 year-month-day 顺序展示年月日alert(date.toLocaleString(\"ko-KR\"));// → \"2012. 12. 20. 오후 12:00:00\" 该方法时区不同，所得到的年月会不同。配合Date.getTime()获得的（返回 1970 年 1 月 1 日至今的毫秒数。）也会发生巨大变化； Date.prototype.toLocaleDateString() Date 实例转为表示本地时间的字符串，有常见三种方法 Date.prototype.toLocaleString()：完整的本地时间。 Date.prototype.toLocaleDateString()：本地日期（不含小时、分和秒）。 Date.prototype.toLocaleTimeString()：本地时间（不含年月日） new Date().toLocaleTimeString() // \"下午12:26:15\"new Date().toLocaleDateString() // \"2020/10/18\"new Date().toLocaleString() // \"2020/10/18 下午12:26:24\"// 转为zh-CN中国本地24小时时间：new Date(e.createdTime).toLocaleString('zh-CN', { hour12: false }); 更多显示日期+显示星期+显示不同地区语言 //日期{{formatDate('2020/10/18')}}formatDate(date) { const options = { year: 'numeric', month: 'long', day: 'numeric' } return new Date(date).toLocaleDateString('zh-CN', options)}//结果: 2020年10月18日 // Week{{formatDate('2020/10/18')}}formatDate(date) { const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' } return new Date(date).toLocaleDateString('zh-CN', options)}//结果: 2020年10月18日星期日 {{formatDate('2020/10/18')}}formatDate(date) { const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' } return new Date(date).toLocaleDateString('en-US', options)}// 结果: Sunday, October 18, 2020 {{formatDate('2020/10/18')}}formatDate(date) { const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' } return new Date(date).toLocaleDateString('en-US', options)} options dateStyle：可能的值为full、long、medium、short。 timeStyle：可能的值为full、long、medium、short。 month：可能的值为numeric、2-digit、long、short、narrow。 year：可能的值为numeric、2-digit。 weekday：可能的值为long、short、narrow。 day、hour、minute、second：可能的值为numeric、2-digit。 timeZone：可能的值为 IANA 的时区数据库。 timeZooneName：可能的值为long、short。 hour12：24小时周期还是12小时周期，可能的值为true、false new Date().toLocaleDateString('zh-CN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'})// \"2020年10月18日星期日\"new Date().toLocaleTimeString('zh-CN', { timeZone: 'Asia/Shanghai', hour12: false, timeZoneName: 'long'})// \"中国标准时间 12:20:18\"new Date().toLocaleTimeString('zh-CN', { timeZone: 'Asia/Shanghai', hour12: true, day: 'numeric'})// \"18日 下午12:21:29\" 扩展+分割+显示不同单位如美元人民币+控制小数位 分割 在Number的原型上也有这个方法toLocaleString,即Number.prototype.toLocaleString() const price = 12345678;price.toLocaleString(); // => \"12,345,678\" currency 单位列表，查看 var price = 2499;price.toLocaleString('zh-CN', { style: 'currency', currency: 'RMB'});// \"RMB 2,499.00\"var price = 2499;price.toLocaleString('zh-CN', { style: 'currency', currency: 'USD'});// \"US$2,499.00\" 控制小数位 var price = 2499;price.toLocaleString('zh-CN', { style: 'currency', currency: 'KNS', minimumFractionDigits:3});// \"KNS 2,499.000\" angular date pipe {{ rowData[col.field] | date: 'yyyy-MM-dd HH:mm:ss':'GMT+08:00' }} {{ rowData[col.field] }} – 当然，服务器可能会设置不是zh-CN这时就需要转换时区 // value = '2020-02-23 13:33:44' 此处输入format时间省略了后面1000毫秒之内的数字new Date(new Date(value).toLocaleString(\"en-US\")).getTime();// 注意服务器可能还有 1000 毫秒被省略，查询时还要加条件this.filter.time ? `[${this.filter.time},${this.filter.time + 1000}]` : ''","permalink":"http://catzillaorz.github.io/2022/03/22/JS%E6%97%B6%E9%97%B4%E9%AA%9A%E6%93%8D%E4%BD%9C/","photos":[]},{"tags":[{"name":"Math","slug":"Math","permalink":"http://catzillaorz.github.io/tags/Math/"},{"name":"MAT170","slug":"MAT170","permalink":"http://catzillaorz.github.io/tags/MAT170/"}],"title":"Arizona State University MAT170 functions In exam","date":"2021/09/07","text":"functions you may wish to use during your exam example Frequently Asked Questions How do I type special characters in the Final Exam? Exponent: ^ Multiplication: * Fraction: / Square Root: sqrt() Example: sqrt(1) Natural log: ln() Example: ln(2) Pi: pi Infinity: infty Negative Infinity: -infty","permalink":"http://catzillaorz.github.io/2021/09/07/Arizona-State-University-MAT170-functions-In-exam/","photos":[]},{"tags":[{"name":"TS","slug":"TS","permalink":"http://catzillaorz.github.io/tags/TS/"},{"name":"Decorators","slug":"Decorators","permalink":"http://catzillaorz.github.io/tags/Decorators/"}],"title":"装饰器Decorators & metadata reflection in TypeScript: From Novice to Expert (Part IV)","date":"2021/09/06","text":"Types serialization & The metadata reflection API In this post we will learn about: Why we need reflection in JavaScript? The metadata reflection API Basic type serialization Complex type serialization Let’s start by learning why we need reflection in JavaScript. 本片相当于短篇的引入，更多实践内容需要自行发掘，切该作者后期4年期间也未曾再更新相关内容。 Why we need reflection in JavaScript? The name reflection is used to describe code which is able to inspect other code in the same system (or itself). Reflection is useful for a number of use cases (Composition/Dependency Injection, Run-time Type Assertions, Testing). Our JavaScript applications are getting bigger and bigger and we are starting to need some tools (like inversion of control containers) and features like (run-time type assertions) to manage this increasing complexity. The problem is that because there is not reflection in JavaScript some of this tools and features cannot be implemented, or at least they can not be implemented to be as powerful as they are in programming languages like C# or Java. A powerful reflection API should allow us to examine an unknown object at run-time and find out everything about it. We should be able to find things like: The name of the entity. The type of the entity. Which interfaces are implemented by the entity. The name and types of the properties of the entity. The name and types of the constructor arguments of the entity. In JavaScript we can use functions like Object.getOwnPropertyDescriptor() or Object.keys() to find some information about an entity but we need reflection to implement more powerful development tools. However, things are about to change because TypeScript is starting to support some Reflection features. Let’s take a look to this features: The metadata reflection API The native JavaScript support for a metadata reflection API is in an early stage of development. There is a proposal to add Decorators to ES7, along with a prototype for an ES7 Reflection API for Decorator Metadata, which is available online. Some of the guys from the TypeScript team have been working on a Polyfill for the prototype of the ES7 Reflection API and the TypeScript compiler is now able to emit some serialized design-time type metadata for decorators. We can use this metadata reflection API polyfill by using the reflect-metadata package: npm install reflect-metadata; We must use it with TypeScript 1.5 and the compiler flag emitDecoratorMetadata set to true. We also need to including a reference to reflect-metadata.d.ts. and load the Reflect.js file. We then need to implement our own decorators and use one of the available reflect metadata design keys. For the moment there are only three available: Type metadata uses the metadata key \"design:type\". Parameter type metadata uses the metadata key \"design:paramtypes\". Return type metadata uses the metadata key \"design:returntype\". Let’s see a couple of examples. Obtaining type metadata using the reflect metadata API Let’s declare the following property decorator: function logType(target : any, key : string) { var t = Reflect.getMetadata(\"design:type\", target, key); console.log(`${key} type: ${t.name}`); } We can then apply it to one of the properties of a class to obtain its type: class Demo{ @logType // apply property decorator public attr1 : string; } The example above logs the following in console: attr1 type: String Obtaining Parameter type metadata using the reflect metadata API Let’s declare the following parameter decorator: function logParamTypes(target : any, key : string) { var types = Reflect.getMetadata(\"design:paramtypes\", target, key); var s = types.map(a => a.name).join(); console.log(`${key} param types: ${s}`); } We can then apply it to one of the method of a class to obtain information about the types of its arguments: class Foo {} interface IFoo {} class Demo{ @logParameters // apply parameter decorator doSomething( param1 : string, param2 : number, param3 : Foo, param4 : { test : string }, param5 : IFoo, param6 : Function, param7 : (a : number) => void, ) : number { return 1 } } The example above logs the following in console: doSomething param types: String, Number, Foo, Object, Object, Function, Function Obtaining return type metadata using the reflect metadata APIWe can also get information about the return type of a method using the \"design:returntype\" metadata key: Reflect.getMetadata(\"design:returntype\", target, key); Basic type serialization Let’s take a look to the \"design:paramtypes\" example above again. Notice the that interfaces IFoo and object literal { test : string} are serialized as Object. This is because TypeScript only supports basic type serialization. The basic type serialization rules are: number serialized as Number string serialized as String boolean serialized as Boolean any serialized as Object void serializes as undefined Array serialized as Array If a Tuple, serialized as Array If a class serialized it as the class constructor If an Enum serialized it as Number If has at least one call signature, serialized as Function Otherwise serialized as Object (Including interfaces) Interfaces and object literals may be serialize in the future via complex type serialization but this feature is not available at this time. Complex types serializationThe TypeScript team is working on a proposal that will allow us to generate metadata for complex types. They proposal describes how some complex types will be serialized. The serialization rules above will still be used for basic type but a different serialization logic will be used for complex types. In the proposal there is a base type that is used to describe all the possible types: /** * Basic shape for a type. */interface _Type { /** * Describes the specific shape of the type. * @remarks * One of: \"typeparameter\", \"typereference\", \"interface\", \"tuple\", \"union\", * or \"function\". */ kind: string;} We can also find the classes that will be used to describe each of the possible types. For example, we can find the class proposed to be used to serialize genetic interfaces interface foo { /* ... */}: /** * Describes a generic interface. */interface InterfaceType extends _Type { kind: string; // \"interface\" /** * Generic type parameters for the type. May be undefined. */ typeParameters?: TypeParameter[]; /** * Implemented interfaces. */ implements?: Type[]; /** * Members for the type. May be undefined. * @remarks Contains property, accessor, and method declarations. */ members?: { [key: string | symbol | number]: Type; }; /** * Call signatures for the type. May be undefined. */ call?: Signature[]; /** * Construct signatures for the type. May be undefined. */ construct?: Signature[]; /** * Index signatures for the type. May be undefined. */ index?: Signature[];} As we can see above there will be an attribute which indicates the implemented interfaces: /** * Implemented interfaces. */implements?: Type[]; That information could be used to do things like validate if an entity implements certain interface at run-time, which could be really useful for an IoC container. We don’t know when complex type serialization support will be added to TypeScript but we cannot wait because we have plans to use it to add some cool features to our awesome IoC container for JavaScript: InversifyJS. ConclusionIn this series we have learned in-depth 4 out of the 4 available types of decorators, how to create a decorator factory and how to use a decorator factory to implement configurable decorators. We also know how to work with the metadata reflection API.","permalink":"http://catzillaorz.github.io/2021/09/06/%E8%A3%85%E9%A5%B0%E5%99%A8Decorators-metadata-reflection-in-TypeScript-From-Novice-to-Expert-Part-IV/","photos":[]},{"tags":[{"name":"TS","slug":"TS","permalink":"http://catzillaorz.github.io/tags/TS/"},{"name":"Decorators","slug":"Decorators","permalink":"http://catzillaorz.github.io/tags/Decorators/"}],"title":"装饰器Decorators & metadata reflection in TypeScript: From Novice to Expert (Part III)","date":"2021/09/06","text":"PART III: Parameter decorators & Decorator factory 参数装饰器 & 工厂装饰器 这部分没有前两部分内容翔实，点到为止，更多的实践，还需要自行深入学习。 In the previous post in this series we learned what are decorators and how they are implemented in TypeScript. We know how to work with class, method and property decorators. In this post we will learn about: The remaining type of decorator: the parameter decorator.How to implement a decorator factory.How to implement configurable decorators.We are going to use the following class to showcase these concepts. class Person { public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; } public saySomething(something : string) : string { return this.name + \" \" + this.surname + \" says: \" + something; }} Parameter decorators As we already know, the signature of a ParameterDecorator looks as follows. declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void; We can use a parameter decorator named logParameter as follows: class Person { public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; } public saySomething(@logParameter something : string) : string { return this.name + \" \" + this.surname + \" says: \" + something; }} When compiled into JavaScript the __decorate method (which we explained in PART I) is invoked here. Object.defineProperty(Person.prototype, \"saySomething\", __decorate([ __param(0, logParameter) ], Person.prototype, \"saySomething\", Object.getOwnPropertyDescriptor(Person.prototype, \"saySomething\"))); return Person; If we compare it with the previous decorators we could assume that because the Object.defineProperty() is invoked, the method saySomething will be replaced by the value returned by the __decorated function (like in the method decorator). This assumption is wrong. If we examine the code snippet above, we will notice that there is a new function named __param. The __param function is generated by the TypeScript compiler and looks as follows: var __param = this.__param || function (index, decorator) { // return a decorator function (wrapper) return function (target, key) { // apply decorator (return is ignored) decorator(target, key, index); }}; The __param function returns a decorator that wraps the parameter decorator (refereed as decorator). As we can see when the parameter decorator is invoked, its return is ignored. This means that when the __decorate function is invoked, its return will not be used to override the saySomething method . This is the reason why parameter decorators don’t return. The decorator wrapper in __param is used to store the index of the parameter in a closure. The index is just the position in the list of arguments. class foo { // foo index === 0 public foo(@logParameter foo: string) : string { return \"bar\"; } // bar index === 1 public foobar(foo: string, @logParameter bar: string) : string { return \"foobar\"; }} Now we know that a parameter decorator takes 3 parameters: The prototype of the class being decorated. The name of the method that contains the parameter being decorated. The index of that parameter being decorated. Let’s implement the logProperty decorator. function logParameter(target: any, key : string, index : number) { var metadataKey = `log_${key}_parameters`; if (Array.isArray(target[metadataKey])) { target[metadataKey].push(index); } else { target[metadataKey] = [index]; }} The parameter decorator above adds a new property (metadataKey) to the class prototype. The new property is an array and contains the indices of the parameters being decorated. We can consider this new property as metadata. A parameter decorator is not supposed to modify the behavior of a constructor, method or property. A parameter decorator should only be used to generate some sort of metadata. Once the metadata has been created we can use another decorator to read it. For example, in the example bellow we can find and updated version of the method decorator that we created in PART II. The original version logged in console the function name and all its arguments when it was invoked. The new version reads the metadata to log in console only the parameters that have been decorated using the parameter decorator. class Person { public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; } @logMethod public saySomething(@logParameter something : string) : string { return this.name + \" \" + this.surname + \" says: \" + something; }}function logMethod(target: Function, key: string, descriptor: any) { var originalMethod = descriptor.value; descriptor.value = function (...args: any[]) { var metadataKey = `__log_${key}_parameters`; var indices = target[metadataKey]; if (Array.isArray(indices)) { for (var i = 0; i < args.length; i++) { if (indices.indexOf(i) !== -1) { var arg = args[i]; var argStr = JSON.stringify(arg) || arg.toString(); console.log(`${key} arg[${i}]: ${argStr}`); } } var result = originalMethod.apply(this, args); return result; } else { var a = args.map(a => (JSON.stringify(a) || a.toString())).join(); var result = originalMethod.apply(this, args); var r = JSON.stringify(result); console.log(`Call: ${key}(${a}) => ${r}`); return result; } } return descriptor;} In the PART IV of this series we will learn a better way to work with metadata: The metadata reflection API. The bellow is just a sneak peek of what we will learn. function logParameter(target: any, key: string, index: number) { var indices = Reflect.getMetadata(`log_${key}_parameters`, target, key) || []; indices.push(index); Reflect.defineMetadata(`log_${key}_parameters`, indices, target, key);} Decorator factoryThe official TypeScript decorators proposal defines a decorator factory as follows: A decorator factory is a function that can accept any number of arguments, and must return one of the types of decorator. We have learned how to implement and consume all the available types of decorator (class, method, property and parameter) but there is something that we can improve. Let’s consider the following code snippet: @logClassclass Person { @logProperty public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; } @logMethod public saySomething(@logParameter something : string) : string { return this.name + \" \" + this.surname + \" says: \" + something; }} The above works but it would be better if we could just consume a decorator everywhere without having to worry about its type as follows: @logclass Person { @log public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; } @log public saySomething(@log something : string) : string { return this.name + \" \" + this.surname + \" says: \" + something; }} We can achieve this by wrapping all the decorators with a decorator factory. The decorator factory is able to identify what type of decorator is required by checking the arguments passed to the decorator: function log(...args : any[]) { switch(args.length) { case 1: return logClass.apply(this, args); case 2: return logProperty.apply(this, args); case 3: if(typeof args[2] === \"number\") { return logParameter.apply(this, args); } return logMethod.apply(this, args); default: throw new Error(\"Decorators are not valid here!\"); }} Configurable decorators The last thing that we will learn in this post is how to allow developers to pass arguments to a decorator when it is consumed. @logClassWithArgs({ when : { name : \"remo\"} })class Person { public name: string; // ...} We can use a decorator factory to create configurable decorators. function logClassWithArgs(filter: Object) { return (target: Object) => { // implement class decorator here, the class decorator // will have access to the decorator arguments (filter) // because they are stored in a closure }} We can apply the same idea to the other decorator types (method, property and parameter) to make them configurable. ConclusionWe now understand in-depth 4 out of the 4 available types of decorators, how to create a decorator factory and how to use a decorator factory to implement configurable decorators.","permalink":"http://catzillaorz.github.io/2021/09/06/%E8%A3%85%E9%A5%B0%E5%99%A8Decorators-metadata-reflection-in-TypeScript-From-Novice-to-Expert-Part-III/","photos":[]},{"tags":[{"name":"TS","slug":"TS","permalink":"http://catzillaorz.github.io/tags/TS/"},{"name":"Decorators","slug":"Decorators","permalink":"http://catzillaorz.github.io/tags/Decorators/"}],"title":"装饰器Decorators & metadata reflection in TypeScript: From Novice to Expert (Part II)","date":"2021/09/03","text":"PART II: Property decorators & Class decorators I will assume that you have already read the Part I of these series and you know the answer to these questions. In this post we will learn about the two new decorator types: PropertyDecorator and ClassDecorator. Let’s start with PropertyDecorator. Property decorator As we already know, the signature of a PropertyDecorator looks as follows. declare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void; We can use a property decorator named logProperty as follows: class Person { @logProperty public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; }} When compiled into JavaScript the __decorate method (which we explained in PART I) is invoked here but this time it is missing the last parameter (a property descriptor obtained via Object.getOwnPropertyDescriptor). var Person = (function () { function Person(name, surname) { this.name = name; this.surname = surname; } __decorate([ logProperty ], Person.prototype, \"name\"); return Person;})(); This is the reason why the property decorator takes 2 (prototype and key) arguments as opposed to 3 (prototype, key and property descriptor) like in the case of the method decorator. Another thing that we should notice is that this time the TypeScript compiler is not using the return of __decorate to override the original property like itwith the method decorator. Object.defineProperty(C.prototype, \"foo\", __decorate([ log ], C.prototype, \"foo\", Object.getOwnPropertyDescriptor(C.prototype, \"foo\"))); This is the reason why property decorators don’t return. Now that we know that a property decorator takes the prototype of the class being decorated and the name of the property being decorated as arguments and don’t return, let’s implement the logProperty decorator. function logProperty(target: any, key: string) { // property value var _val = this[key]; // property getter var getter = function () { console.log(`Get: ${key} => ${_val}`); return _val; }; // property setter var setter = function (newVal) { console.log(`Set: ${key} => ${newVal}`); _val = newVal; }; // Delete property. if (delete this[key]) { // Create new property with getter and setter Object.defineProperty(target, key, { get: getter, set: setter, enumerable: true, configurable: true }); }} The decorator above declares a variable named _val and sets its value to the value of the property being decorated (since this refers to the class prototype here and key is the name of the property). Then, the functions getter (used to get the value of the property) and setter (used to set the value of the property) are declared. Both functions will have permanent access to _val thanks to the closures created when each of these functions are declared. Here is where we will add some extra behaviour to the property. In this case we have added a line to log in console the changes in the property value. Later, the operator delete is used to delete the original property from the class prototype. Note: The delete operator throws in strict mode if the property is an own non-configurable property (returns false in non-strict). If the property is successfully deleted, The Object.defineProperty()method is used to create a new property using the original property’s name but this time the property uses the previously declared getter and setter functions. Now that the decorator is ready it will log in console the changes to the property every time we set or get its value. var me = new Person(\"Remo\", \"Jansen\");// Set: name => Remome.name = \"Remo H.\";// Set: name => Remo H.name;// Get: name Remo H. Class decoratorAs we already know, the signature of a ClassDecorator looks as follows. declare type ClassDecorator = (target: TFunction) => TFunction | void; We can use a class decorator named logClass as follows: @logClassclass Person { public name: string; public surname: string; constructor(name : string, surname : string) { this.name = name; this.surname = surname; }} When compiled into JavaScript the __decorate function (which we explained in PART I) is invoked here but this time it is missing the last 2 parameters. var Person = (function () { function Person(name, surname) { this.name = name; this.surname = surname; } Person = __decorate([ logClass ], Person); return Person;})(); We should notice that the compiler is passing Person and not Person.prototype to __decorate. This is the reason why the class decorator takes 1 (the class constructor) argument as opposed to 3 (prototype, key and property descriptor) like in the case of the method decorator. Another thing that we can notice is that this time the TypeScript compiler is using the return of __decorate to override the original constructor Person = __decorate(/* ... */); This is the reason why class decorators must return a constructor function. Now that we know that a class decorator takes the constructor of the class being decorated as its only argument and must return a new constructor, let’s implement the logClass decorator. function logClass(target: any) { // save a reference to the original constructor var original = target; // a utility function to generate instances of a class function construct(constructor, args) { var c : any = function () { return constructor.apply(this, args); } c.prototype = constructor.prototype; return new c(); } // the new constructor behaviour var f : any = function (...args) { console.log(\"New: \" + original.name); return construct(original, args); } // copy prototype so intanceof operator still works f.prototype = original.prototype; // return new constructor (will override original) return f;} The decorator above declares a variable named original and sets its value to the constructor of the class being decorated. Then, a utility function named construct is declared. This function allow us to create instances of a class. We then create a variable named f that will be used as the new constructor. This function invokes the original constructor and will also log in console the name of the class being instantiated. Here is where we will add some extra behaviour to the original constructor. The prototype of the original constructor is copied to the prototype of f to ensure that the instanceof operator works as expected when we create a new instance of Person. Once the new constructor is ready we just need to return it to finish the class decorator implementation. Now that the decorator is ready it will log in console the name of a class every time it is instantiated. var me = new Person(\"Remo\", \"Jansen\");// New: Personme instanceof Person;// true ConclusionWe now understand in-depth 3 out of the 4 available types of decorators. We know how to implement them and how they work internally. In the next post we will learn about the last type of decorator (the parameter decorator) and how to create a universal decorator that we can apply to classes, properties, methods and parameters.","permalink":"http://catzillaorz.github.io/2021/09/03/%E8%A3%85%E9%A5%B0%E5%99%A8Decorators-metadata-reflection-in-TypeScript-From-Novice-to-Expert-Part-II/","photos":[]},{"tags":[{"name":"TS","slug":"TS","permalink":"http://catzillaorz.github.io/tags/TS/"},{"name":"Decorators","slug":"Decorators","permalink":"http://catzillaorz.github.io/tags/Decorators/"}],"title":"装饰器和注解The difference between Annotations and Decorators","date":"2021/09/02","text":"The difference between Annotations and Decorators Pbulished 03 May 2015 Annotations Let’s start off with annotations. As mentioned, the Angular team announced AtScript as their language extension to JavaScript. AtScript comes with features like Type Annotations, Field Annotations and MetaData Annotations. We’re going to focus on metadata annotations. Let’s take a look at the following Angular component to get an idea of what metadata annotations can look like: @Component({ selector: 'tabs', template: ` Tab 1 Tab 2 `})export class Tabs {} We have a class Tabs that is basically empty. The class has one annotation @Component. If we’d remove all annotations, what would be left is just an empty class that doesn’t have any special meaning right? So it seems that @Component add some metadata to the class in order to give it a specific meaning. This is what annotations are all about. They are a declarative way to add metadata to code. @Component is an annotation that tells Angular, that the class, which the annotation is attached to, is a component. Okay, even if that seems to be quite clear, there are a few questions coming up: Where do those annotations come from? This is nothing that JavaScript gives us out of the box right? Who defined this annotations called @Component? If this is part of AtScript, what does that translate to, so we can use it in today’s browsers? Let’s answer these one by one. Where do those annotations come from? To answer that question, we need to complete the code sample. @Component is something we need to import from the Angular framework like this: import { ComponentMetadata as Component,} from '@angular/core'; This pretty much answers our first question. Both annotations are provided by the framework. Let’s take a look at what the implementation of those annotations look like: export class ComponentMetadata extends DirectiveMetadata { constructor() { ... }} …… read more Conclusion “AtScript Annotations” and decorators are nearly the same thing. From a consumer perspective we have exactly the same syntax. The only thing that differs is that we don’t have control over how AtScript annotations are added as metadata to our code. Whereas decorators are rather an interface to build something that ends up as annotation. Over a long term, however, we can just focus on decorators, since those are a real proposed standard. AtScript is deprecated, and TypeScript implements decorators. I hope this article made some things clear though.","permalink":"http://catzillaorz.github.io/2021/09/02/The-difference-between-Annotations-and-Decorators/","photos":[]},{"tags":[{"name":"math","slug":"math","permalink":"http://catzillaorz.github.io/tags/math/"}],"title":"数学学习路线图","date":"2021/08/27","text":"说明 本文学习路线图，资料发掘与 Precalculus 课程对应的 discord 社区成员分享。 最终指向github项目开源仓库，所有权归原作者所有。 Roadmap Image 部分内容摘要 Problems with learning Mathematics 哲学是本学习路线开端的推荐起始阅读书籍，作者给出了说明。 作者依次给出了以下学习帮助和意见，见解独到，可供参考： Objective Learning Tips Reading Tips How to use the Roadmap Software","permalink":"http://catzillaorz.github.io/2021/08/27/%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/","photos":[]},{"tags":[{"name":"TS","slug":"TS","permalink":"http://catzillaorz.github.io/tags/TS/"}],"title":"注解&装饰器Decorators & metadata reflection in TypeScript: From Novice to Expert (Part I)","date":"2021/08/17","text":"TypeScript装饰器+源数据编程：从新手到专家Part1 原文链接 本文只从阅读原文中提取部分内容，方便临时查阅 MAY 18, 2015为原文发布日期，部分信息可能已经不再适用，但是基本原理依然没变，需要仔细研读。 A few months ago Microsoft and Google announced that they were working together on TypeScript and Angular 2.0We’re excited to announce that we have converged the TypeScript and AtScript languages, and that Angular 2, the next version of the popular JavaScript library for building web sites and web apps, will be developed with TypeScript. brief This series will cover: PART I: Method decorators PART II: Property decorators & Class decorators PART III: Parameter decorators & Decorator factory PART IV: Types serialization & The metadata reflection API The difference between Annotations and Decorators Annotation and decorator are pretty much the same: Annotations and decorators are nearly the same thing.From a consumer perspective we have exactly the same syntax.The only thing that differs is that we don’t have control over how annotations are added as meta data to our code.Whereas decorators is rather an interface to build something that ends up as annotation. Over a long term, however, we can just focus on decorators, since those are a real proposed standard. AtScript is TypeScript and TypeScript implements decorators. Let’s take a look to the TypeScript’s decorators syntax. Note: If you want to learn more about the difference between Annotations and Decorators there is a great article by Pascal Precht on this topic. Decorators in TypeScriptIn the TypeScript source code we can find the signature of the available types of decorators: declare type ClassDecorator = (target: TFunction) => TFunction | void;declare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;declare type MethodDecorator = (target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor) => TypedPropertyDescriptor | void;declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void; Method decorators To invoke a method decorator we need to prefix the method that we wish to decorate with the @ character follow by the name of the decorator. In the case of a decorator named log, the syntax will look as follows: class C { @log foo(n: number) { return n * 2; }} Before we can actually use @log we need to declare the method decorator somewhere in our application. Let’s take a look to the log method decorator implementation. function log(target: Function, key: string, value: any) { return { value: function (...args: any[]) { var a = args.map(a => JSON.stringify(a)).join(); var result = value.value.apply(this, args); var r = JSON.stringify(result); console.log(`Call: ${key}(${a}) => ${r}`); return result; } };} Note: Please take a look to updates at the end of this post for an alternative implementation, which a avoids one potential issue. A method decorators takes a 3 arguments: target the method being decorated. key the name of the method being decorated. value a property descriptor of the given property if it exists on the object, undefined otherwise. - The property descriptor is obtained by invoking the Object.getOwnPropertyDescriptor() function. There is something strange right? We didn’t pass any of these parameters when we used the decorator @log in the C class definition. At this point we should be wondering who is providing those arguments? and Where is the log method being invoked? We can find the answers to these questions by examining the code that the TypeScript compiler will generate for the code above. var C = (function () { function C() { } C.prototype.foo = function (n) { return n * 2; }; Object.defineProperty(C.prototype, \"foo\", __decorate([ log ], C.prototype, \"foo\", Object.getOwnPropertyDescriptor(C.prototype, \"foo\"))); return C;})(); Without the @log decorator the generated JavaScript for the C class would just be as follows. var C = (function () { function C() { } C.prototype.foo = function (n) { return n * 2; }; return C;})(); But when we add the @log decorator the following additional code is added to the class definition by the TypeScript compiler. Object.defineProperty( __decorate( [log], // decorators C.prototype, // target \"foo\", // key Object.getOwnPropertyDescriptor(C.prototype, \"foo\") // desc );); If we read the MDN documentation we will learn that the following about the defineProperty function. The Object.defineProperty() method defines a new property directly on an object,or modifies an existing property on an object, and returns the object. The TypeScript compiler is passing the prototype of C, the name of the method being decorated (foo) and the return of a function named __decorate to the defineProperty method. The TypeScript compiler is using the defineProperty method to override the method being decorated. The new method implementation will be the value returned by the function __decorate. By now we should have a new question: Where is the __decorate function declared? var __extends = this.__extends || function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; function __() { this.constructor = d; } __.prototype = b.prototype; d.prototype = new __();}; In a similar manner, when we use a decorator a function named __decorator is generated by the TypeScript compiler. Let’s take a look to the __decorator funcion. var __decorate = this.__decorate || function (decorators, target, key, desc) { if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") { return Reflect.decorate(decorators, target, key, desc); } switch (arguments.length) { case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target); case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0); case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc); }}; The first line in the code snippet above is using an OR operator to ensure that if the function __decorator is generated more than once it will not be override again and again. In the second line, we can observe a conditional statement: if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") The conditional statement is used to detect an upcoming JavaScript feature: The metadata reflection API. Note: We will focus on the metadata reflection API towards the end of this post series so let’s ignore it for now. Let’s remember how did we get here for a second. The method foo is about to be override by the return of the function __decorate which was invoked with the following parameters. __decorate( [log], // decorators C.prototype, // target \"foo\", // key Object.getOwnPropertyDescriptor(C.prototype, \"foo\") // desc); We are now inside the __decorate method and because the metadata reflection API is not available, a fallback is about to be executed. // arguments.length === number fo arguments passed to __decorate()switch (arguments.length) { case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target); case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0); case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);} Because 4 parameters are passed to the __decorate method, the case 4 will be executed. Understanding this piece of code can be a challenge because the name of the variables are not really descriptive but we are not scared of it right? Let’s start by learning about the reduceRight method. The reduceRight method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value. The code below performs the exact same operation but it had been rewritten to facilitate its understanding [log].reduceRight(function(log, desc) { if(log) { return log(C.prototype, \"foo\", desc); } else { return desc; }}, Object.getOwnPropertyDescriptor(C.prototype, \"foo\")); When the code above is executed the decorator log is invoked and we can see that some parameters are passed to it: C.prototype,”foo“ and previousValue. So we have finally answered our original questions: Who is providing those arguments? Where is the log method being invoked? If we return to the log decorator implementation we will be able to understand much better what happens when it is invoked. function log(target: Function, key: string, value: any) { // target === C.prototype // key === \"foo\" // value === Object.getOwnPropertyDescriptor(C.prototype, \"foo\") return { value: function (...args: any[]) { // convert list of foo arguments to string var a = args.map(a => JSON.stringify(a)).join(); // invoke foo() and get its return value var result = value.value.apply(this, args); // convert result to string var r = JSON.stringify(result); // display in console the function call details console.log(`Call: ${key}(${a}) => ${r}`); // return the result of invoking foo return result; } };} After decorating the foo method it will continue to work as usually but it will also execute the extra logging functionality added by the log the decorator. var c = new C();var r = c.foo(23); // \"Call: foo(23) => 46\"console.log(r); // 46 ConclusionsIt has been a journey right? I hope you have enjoyed as much as I have. We are just getting started but we already know enough to create some truly awesome stuff. Method decorators can be used for many interesting features. For example, If you have ever worked with spies in testing frameworks like SinonJS you will probably get excited when you realize that decorators are going to allow us to do things like create spies by just adding a @spy decorator. In the next chapter of this series we will learn how to work with Property decorators. Don’t forget to subscribe if you don’t want to miss it out! 总结：装饰器从某种意义上讲就是一种“注解”机制的实现，对于angular中的“注解”而言，他是一种被指定了特殊编译过程的装饰器。明白了装饰器的原理，也就能够理解注解对于angular框架来说的意义。再说TS中装饰器，如果把其他框架结合TS使用 ，那么TS中的注解，从某种意义上来说，就是如同angular注解一样，是一种注解AOP编程思维的转换。","permalink":"http://catzillaorz.github.io/2021/08/17/%E8%A3%85%E9%A5%B0%E5%99%A8Decorators-metadata-reflection-in-TypeScript-From-Novice-to-Expert-Part-I/","photos":[]},{"tags":[{"name":"Language","slug":"Language","permalink":"http://catzillaorz.github.io/tags/Language/"},{"name":"Spanish","slug":"Spanish","permalink":"http://catzillaorz.github.io/tags/Spanish/"}],"title":"Spanish Introduction1","date":"2021/06/08","text":"GenderIn Spanish, all nouns are either masculine or feminine.Often, nouns end in ‑o if they’re masculine and ‑a if they’re feminine. el niño the boy la niña the girl Notice how you use el if the word is masculine and la if the word is feminine. The apple is a girl(?!)It’s not just people that are masculine or femininein Spanish. Objects are, too! el pan the bread la manzana the apple Not sure what gender something is? Look at the the! If a word uses el, it’s masculine. If it uses la, it’s feminine. I think, therefore…In English, verb forms change depending on who’s doing the action. For example, we say I am, you are, and she is. In Spanish, you do the same thing. subject verb (ser) yo I soy I am tú you eres you are él he es he is ella she es she is Yo soy una niña. Tú eres un niño. I am a girl. You are a boy GreetingsMany Spanish greetings depend on the time of day. Buenas tardes Good afternoon Buenas noches can mean both Good evening and Good night. Buenas noches Good evening / Good night Spanish soundsSpanish pronunciation is easier than you think! In general, Spanish vowels are always pronounced the same way. For example, the a in adiós sounds the same as the a in cama. a cama As in father. e leche As in set. niño As in Lisa. como As in gold. mucho gusto As in dude.","permalink":"http://catzillaorz.github.io/2021/06/08/Spanish-Introduction/","photos":[]},{"tags":[{"name":"English","slug":"English","permalink":"http://catzillaorz.github.io/tags/English/"},{"name":"Wechat","slug":"Wechat","permalink":"http://catzillaorz.github.io/tags/Wechat/"}],"title":"英语60秒：These Endangered Birds Are Forgetting Their Songs","date":"2021/06/02","text":"These Endangered Birds Are Forgetting Their Songs Australia’s critically endangered regent honeyeaters are losing what amounts to their culture—and that could jeopardize their success at landing a mate. Some birds are relatively easy to study. Ross Crates studies the ones that aren’t. He’s part of the Difficult Bird Research Group at the Australian National University. “All our study species are quite challenging to study for various reasons, mostly because they’re really rare and highly mobile.” One of those “difficult birds” is the critically endangered regent honeyeater. They’re medium-sized songbirds—with bright yellow tails and black-and-white chests. And though they once roamed Australia in flocks of hundreds, fewer than 300 remain in the wild today. Crates and his team tracked the birds over a five-year period. If they encountered a male, they’d record his song. [CLIP: Proper song] And they noted whether the males were paired up with females. They found that a quarter of the birds sangvariationsof the traditional honeyeater song. And 12 percent of the birds weren’t singing honeyeater songs at all. They were parroting different species’ songs—like this … [CLIP: Little friarbird] … or this. [CLIP: Little wattlebird] That could mean bad news for the birds’ future—because males singing those untraditional songs were also less likely to be paired up with a mate, compared to their counterparts who sang the standard tune. “As females breed less, then there’s obviously fewer males in that generation to teach the next generation. A higher proportion of males sing weird songs. And you get a bit of a positive feedback toward extinction.” The work appears in the Proceedings of the Royal Society B. [Ross Crates et al., Loss of vocal culture and fitness costs in a critically endangered songbird] Crates says the honeyeaters’ loss of songs equates to a loss of culture. “It’s a complete sort of, you know, animal equivalent of the loss of Indigenous languages, whether that be Native American languages or Aboriginal Australian languages here.” He says he hopes it serves as a warning that all is not well in Australia’s natural world—and that we must do more to tackle climate change and conservation if we hope to save it. honeyeaters an Australasian songbird with a long brushlike tongue for feeding on nectar. jeopardize | BrE ˈdʒɛpədʌɪz, AmE ˈdʒɛpərˌdaɪz | 危及 wēijí ‹safety, future, project› roam | BrE rəʊm, AmE roʊm | «person, group» 漫步 mànbù ; «animal» 游荡 yóudàng ; «gaze» 扫视 sǎoshì ; «thoughts» 徜徉 chángyáng parrot | BrE ˈparət, AmE ˈpɛrət | A.noun ① Zoology 鹦鹉 yīngwǔ ② informal derogatory (person) 学舌者 xuéshézhě B.transitive verbderogatory 机械地重复 jīxiè de chóngfù ‹words, slogan› equivalent | BrE ɪˈkwɪv(ə)l(ə)nt, AmE əˈkwɪv(ə)lənt | 相等物 xiāngděngwù indigenous | BrE ɪnˈdɪdʒɪnəs, AmE ɪnˈdɪdʒənəs | adjective当地的 dāngdì de ‹plant, animal›; 本地的 běndì de ‹culture, language, people›; 土著的 tǔzhù de ‹race, tribe› tackle | BrE ˈtak(ə)l, AmE ˈtæk(ə)l | B.transitive verb ① (handle) 处理 chǔlǐ ‹task, problem, fire›; 应对 yìngduì ‹challenge, difficulty›; 整理 zhěnglǐ ‹garden, painting›; 努力吃下 nǔlì chīxia ‹food, meal› C.intransitive verb(in soccer, hockey) 阻截 zǔjié ; (in rugby, American football) 擒抱 qínbào","permalink":"http://catzillaorz.github.io/2021/06/02/%E8%8B%B1%E8%AF%AD60%E7%A7%92%EF%BC%9AThese-Endangered-Birds-Are-Forgetting-Their-Songs/","photos":[]},{"tags":[{"name":"English","slug":"English","permalink":"http://catzillaorz.github.io/tags/English/"},{"name":"Wechat","slug":"Wechat","permalink":"http://catzillaorz.github.io/tags/Wechat/"}],"title":"英语60秒：The Deepest Dive to Find the Secrets of the Whales","date":"2021/05/31","text":"使命必达英语 Mother humpback whale with her calf in the waters off of Rarotonga in the Cook Islands. Humpbacks in this region spend summers feeding in Antarctica, then migrate to places, such as the Cook Islands, in the South Pacific, where they have their calves and spend time in warm, protected waters. Calves spend approximately one year with their moms, during which time they learn many of the things they will need to survive. Credit: Brian Skerry On Earth Day, Scientific American sits down with National Geographic underwater photographer Brian Skerry to talk about free diving with whales and filming the giant mammals within five meters or less.“We have to get within a few meters of our subject to get good pictures,” Skerry says. “I can’t use a 1,000-millimeter lens underwater. Also, the sun has to be out because I can’t light a whale underwater; they’re too big.” Skerry has been tracking whales, their hidden lives, their feeding rituals(仪式) and hunting practices—strategies that differ dramatically from one whale pod to another—for nearly four decades. Both his new book Secrets of the Whales, released on April 6, and Disney+ series with the same title, a four-episode documentary that is narrated(讲述) by Sigourney Weaver and premieres(首次公演) today, boast jaw-dropping moments.A visual feast of magnificent scenery, the book and streaming series show humpback whales breaching the water surface to catch herring(鲱), orcas(a large toothed whale with distinctive black-and-white markings and a prominent dorsal fin) trailing ancient pathways, narwhals(独角鲸) flicking their giant tusks(獠牙,长牙) to sting their prey and ghost-white beluga whales(a small, white-toothed whale related to the narwhal, living in herds mainly in Arctic coastal waters. Also called white whale.) frolicking in shallow waters with their young—some of them only a few days old and still dragging around their umbilical(脐带的) cord.The footage that Skerry filmed takes the audience on a tour of whale cultures across Antarctica, Norway, New Zealand, the Cook Islands, Alaska and other places. It tells stories of resilience(适应能力 ), familial bonding and intimacy, generational knowledge sharing and deadly encounters—along with rich lives and complex behaviors that are reminiscent(引人联想的) of humans and that were sometimes captured on camera for the first time.“If we look at the ocean, through the lens of culture, these animals are doing so many things in many ways that mirror human culture,” Skerry says.The Disney+ series, however, doesn’t only dwell on the magic and wonder of this world. It also warns against the effects of pollution and the ongoing climate emergency on a very delicate and interconnected marine ecosystem. Secrets of the Whales was a perfect story to showcase both aspects, Skerry says, because it lives at the confluence of cutting-edge science and conservation. “I like to say, ‘It’s not a conservation story,’” he adds. “And yet it could be the most important conservation story ever because if we can see these animals through that lens of culture, it changes how we perceive nature and our relation to it.”","permalink":"http://catzillaorz.github.io/2021/05/31/%E8%8B%B1%E8%AF%AD60%E7%A7%92%EF%BC%9AThe-Deepest-Dive-to-Find-the-Secrets-of-the-Whales/","photos":[]},{"tags":[{"name":"wechat","slug":"wechat","permalink":"http://catzillaorz.github.io/tags/wechat/"},{"name":"English","slug":"English","permalink":"http://catzillaorz.github.io/tags/English/"}],"title":"使命必达学英语——序言","date":"2021/05/31","text":"Duo每天15分钟就可以学一门语言，你刷15分钟社交媒体能学会啥？ –多邻国·Duo 多邻国 Duo是一款学习应用「多邻国」的猫头鹰，每次loading状态都会更换一种口头禅来鼓励语言学习者；通过积分榜，闯关等有趣的元素，为全世界处在疫情封闭期间的语言学习者带来的全新的学习​平台。以每天15分钟就能学习一种语言的理念，吸引了大量用户。 关于学习语言 自学 长期以来，笔者都是自学英语，包括口语，发音，词汇，阅读，英语演讲，写作等，最近又在其他学习群小伙伴的影响下，学习法语等，其他小语种，感觉在语言学习的路上充满了未知和挑战，也收获了快乐，友谊和新技能。同时也认识了越来越多天南地北、散布在各个国家的朋友们。 相信很多读者都是如此，当然有极个别的拥有语言天赋的玩家们以及语言专业的同学们，可能会比常人走的更远。 学习语言收获了什么 收获了成就感：只要坚持下来，每天十几分钟真的能脱胎换骨。很多人可能嗤之以鼻，总觉得他们就是天赋，每次回答此类问题，即便解释一大篇，不如告诉两个“坚持”，更言简意赅，省区不少烦恼。 有趣：看英文视频和文档更快了，使用搜索引擎更得心应手了，打开了不止一扇窗，可能打开了一堆窗。 体验到学习的快乐：从一开始学习的不耐烦，犯困，到后来不学就难受，学半小时就开心的不得了，感觉一天都顺利不少。可能从心理学的方面去解释，类似积极心理学，也是说得通的～ 碎片时间学语言，不是不可能通过不断的尝试，发现很多时候，除了发呆刷各种社交app来打发等车等人的时间，就能学一个课程。 通勤碎片时间场景 等公交车：还有3分钟车才来，不如打开多邻国app刷几个阿拉伯语或者日语，法语什么的打发这漫长的3分钟。 等地铁：这辆车爆满，算了，让我来刷一课法语，等下一辆。 坐在车上：周围的人好吵，都在刷抖音，容我来打开app精进15分钟英语，顺便打一波排行榜。 举例可能过于理想化，每个人的精力管理和情绪管理都各有不同，所以请因地制宜，记住，每当你不知道怎么办的时候，默念：本次的时间管理大师战术策略是”随机应变“ 该休息，休息，该治理治理，尝试变成时间管理大师，未尝不可，切勿，拘泥于传统。 Caaan Do人生如白驹过隙，沧海一粟，不学英语，也可以学学法语，日语，西语，说不定以后出去玩用上了呢～ 不学习语言的时候也可写写代码，学点吉他，游泳，说点土味情话，吃美食，旅游的么～ You：我能学会吗？ Me：Caaan Do！ ps: 力争每天发一篇吧，时间大概在下午6点或者凌晨～后期会改善排版和内容，目前使用markdown。","permalink":"http://catzillaorz.github.io/2021/05/31/%E4%BD%BF%E5%91%BD%E5%BF%85%E8%BE%BE%E5%AD%A6%E8%8B%B1%E8%AF%AD%E2%80%94%E2%80%94%E5%BA%8F%E8%A8%80/","photos":[]},{"tags":[{"name":"loop","slug":"loop","permalink":"http://catzillaorz.github.io/tags/loop/"},{"name":"node","slug":"node","permalink":"http://catzillaorz.github.io/tags/node/"},{"name":"async","slug":"async","permalink":"http://catzillaorz.github.io/tags/async/"}],"title":"Loop in node","date":"2021/05/26","text":"for循环调用耗尽内存 The Story Here’s how it started: two weeks ago I was writing a web scraper for thepiratebay. My idea was simple: I wanted to get a JSON dump of all torrent information available, so that I could later use it for some simple data analysis. After taking a look at the site, I realized that the simplest way to scrape all the existing torrents would be to just loop through all integers, querying each one sequentially – this is because TPB allows you to access torrents via their integer ID (which is always increasing): http://thepiratebay.se/torrent/1 http://thepiratebay.se/torrent/2 http://thepiratebay.se/torrent/3 http://thepiratebay.se/torrent/… The rules are simple: if you get a 404 skip it – if you get a 200, the torrent exists and can be scraped! So, I sat down and wrote a first version that looked something like this: var request = require('request');for (var i = 0; i < 10000000; i++) { request('http://thepiratebay.se/' + i, ...);} This is some pretty basic stuff: Iterate through numbers? CHECK! Make HTTP requests? CHECK! But to my dismay, after running for a few minutes I noticed that this small program was eating all the RAM on my laptop! But why?! I realized that Node.js blocks when running blocking code (eg: a for loop) – but I figured that since I was making async requests from within things would continue to work normally. I was wrong. So, being confused about what was happening, I decided to dig a bit deeper. I narrowed my case down to a simpler test: for (var i = 0; i < 10000000; i++) { console.log('hi:', i);} async.forever(But alas, the same problem. The program simply runs for a few minutes, then crashes as it uses all the RAM on my computer. Bummer. So then I started Googling around to find potential solutions. Surely this must be a common issue? Unfortunately, however, I didn’t see much discussion about this, and all the relevant Stack Overflow threads proposed solutions that didn’t require looping at all (not an option in my case). Next, I turned to async – the really popular flow control library for Node. After looking through the docs, I realized there was something that was seemingly perfect for this! The forever construct! So I then tried the following: var async = require('async');var i = 0;async.forever( function(next) { console.log('hi:', i); i++; next(); }, function(err) { console.log('All done!'); }); setIntervalBut again – the same issue. After a few thousand loops: crash. After writing quite a few different iterations of this simple program, and a significant amount of lost sleep (I can’t really sleep well knowing I don’t understand something – grr) – my coworker Robert proposed a working solution: var Abstraction = function() { this.index = -1;};Abstraction.prototype.getIndex = function getIndex() { this.index++; return this.index;};Abstraction.prototype.isDoneTest = function isDoneTest() { return this.index > 10000000;};var list = new Abstraction();function iterator(){ var i = list.getIndex(); console.log(i); if(list.isDoneTest()){ clearInterval(interval); }}var interval = setInterval(iterator,1); Brilliant! I didn’t even think of setInterval for some reason. Anyhow: after a lot of discussion – we both came to the agreement that using setInterval is essentially the only way to solve this problem. After thinking about this some more, I decided to write a small abstraction layer to handle this – so I created lupus. lupus provides simple (albeit, basic) asynchronous looping for Node.js: var lupus = require('lupus');lupus(0, 10000000, function(n) { console.log(\"We're on:\", n);}, function() { console.log('All done!');}); Whatever you end up writing inside of the loop (blocking or not) – lupus doesn’t care. The MoralPerforming asynchronous for loops in Node.js turned out to be quite a lot harder than I expected. I find it odd that it’s so easy to crash my programs with the simplest of looping examples. Oh well! Live and learn! PS: If you read this far, you might want to follow me on twitter or github and subscribe via RSS or email below (I’ll email you new articles when I publish them). 最受欢迎的方式-async/awaitA Better Way: Async/Await The async/await keywords are a wonderful mechanism for modeling asynchronous control-flow in computer programs. In JavaScript, these keywords are syntactic sugar on top of Promises–they abstract away the calls to Promise.then. In the following code, we refactor the getFishAndChips function to use async/await. // We have to get chips after we get fish...async getFishAndChips() { const fish = await fetch(this.fishApiUrl).then(response => response.json()); this.fish = fish; const fishIds = fish.map(fish => fish.id), chipReqOpts = { method: 'POST', body: JSON.stringify({ fishIds }) }; const chips = await fetch(this.chipsApiUrl, chipReqOpts).then(response => response.json()); this.chips = chips;} read more Naive Approach Your first instinct when using fetch might be to do something like this: // my-component.jsx// We have to get chips after we get fish...getFishAndChips() { fetch(this.fishApiUrl) // Request fish species .then(fishRes => { fishRes.json().then(fish => { this.fish = fish; const fishIds = fish.map(fish => fish.id); fetch( // Request chips using fish ids this.chipsApiUrl, { method: 'POST', body: JSON.stringify({ fishIds }) } ) .then(chipsRes => { chipsRes.json().then(chips => { this.chips = chips; }) }) }) })} In the above code, we are nesting two fetch calls in order to ensure that we request our chips after we request our fish. This is because, in order to request chips, we need to send an array of fish IDs with the POST request. This works, however, there is a big readability problem here. It is possible to reduce the amount of code needed for this feature dramatically. Let’s take a look at Promise chaining!","permalink":"http://catzillaorz.github.io/2021/05/26/Loop-in-node/","photos":[]},{"tags":[{"name":"SSH","slug":"SSH","permalink":"http://catzillaorz.github.io/tags/SSH/"}],"title":"How to Setup SSH for Auto Login","date":"2021/04/01","text":"How to Setup SSH for Auto Login without a Password Used for ssh or scp or anything that needs SSH secure access. Quick reminder If you’ve done it before but forgot, here’s the refresher. (Otherwise, read below.) On server: cd .sshssh-keygen -t rsa (hit return through prompts)cat id_rsa.pub >> authorized_keyschmod 600 authorized_keysrm id_rsa.pub On client: cd .sshscp myserver.com:.ssh/id_rsa myserver.rsachmod 600 myserver.rsaecho \"Host myserver\" >> configecho \"Hostname reblets.com\" >> configecho \"IdentityFile ~/.ssh/myserver.rsa\" >> config Test it: scp file myserver:.ssh myserver Domenation cd ~/.sshlsscp 209.250.243.238:~/.ssh/id_rsa_vultr id_rsa_vultr.rsachmod 600 id_rsa_vultr.rsaecho \"Host 209.250.243.238\" >> config\"HostName 209.250.243.238\" >> configecho \"IdentityFile ~/.ssh/id_rsa_vultr.rsa\" >> configssh 209.250.243.238 Readmoreref","permalink":"http://catzillaorz.github.io/2021/04/01/How-to-Setup-SSH-for-Auto-Login/","photos":[]},{"tags":[{"name":"cheatsheet","slug":"cheatsheet","permalink":"http://catzillaorz.github.io/tags/cheatsheet/"}],"title":"Cheatsheet合集","date":"2021/03/19","text":"cheatsheet速查 A-list Recently used git git log --author=catzillaorz --date=short --pretty=\"format:%ci %s\" --abbrev-commit quick to start","permalink":"http://catzillaorz.github.io/2021/03/19/Cheatsheet%E5%90%88%E9%9B%86/","photos":[]},{"tags":[{"name":"职业规划","slug":"职业规划","permalink":"http://catzillaorz.github.io/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"}],"title":"知群一周体验课程打卡总结","date":"2021/03/03","text":"一周打卡课程总结首先，讲一下上课的心路历程吧。本次能知道和参加这个短期训练营，并不是看广告点进去，也不是看知乎，而是跟国外工作的朋友聊天的时候知道的。一开始，只是聊一些他工作的问题，看能不能借助我的专业只是帮忙解决，再后来就是聊到了职业规划，未来要向什么方向发展，期间的聊天也是断断续续，只言片语，没有什么实质的内容，也没有帮助到别人什么。但是过了几天后，盆友很开心的告诉我他报了班，因为我们之前讨论过的如何确定方向，如何规划，都在课程里有讲到，所以特意让他也推荐我体验一把。 自己的状态目前就是，带有迷茫焦虑，又不知道怎么突破瓶颈，关键是，最致命的还是不知道怎么发现自己的瓶颈到底在哪，就更加慌乱，可能是由于盲目自信，因为工作内容没有挑战，但是想往上发展，又无从下手，找不到问题的症结所在。 也就是在学习了三天后吧，还是班班主动联系我，通过简单的一些提问，并综合这几天所学的可能，瞬间帮我理清思路。 我个人的案例描述： 工作内容重复 没有上升空间 不确定是否要跳槽 不确定跳槽后能否达到预期 不知道如何改进，不明白问题出在哪里（无关自信心） 通过班班帮助，逐步发现问题： 班班看同学的画布中，是比较散乱，有些缺乏逻辑，猜想同学应该是没有构建自己的个人发展成长体系吧~ 同学可以先找准自己的问题根源，班班跟同学一起分析找到方向，那以马力老师在课程中讲到职场曲线图可以看出，同学目前在哪个阶段呢？ 初级执行往初级管理跃迁，但现在处于无法快速成长的状态上 这个也就是形成了老师讲的职业生命周期落后的问题是会叠加的，如果没有及时的改进和解决，就会衍生到无法突破瓶颈的状态中去，慢慢的同学核心竞争力就会失去成长，这个对职业发展比较受限 同学选择换一个好的环境，是外部，但内部自己的能力提升也得跟上，不然就容易从这个坑跳到另一个坑去，同学又会回到原点的状态，形成负循环，这个也是很多同学典型出现的问题。 那班班认为咱应该是明确现在咱清晰自己的能力上有什么，和缺什么，对不对~ 同学可以看一下职业能力模型，蓝色线框的部分是对标阿里 腾讯的能力模型，那如果说同学的目标是作为想要涨薪的的话，同学觉得目前自己的基石能力差距在哪里呢？ 班班分析同学缺，应该是因为不成体系的原因，同学有没有找过一些方法解决问题呢？ 嗯呢，如果说能力的训练可以和上学的时候考试一样，有可量化的方式，那就简单容易多了，我们自己按照好的标准去学习就好了，但是难就难「能力的提升」并不是那么容易量化的，而且也容易走一些弯路 其实班班可以理解的，很多能力同学们都接触过像是沟通能力、逻辑建设能力。但尝试一直以来可能也没有很明显的提升，一定要警惕陷入低效的循环(兜兜转转过了很长时间都无法从圈子里出来)。这个时候找到正确的方法很重要 班班分析同学现在比较困扰的，就是因为基石能力下的结构化思维、逻辑思维和沟通能力的底层能力不足导致，没有办法走出负循环的困境中，就像同学理解的处在落后点状态，是比较严重的 正确的方法其实是利科学的方法加体系化的训练对知识进行有效管理。用一些匹配的案例训练脑子里面收藏的或隐性的知识，按正确的路径做几个显性的输出循环，每一个能力都循环几个这样的路径就会相应地有提升。这个过程中也需要更高阶的一些人做交流和模仿学习一点点升阶 班班认为同学换一个新的公司是很难看到效果，因为别人给到同学的帮助即使足够，但效果看起来会比较少，也很散点，更多想要获得能力的提升，还是需要有更体系化的知识支撑 如果从基础入手，一般看的会专业技能，但如果往上走，越往上爬，对基石能力的要求也就越高，同学是不是会感觉到有些人晋升很难，或者经常转行跳槽，转了之后会发现自己无法适应一个管理岗位，跳槽后发现从这个坑跳到另一个坑里去 这样看同学其实能拥有的比较少，尤其是加入新公司，同学的成长一定不能在现在这样了，要加快并且改变自己，如果持续这样非常容易走向低效的循环中，也是在学习的方法上遇到了问题，学习效率会比较低，如果用2个月时间来系统提升自己底层的基石能力，在成为初级管理者时，搭建个人知识体系会更加如鱼得水 学习收获、未来的展望、对知群小伙伴们想说的话单单是一周的体验课，就已经干货满满，对于一个从来没有认真规划，甚至不知道如何规划的职场人来说，实在是收获颇丰。在我看来，这次体验课也是一场职场洗礼，清楚的认识到自己的不足，也看到了自己与其他人的差距，也意识到如何去改进，如何用正确的方法去改进，甚至做到弯道超车。总的来说，知群真的是行业里的一股清流，不仅改变了底层‘打工人’的认知，也为职场人士提供了再次成长的渠道。 对于未来，希望大家都能更上一层楼，找到自己的不足，弥补不足并不断挑战和超越自己，希望自己在未来两个多月的职场大课，能坚持学习，取得长足进步，未来升职加薪，非常幸运能遇到知群。","permalink":"http://catzillaorz.github.io/2021/03/03/%E7%9F%A5%E7%BE%A4%E7%9F%AD%E6%9C%9F%E4%BD%93%E9%AA%8C%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/","photos":[]},{"tags":[{"name":"职业规划","slug":"职业规划","permalink":"http://catzillaorz.github.io/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"}],"title":"个人规划选择案例解析","date":"2021/03/03","text":"案例分析1.1问题描述： 目前最困惑的问题就是对于自己未来的个人规划的道路选择。 目前大三，985王牌专业信息方向，成绩中等偏上，不好不坏。科研上我也做出了一定的成果，发了一篇顶会论文，具备一定的科研素质。 但由于接触新媒体的缘故，学习到了很多其他的知识，突然觉得对于本专业不那么感兴趣了，目前对于心理学方向更加感兴趣（也了解到了北师的UX专业），目前我有三条路可以选。 （1）保研本校，但是可能要经历三年的不愉快的学习经历，谈不上喜欢也谈不上厌恶。 （2）跨考心理学，目前大三，留给我的时间不算很多了，我也做好了二战的准备，在考研的过程中发展自媒体。 （3）直接找工作或者实习，给自己一年的gap year，了解到自己感兴趣的职位之后，再去选择接着工作或者去考研。 对于这三个方面的问题，我很纠结，希望老师能够给出一些建议。自己来知群的目的呢也是想多了解一些行业信息，如果真的符合我自己的情况，我会毫不犹豫跟着知群学习的~ 解析： hello，很高兴能够帮助到同学。从同学目前的三个选择来看逻辑其实比较乱。同学的问题看似是现在有三个可以选择的比较好的选项。但因为缺少信息难以选择，三选一在纠结。 但其实是没有系统的思维，陷入了思考的死循环。三个方向可以看到是有两个方向一个是本专业信息方向，另一个是UX方向。（2）和（3）是实现UX方向的两种途径。 这块是建议选择感兴趣的方向，工作恰好是感兴趣的事情是绝大多数人梦想的状态。但对同学来说要明确自己是真的感兴趣，并且控制风险。 马力老师课程有讲到过MVP方案。同学目前保研本专业是现状，在这个现状的基础上建议给自己时间去尝试比如去找相关的实习、通过课程学习UX做自己的产出，确定自己是真的感兴趣的。 这样就把感兴趣的方向目前存在的风险降低到可以接受的范围，最糟糕的结果也就是发现自己也没那么喜欢，继续本专业保研就好。但尝试期间一定要全力以赴，半途而废然后用不感兴趣安慰自己的同学也很多。 具体拿到薪资、福利、前景更好的岗位的方法上，目前其实是不建议读研的。像之前有同学读的哥大交互类的研究生，但和拿到岗位差距还是比较大。最后和咱们学习了一段时间（当然离不开自己的努力），拿的滴滴的offer。明确方向之后直接看意向岗位的要求，针对性学习就好。 最后不管同学是选择的哪个方向如果想去大厂的话会特别建议尽可能把自己的基石能力提升上来，从同学提出的问题能明显感觉到这块能力会比较弱（和大厂招人的要求对比看）。 所以目前可以考虑先通过职业课提升自己的基石能力，然后在保证自己保研的前提下对UX方向做尽可能的尝试（条件允许可以两门课一起学，也可以先找一下小公司的实习）。 案例分析1.2问题描述：在努力用优先矩阵的方式做计划，但觉得大部分事情都紧急又重要怎么办呢 首先同学的问题是有关于时间管理典型的问题，如何做好计划高效工作，为什么每次做计划，但总是不能按时完成，并且对事物没有紧急没有概念，也有的同学是不是会猜测是抖音、综艺、微博、微信聊天等娱乐活动分散了我们的注意力，占据了我们的时间，导致进度不断滞后，而目标没有达成，又陷入了自我怀疑和否定的负循环中。 其实本质的原因是缺乏对时间的掌控力，不知道如何利用好时间和规划时间，工作中也常常无法准确预估任务所需时间，以至于每次做的计划都荒废掉，就像是掉入时间黑洞。 像同学这样的情况是比较严重的，浪费了很多时间，导致了工作效率降低，长此以往是会影响同学在职场的情绪、心态和发展，现在同学的状态已经是一个预警了，建议赶紧脱离跳出现在的环境中，用更系统个人发展成长体系完善自己，避免自己陷入“伪完美主义”的怪圈，真正把握住自己最重要的时间资源，让每分每秒都做到物尽其用。 同学的问题不仅仅是一个原因导致的，背后是会包含目标设定，如何确定好一个可量化达成的目标，如何用结构化思维拆解分析问题，如何轻松自如向上沟通交流等这些底层能力影响，真正解决还是要系统提升基石能力。 案例分析1.3问题描述： 老师您好，我学的产品设计专业，目前大四，面临就业择业问题，想要做产品经理这一方向的，外加一些外在原因毕设提前了，该如何协调好？产品经理需要的作品集和产品设计的作品集是否一样？产品经理和本人学的专业的出入大不大？公司的发展对产品经理的发展有密切联系吗？南方和北方差距在哪？入行和进大厂有什么区别？该先入行还是先进厂？谢谢老师 同学第一个问题从那个入手，其实是根据同学最终的意向岗位来确定的。同学如果是想做产品经理的话自然是从产品助理入手。 怎么准备其实和第二个问题是一致的，都是集中在了拿到一份理想的产品工作（比如大厂）需要准备什么，像是比赛奖状证书如果不是直接和产品相关的做用微乎其微，目前真正相关的其实只有知群和各家大厂一起举办的产品设计大赛（本期是和滴滴一起举办，可以看下链接：https://izhiqun.com/web/article/263?type=homeLink） 这一期是和滴滴合作的，上一期和映客合作的大赛有两个团队被映客主动邀约过去面试。至于其他的比赛和项目对比下招聘的岗位需求很容易发现没什么用，不如看一下实习。 第三个问题是建议越早越好，因为一是时间充裕可以不断回顾内容（大部分同学结构化思维比较差，需要重复理解），另一方面公司招人的话其实要的无非是两种：1、做的很熟练的来了就能用就能创造效益 2、基本功没问题（团队协作、为项目负责），有培养价值（学习能力强、结构化思维强），基本专业能力都有掌握。过来开始可能亏一点但之后加倍创造效益。节省出来的时间用来提升对应的基石能力对求职和之后发展性价比很高（可以先考虑提升基石能力，会加深对学习产品的理解和学习效率）。 另外提前学完可以直接找大厂实习。大厂实习经验越多在正式求职的时候优势也越明显（不过要注意的是本质上还是能力的积累，平台大资源多意味着能力提升更快） 案例1.4问题描述： 目前的困惑，结构化思维不够，同时对内对外演讲思维较为混乱，同时没法准备的get别人要表达的内容，也没法很好的把自己的想法传递给别人，没法用最精简的语言表达出自己的意思。 参加了体验课程，里面的课程体系与我目前缺少的正好匹配，但问题是，职业课程体系是否真正的能解决我面临的问题。 若思同学担心的问题其实是现在很普遍的一个担忧，因为现在很多机构的课程内容来源不靠谱、学习方式不靠谱。 知群的职业课程是解析50+高管成长循环，追踪1K+职场人停滞原因，深度剖析路径沉淀出来的八大“元”模块。 这些高管现在也知群做分享，关注知群的同学应该有注意到每期的大会都是各个大厂的总监过来和大家分享。 程学习方式上和职场成长过程也是一致的，在职场是是先看到对的怎么做（第一个障碍，不知道怎么做是对的没人教也意识不到），然后观察学习对的事情的要点（第二个障碍，不知道要点是什么盲目模仿很容易出问题），再自己按照理解实践（第三个障碍，没有适合的应用场景和反馈很难准确实践学到的东西并获得反馈明确哪里能够改进）。 咱们的课程就是和一路或顺利或看课的高管们梳理了成长过程，把对的讲给大家，把要点做成每周的带学和联系巩固。再通过真实职场场景（PBL）大作业实践应用，老师每周都会给大家直播答疑点评实现反馈。 可以说如果这样掰开了一点点学都解决不掉问题，基本上也没有其他的途径了。 同学目前如果确定课程和自己目前缺少的匹配的话建议尽快补充，从同学问题看的话已经对团队协作甚至是工作效率造成比较大的影响了。 不管是继续上升，还是保证当前的正常工作都是需要尽快解决的。 案例1.5问题描述： 老师你好，下文是问题， 背景： 本科和硕士的专业都与UX有一定的关系，毕业后有一些UX相关的工作经验（5年以下），目前在国企工作，非一线城市。 工作现状： 1，岗位不受重视。有些领导不重视用户体验，也不重视技术（各方面的技术）。 2，成长空间有限。升职快的都是核心业务相关专业出身的或负责相关业务推进的。 3，待遇相比大厂没啥竞争力，工作时间倒是会轻松些。 4，酒量很差，也不爱喝。 问题： 纠结要不要去互联网等重视用户体验的公司工作，不知如何取舍。 个人思考： 1.去的话可以从事喜欢的工作，和志同道合的人一起共事，收入也会不错，但可能面临中年失业危机（硕士毕业后工作几年，年龄也不小了，担心在未来，实力能否拼过企业对年龄的看重）。 2.不去的话，可以较为平稳地规避裁员风险，但收入可能跟互联网企业差距越来越大，也担心会不得不放弃喜欢的专业，碌碌无为一辈子。 3.总之有点纠结，不知如何做决定… 解析： 很高兴能够帮助到同学，同学现在的情况比较典型的职场定制化和工具化的状态中，被职场边缘化，遇上了职业发展瓶颈和无法快速成长的阶段，在原来的岗位停留很久，晋升无望，一方面新的业务没有干过，感觉自己什么都不会，另一方面，新部门有好多20多岁的年轻人，和他们拼能力，拼体力都不占优势，陷入了中年危机，整体忧心忡忡，总觉得自己在离失业不远了。 第一：关于转行的问题，互联公司这种情况是会有极大的改善的，互联网企业更偏向于做产品前评估好核心确保核心内容的实现。会做完依然有很大的提升空间，但是提前计划好的。实践机会方面，TOP班每部分都是会有搭配作业让大家实际的进行产出。然后老师（十年以上互联网名企工作经历）进行直播答疑，不断修正。这是在工作中很难获得的另一方面配套实战课部分是和滴滴合作的真实项目，会给大家真实完成大厂项目的机会。第二：中年危机其实并不可怕，回首望去，有些人即使超过35岁仍然可以有很多选择，不受年龄的影响是怎么回事呢？这就是因为具备了可迁移的基石能力，就是一旦你升到管理者，那么你的竞争力就不再是具体的专业技术，而是个人的能力和资源，这些东西才是可以随着你的职位、职业、行业而迁移的。也正是这些不会随着时间变化、不会随着行业变换而失效的能力，才能帮助你打造最强的竞争护城河。同学目前的问题就是没有储备自己的基石能力，这也是大多数同学都没有注意和提升的方向，久而久之才发现自己的问题，这个时候已经很严重了，同学的选择不应该随波逐流的寻找答案，而是要提升自己的认知能力，在观察自己个人定位和优势上匹配适合的职业方向，自我认知是非常重要的。个人发展成长体系模型包含了认知能力、逻辑能力、表达能力、规划能力等等基石能力的集合，我们做任何一件事都需要基石能力的支撑，比如你首先你得有思路，不管你是写策划案、还是卖产品、还是做分析报告、还是文案转化，都需要有个思路，这时候需要的是思维能力。光有思路还不行，你得能够落地执行，这就考验你是否具备与效率和执行相关的能力，有了思维、执行、想要确保事情成功， 你还要能搞来资源，因此你得跟人合作，和别人沟通，说服对方帮助你，这其中又在考验你的人际和沟通能力。 所以我才说，做任何一件事情，都需要基石能力，同学现在要做的是开始提升个人发展成长体系，把错过的基石能力用2个月时间高效提升，加快成长效率。感谢大家提出的问题，我这边已经回答完了，还有同学有疑问的可以联系班班提交，班班会跟大家沟通交流的，谢谢大家￼￼","permalink":"http://catzillaorz.github.io/2021/03/03/%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92%E9%80%89%E6%8B%A9%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90/","photos":[]},{"tags":[{"name":"职场规划","slug":"职场规划","permalink":"http://catzillaorz.github.io/tags/%E8%81%8C%E5%9C%BA%E8%A7%84%E5%88%92/"}],"title":"知识与能力如何区分，如何做到内化成自我能力","date":"2021/03/03","text":"知识与能力如何区分 司机在突发情况表现得很机敏，但我们切换视角来看，普朗克和司机代表是的能力和知识：前者将知识内化为“能力”，后者只是一个“知识模仿者”，而我们绝大多数人关注的都是错误的那类，就像是司机 司机所做的事很简单，他并不了解量子力学，他只是在背一段话，无论这个演讲所描述的物理还是化学，人文还是占卜，他都能背下来。他的知识，就像是一个人人都可以拼出的木头人，很原始，就像是“工具人”，被定制化了，吸收的知识是属于惰性知识。 为什么会陷入“惰性知识”的陷阱 很多同学会好奇，什么是惰性知识呢？ 惰性知识就是保存在大脑中，起不到解决问题的作用，无法被利用上的知识，长期积累下去会造成信息大爆炸，就是Day2课程中老师说的熵增状态。 上面的故事中，“司机的知识”就是惰性知识，是他被知识操控，就是，他能认识每一个字，并且能讲出来，但是他不懂。当别人提出质疑的问题时，司机无法回答 由此可以看出司机只有一角，而普朗克知道整个冰山，甚至知道冰山还会变化和移动，而且时刻关注冰山的变化，和冰山所处的环境，甚至还有隔壁冰山的动态，这就是知识与能力的区别，普朗克是智慧和能力的结合，是对知识的处理和运用。 如果你在生活中，只是知道了一个知识，却不会想如何运用它？它可以解决什么问题？没有做到联想因果关系，那在实际的工作中和生活中，这个知识，你就用不上它，本质问题是没有内化成自己的思维，形成能力，这样的知识是大脑的负担。 大家肯定会想了解，如何避免自己陷入惰性知识的“怪圈”呢 二八定律：掌握一个领域20%的核心知识是可以解决这个领域80%的问题。 大家肯定会不相信，为什么一个领域20%的核心知识是可以解决这个领域80%的问题？ 就是在课程中老师说的，28法则定律，在20%的知识是能够帮助我们解决一些80%这样问题的，当想要学什么样的知识或技能的时候，如果对于这个知识只是处于知道的状态，没有内化到自己的思维体系，形成能力，这样的行为就是错误的。 给未来无限可能的自己一个答案 互联网时代下信息获取非常散且乱，但通过时间碎片化获取知识，人们没有时间去系统性的了解某一项知识，只能利用碎片时间去了解某个特定的知识，以效率最高的方式获取最有价值的信息。但这个自学和信息获取的过程，试错的成本是比较高的。 那可以如何找到快速成长路径呢？ 如果在这信息冗余的互联环境中，我们给自己织一张信息过滤网，节约时间成本，为自己投资，成长效率会达到2倍速提高。 我们需要成为一个聪明的学习者，因为在职场上，你的市场价值=专业知识能力×基石能力×基石能力×个人特质×圈子，企业花钱购买的是你的时间，很多人工作的时间比睡觉的时间更长，与家人在一起的时长也比不上工作的时长，一辈子在工作上耗费将近10万小时，但他依然没有选择权。 大家知道原因是什么吗？ 这是因为已经被工具化或定制化了，工作几年后达到了能力天花板，每天工作疲倦只是为了应付，不知道如何做时间管理、项目管理、协调沟通等，也没有人教，现在的工作离了自己也可以，换谁都一样。所以企业里的晋升机制也受此限制，想要购买更昂贵员工的服务 肯定是少数的。升职不像升学，升学是大部分都可以升；职场晋升是少部分可以升，企业只会为晋升的人付出更多的薪资+资源。 方法论 而知群进阶「职业大课」中培养的基石能力，这些能力是学校里没有专门教，而大多数企业也都不教。因为企业需要员工尽快产生价值，更希望立刻明确的可量化产出，而不希望花钱培养员工。企业是在购买员工的服务与时间。 而我们要花钱去买别人的时间，千万不要轻易把自己宝贵的时间卖掉，因为我们花钱获得从某种意义上就是加快了我们的成长效率。 比如【知群职业大课进阶课程】（培养 Top10% 的职场人），经教研组1年时间打磨和迭代对标大厂能力要求，推出的个人发展成长体系培养计划，会用2个月帮助你构建「复利型成长体系」，并且给你正确的方法和路径，避免「随波逐流被动接受」，避免「定制化」，避免「工具人」，帮你训练内化成自己的能力，赋能你的个人发展。 自学成长效率低 大家是不是会在思考，如果自学呢？ 职业大课」一共分成8个板块，每个板块的内容都是知群教研组利用互联网「精益」+「革新」的思维模型和体系，帮助大家构建个人发展成长体系。 这些思维模型和方法论都是站在巨人的肩膀上总结出来的，互联网的快速发展就也是得益于“革新+精炼+融入了新的思想”，把古老的人才培养和替升的方法做了深化和优化。 互联网依然是社会上前沿的领域，具备人才集聚的效应。所以我们深信运用好互联网的方法体系，就是在运用社会最顶尖的那部分人才来孵化“未来人才”。 那如果想要自学，你需要花费大量的时间去寻找结构化思维方法论与模型，搜集如何把知识内化能力的方法，假设一天利用2个小时搜集整理，一周就需要花费14个小时，加上试错，找不对路，或者沉默试错成本，你可能还需要花费40-50个小时在搜集整理上，但这还不是内化能力的部分，这只是开始。 接下来要到刻意练习+知识输出，这是考察你是否真正吸收内化成自己东西的关键因素，你要先阅读，总结知识，提炼逻辑与方法、应用、试错、遇到困惑的知识，又要重蹈覆辙的上网寻找，本以为花费27小时就可以搞定的事情，通过自学，你需要花费3-4倍的时间，远比付出的金钱成本要高很多。 行动起来 况且，相信对于大多数人在学习中，并没有很强的毅力去啃书、找资料，因为重复性的工作会消磨人的意志力，时间大多数都浪费在刷微博、刷抖音、追剧和淘宝上，创造价值非常低。 如果你想要通过免费的道路打造个人可迁移能力，需要极大的意志力，付出大量的时间和极高的试错成本，并且在互联网信息杂乱的碎片化背景下，免费的质量会越来越差。 这样的背景下，需要的是求之不得一线互联网大厂 BAT 的体系，是构建自己的逻辑技能树，实现「系统地」「精准地」成长。然后针对性地突破并提升所需要的能力，进行全方位的提升。这在个人发展上的效率是完全不同的！ 需要的还有学习中的反复训练和高手指导。用真实职场场景项目深化学习并且要做真实的汇报训练，由一线高手亲自指导，帮你融会贯通 需要找一个良好的环境，好的环境不能决定一切，但能事半功倍！ 在知群，你的同行者和指导者都需要是非常优秀且还很努力的一群人，他们最好来自国内顶级高校或者国内TOP级公司，帮助你打破了社交圈层，来连接自己本来接触不到的，学校给不了的。这样的环境中同学之间互相碰撞交流，互相学习别人身上的长处，赋能自己的增长，给你在职业上更多的可能和选择 听上去很难达到，但进入一线大厂可以，有一个超NICE的大牛领路也可以，与知群相遇也可以，这五天就是一个尝试，就是新开始的起点，大家可以对比5天前的你，和在训练营学习后的你的差别 怎么做到更好地提升个人商业价值，成为拥有主动权和掌控权的可迁移人才，是现在的首要任务，希望我们班的小伙伴不要轻易给自己设限，不仅要着眼当下，更要放眼远方！ 你现在要做的是成长，更高效的成长，更有价值的成长，用8周时间，打破波士顿曲线，领跑同龄人，弯道超车！","permalink":"http://catzillaorz.github.io/2021/03/03/%E7%9F%A5%E8%AF%86%E4%B8%8E%E8%83%BD%E5%8A%9B%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%EF%BC%8C%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%86%85%E5%8C%96%E6%88%90%E8%87%AA%E6%88%91%E8%83%BD%E5%8A%9B/","photos":[]},{"tags":[{"name":"职场规划","slug":"职场规划","permalink":"http://catzillaorz.github.io/tags/%E8%81%8C%E5%9C%BA%E8%A7%84%E5%88%92/"}],"title":"用对方法也许真的事半功倍","date":"2021/03/03","text":"心路历程 从外在标签来看，我是一个211大学很好专业的大学生，我自己都不太相信找到适合自己的工作会需要一年时间。这段时间概括起来就是： 「否定自己➡尝试定方向➡努力失败➡尝试以自己的优势定方向➡判断适合的公司➡真正开始赚钱养活自己」 所以其实回头去看，我的成长从毕业开始就真正的失控了，当然啦，那时候我并不知道。但真的很焦虑，每件事情都不是按照预期发展的。 但在工作这两年，我发现失控的原因是：我并不知道什么是「以结果为导向」和「MVP试错与验证」。已经工作的同学可能知道这两点，因为领导天天都会讲。但不知道大家是如何理解并实践的？ 「以结果为导向」要先把结果（目标）结构化的拆解，并且利用MECE原则进行穷尽列举。下一步最重要的就是把控过程中的节点，让每个节点可以以正确的方法实现出来，为结果服务。所以「以结果为导向」是很复杂且高阶的能力——是结构化思维，逻辑建设能力、学习效率等等一系列底层能力的叠加出的复合能力。 像找工作、换工作、创业、个人进阶，这些事的规划其实就是在考察「以结果为导向」的能力，需要大家自己来倒推可以实现结果（目标）的路径，以及列出路径上需要的方法和能力。 对我个人来说，大概用了两年时间去获得了「以结果为导向」的能力，且处于初级阶段。整个找工作的经历基本可以用两个字概括：反复。不断地走进岔路，不愿意承认失败又硬着头皮不断往下走，直到撞了南墙头破血流才另寻它路。参与群里分享的同学应该有知道这个概念，沉没成本。当时真的是一直在持续的付出沉没成本，时间、金钱、精力等等等等。 但是大家现在就已经知道了，如果把商业画布上的能力都画出来并且找到渠道去学习+锻炼，应该会比我快很多很多。 找到属于自己的人生导师 不过「找工作、换工作、创业、个人进阶」这些阶段，每个人都会遇到相似的问题：不清楚自我定位，没有成长的方法和路径，兜兜转转发现自己已经落后很远。 我的第一份工作可以说来之不易，在失控中总算找到了自己的落脚点。在蛮符合自己专业的传统行业拿到了薪资，总算开始了自己养活自己。 但生活总是让人崩溃，整整一年的境遇就是： 1、一直加班没有有效产出。领导不干活也不会指导，就压榨底层员工。 越干越烦，感觉工作没有价值。 无数次想放弃，但咬牙硬撑。 大家有遇到过这种问题嘛？ 是的，我也是就这么硬撑了一年，忽然有一天感觉自己不能再这么下去了。 拿出了一年前的规划，重新对自己的优势进行了判定。并且大量查阅、咨询了各个行业，为跳槽做准备。 可能是失败的太多，这次比较熟练。 自己也比较清晰自己想要什么「以结果为导向」 两个月给自己找到了明确方向 这次，我觉得自己还是很幸运的，为啥子？因为碰到了一个好的老板和leader，也很幸运，他们都愿意教我。而且老板（马力）也成为了我人生第二位导师（第一位是我妈妈）。每每遇到别人吐槽他们的领导不干活也不会指导，就压榨底层员工，我都会更珍惜现在的机会。 不过马力老师时间很有限，给到我的输入虽然很精华，但都是碎片化的，我需要自己去整理和吸收练习。直到前一阵知群出了职业大课，才真正的了解了整个IDGS——对个人发展影响深远的成长体系。 其实这样的课程出现的原因很简单： 大部分人都缺失系统化的个人发展教育 大部分老板和leader都不会去教去培养 机会的平等，建立在「思维高度」平等的基础上 社会发展迅速，阶层会越来越固化 每一个人努力在成长，其实不仅仅是希望在职场上跃迁，希望的是在社会阶层上的跃迁，就算不跃迁，也不希望被快速的发展落在后面。 所以清楚自己的【个人发展成长体系】，且找到愿意帮助自己的人生导师，是一把钥匙，帮助你通往下个的阶梯钥匙。（其实“导师”不一定是人，可以是像知群这样的系统课程+正向反馈氛围，也可以是自己打造正确的学习路径） 保持空杯心态 还记得马力老师在《如何将知识内化为基石能力》的直播中给大家讲的知识点，给自己留些进步的空间，如果什么时间觉得自己满了，那一定要警惕咯。这个图，分享给大家，共勉。 选择正确的成长路径=相比同龄人的3倍成长 还想分享的一点是：职场不相信苦劳，个人的成长也是。当然啦，事情一定要努力、认真去做，但是无策略的去付出苦力劳动力，这并不是你的价值所在。 如果说我是公司这三年里，累计加班时长最多的人（除老板外），可能并不夸张。当然啦老板也很认可我的努力，薪资和优质资源，都会一定程度倾斜给我。 但我并不能很满足，为啥？因为我有个leader，薪资更高，话语权更大，选择权更多，但她工作的很轻松！！！我其实想了很久，我们之间的差距是什么？她虽然也是努力的，但却「努力的很有效」。因为她拼的不是经验，不是工作时间，而是「思维高度」。这是我观察了很久得到的答案。 但如果要缩小这个差距甚至弯道超车，是需要很难且很长时间？因为思维是很难照猫画虎学来的，如果说学习数学公式且应用是三级难度，学思维且应用大概要十级难度。 因为，思维需要通过充分的「理解」，并且通过一些正确方法的「实践」形成「能力」才能掌握。 我先举个例子，正确的成长路径是什么 以宋杨老师在课程中讲的波士顿曲线为标准： 先搭建思维框架，并理解框架之中需要补足什么能力，且会影响到自己哪方面的发展 首先：学习可以掌握这些「能力」的知识，然后不断去思考下：实际的生活场景中有什么是可以被这个知识/思维解释的？有什么场景是可以用到这个知识/思维的？别人在什么场景下会运用？ 其次：选择正确的方法，进行有效的「实践」。我们经常会做很多事情，过程中会遇到很多困难，然后不断调整方向，尝试正确的方法。但其实会有很多经验和体系，可以提前规避这些弯路，大家可以提前就知道为什么要选择这个方法，以及利用什么相关练习进行实践。 最后：借助正确的工具，可以帮我们展现「能力」。能力和思维都是很虚无缥缈的东西，体现在生活和工作方方面面。所以我们需要借助一些工具来让它能够被“看见”。其实就是把思维方式和能力可视化出来。通过这个总结，形成自己的工具，我们就可以反过来，不断地提醒自己，一步步地把自己的能力框架填满。最终，就可以把思维方式内化成自己的了。 相信相信的力量 最后，不要担心这个过程中会有失败，不被虐不吃苦才需要警惕，因为这样就不会提升。 也一定要相信相信的力量，心理学上一个有趣的现象：罗森塔尔效应，其实体现的就是暗示的力量，就是一个人若相信自己，不停的暗示自己能成功，提高对自己的要求，那其成功的可能性会变得非常大。 所以一定要相信自己，要自信，你只需要判断学习到的内容优劣，采用方法的正确与否，只选择好的方法和体系，不断去努力练习，一定就会有好的结果。 希望大家能在我的经历中得到一些收获，少走些弯路。我相信现在做的思考、学习、规划，投入的时间、金钱、精力，都是对自己将来要走的弯路的规避！ 看完小姐姐的经验分享，结合我自己的想法总结了一下 【职业发展的三个阶段】 阶段一：自我认知和职业探索 ①自我认知：人贵自知，知道自己是什么样的人，需要大量的思考和探索，可以回顾下自己的成长历程，喜欢什么，不喜欢什么，对什么事有成就感，又对什么感到抵触，并且结合测评工具，对自己有个基本的认知。 ②职业探索：很多人并不知道自己的优劣势是什么？能做什么？什么行业和职位适合自己？未来职业发展前景如何？从而十分迷茫，这个阶段也是需要大量探索的。推荐去学信网的学职平台看看，里面有各个行业，职业的微视频，讲解不同职位在做什么，要求是什么，工作环境等。 阶段二：目标确立与路径规划 ①目标确立：比如我明确想从开发转产品，就需要开始对目标进行拆解，对关键时间点进行安排，比如3-6月，6-9月，1-3年，3-5年要完成什么目标。 ②路径规划：根据目标，对照着面经，产品职责和技能要求等，进行路径规划、能力补齐，并反复迭代。 阶段三：能力提升和试错调整 ①可迁移通用技能的提升：思维认识、组织协调、学习总结、规划管理等、这些是你的基石能力，决定职业发展的天花板。 ②专业能力的提升：你的专业能力就是你职业不可替代性的护城河。 在职业成长的过程中，需要通过看书、听课、思考总结等方式，不断提升通用技能和专业技能","permalink":"http://catzillaorz.github.io/2021/03/03/%E7%94%A8%E5%AF%B9%E6%96%B9%E6%B3%95%E4%B9%9F%E8%AE%B8%E7%9C%9F%E7%9A%84%E4%BA%8B%E5%8D%8A%E5%8A%9F%E5%80%8D/","photos":[]},{"tags":[{"name":"职场规划","slug":"职场规划","permalink":"http://catzillaorz.github.io/tags/%E8%81%8C%E5%9C%BA%E8%A7%84%E5%88%92/"}],"title":"个人商业画布","date":"2021/03/03","text":"个人商业画布 个人商业画布是怎么来的以及可以做什么？ 个人商业画布中「我拥有什么」知识、技能、能力分别是什么？ 个人商业画布是怎么来的以及可以做什么 第一，它是从企业商业模式中演变而来，因此，借助它，有利于我们拔高思维高度，去思考策略层面的事情，而不是长久陷在执行层，拘泥于“我到底选哪份工作”、“我能涨多少工资”。 当然，不是说这些不重要，只是我们太久困于这些问题，需要偶尔从这些问题中抽离出来，看得更高更远一些。而个人商业画布就是从企业商业画布演变而来，不仅可以应用到企业，更可以应用到我们个人，它可以上升一个思维高度，思考策略层面的事情，让我们不再纠结于眼下的薪资待遇、我究竟选择哪个公司….让我们更好的规划未来的职业方向，诊断目前的职业状态明确自己的短板和优势。 第二，这个画布不仅仅是规划工具，用来想想你将来是什么样子。还可以作为诊断工具来使用，可以诊断你当前的职业状态，来明确有哪些“盲点”可以补充起来，从而为后期的规划奠定基础。 很多人在面临职业困境时，都只是在困扰，但从未思考，而这个工具能够帮助你真正思考。 因为时间限制荔枝会结合大家的重灾区问题着重为大家讲讲“我拥有什么”怎么写。 个人商业画布中「我拥有什么」应该是啥 我拥有什么，主要包括兴趣、知识、技能、能力。 总之，在核心资源这个框内，要尽可能把你有的要素都列出来。这些要素必须能够描述你这个人，能够把你与他人区分开来。 在总结自身资源的时候，你会发现性格与价值观属于内心最深层的一面，它们是需要你不断自我反思，甚至是在发生一些冲突的时候，你才真正体会到。但对于兴趣、知识、技能、能力这些，我们在盘点它们的时候，其实是有一定技巧的。 像是兴趣，很多同学说喜欢吃、喝、玩，其实荔枝也喜欢，但是仍然还要再强调一下：享受不是兴趣！愿意付出才是兴趣！兴趣跟擅长有关！不过如果实在找不到兴趣点，就先做好眼前的事！ 那知识是什么？ 我们来玩一个互动小游戏，假设让你「把一头大象放入冰箱」，你会怎么做呢？把大象放进冰箱分为三步： 打开冰箱 放入大象 关上冰箱 是的，回答的没错，就是以上三步 可以套用上学习也是同个逻辑，我们把过程简化为三步： ①打开大脑 ②放入知识 ③提取使用 大家在写个人商业画布中的“我拥有什么”这个空格里的知识是什么呢？ 所以可以看得出来，知识很容易盘点，我们在学习和实践中获得的认知和经验，比如运营知识、产品经理知识等等，包括我们现在学习的个人商业画布，都属于知识 技能上你要盘点的是：你会什么本领、掌握多少语言、能用什么工具……不仅包括工作中的，也包括你擅长的业余爱好。为什么要包括业余爱好呢？因为有时候业余爱好跟本职工作结合起来，可能会帮助你发现一些跨领域的新机会。 能力则区别于主要适用某个领域的技能（比如编程），能力更多是指通用能力（比如沟通），盘点能力的方法跟兴趣类似。关于能力的总结，也可以用他人反馈，因为有时候你觉得自己某些能力很强，但别人未必这么认为，所以可以寻求身边同事和朋友的反馈。也可以在网上搜索能力词典，找到能力的清单。你可以从中挑选出自认为不错的能力项，并让身边同事朋友也帮你挑选，对比分析之后，发现你的能力优劣势。 但今天和同学们聊了很多，发现大家在画布里“我拥有什么”格子里会写的满满当当,但依然迷茫着、无力着，以下问题： 正在找工作，感觉有点难，也非常迷茫，不知道自己适合什么岗位，如何更好的精进自己的综合能力，个人核心竞争力是什么？稀里糊涂就随便进了一家公司，没有目标和方向 工作几年后，职业瓶颈，达到能力天花板，纠结转行还是换公司，每天忙于疲惫，但又重复做着相同的事情，不会团队协作，缺失对上对下管理能力 所学的学习能力和技能是适用于一家公司，跳不出圈子，年纪不如年轻人，想换个环境都不知道自己可以干什么 我想给大家讲一个之前同事琳琳的故事，来帮助大家拆解问题【为什么学习了知识，不能很好地应用出来？】 ①可能陷入了“知识收藏家”的陷阱 ②可能知识与问题完全脱节，分别储存，导致没有办法快速调取知识处理问题 所以，你会发现，单纯的知识储备，如果不能结合思维能力去解决一些具体问题，将很难提升你的市场价值的。但是积累了大量知识，是否有帮助你解决问题，得到自己想要的呢？如果没有的话，一定要重视起来啦！ 这可能是由于花了大量碎片化时间，累积了信息与知识，但没有进行总结与训练内化，只是把信息堆在脑子里面，在数据库里堆积了很多东西，等你想要用某个知识解决问题时，你需要花大量时间搜索和考虑如何做，导致在时间紧迫的情况下，根本无法应用上。 而导致这样现象最重要原因是：缺失了思维能力——结构化思维的整理，将知识、思维内化成能力。 能力，或叫基石能力，比如学习和思考能力、人际交往能力等。相对知识和技能来说，能力高低并不是一眼就能看出来的。一个人的创新能力到底如何，很难用一个证书、几道题目来考察。 conclusion 举个例子，评价一个人智慧高低的标准也不是看他的知识拥有量，而要看他的思维能力如何，所以知识跟思维，是有差别的。思维是一种能力，是一种用知识解释以及解决问题的能力。体现在他处理问题的行为上。 最后，能力跟知识技能最大的区别在于：知识和技能属于特定领域，而能力则更多是通用领域的。比如，知识会分财务、人力资源、金融等等，但是“创新”这样的能力，是适用于任何领域的，一旦掌握，是能够迁移的。 那么，如果能力不匹配，在工作中会如何呢？工作效率、沟通效率较低，面对复杂的问题无从下手，缺乏成就感，力不从心。 相信小伙伴们一定是具有一定冰山模型下的基石能力的，只不过平常没有重视起来，导致现在断层了，只要在知群学习，通过正确地方法与路径，可以避免成长的路上少走弯路，实现弯道超车的 希望大家可以再思考下，自己拥有哪些能力？又应该增长哪些能力呢？","permalink":"http://catzillaorz.github.io/2021/03/03/%E4%B8%AA%E4%BA%BA%E5%95%86%E4%B8%9A%E7%94%BB%E5%B8%83/","photos":[]},{"tags":[{"name":"职场规划","slug":"职场规划","permalink":"http://catzillaorz.github.io/tags/%E8%81%8C%E5%9C%BA%E8%A7%84%E5%88%92/"}],"title":"如何构建个人成长发展体系","date":"2021/03/03","text":"案例分析-如何定位 那就有很多同学跟班班说，自己目前是想要一份比现在薪水好一点的工作，想要跳槽进大厂，想转行但不知道往哪里转，对职业很迷茫，又不知道做什么那班班想说，其实恐惧未知的世界是职场人的常态，这些问题其实大部分都是没有自己的明确目标所导致的 那群内大部分同学暂时找不到目标或者已经有了目标，但缺乏通往目标的”提升路径”怎么办? 接下来，班班来结合一位知群学员的经历，一起来帮助大家找到自己的提升路径～ 这是班班带过的一个真实学员，他是一名华为的员工，刚开始找到我时非常焦虑，快要35岁的时候没有工作了，发现自己找不到合适的工作了，一边还有房贷要还，压力很大。大橘同学当时有2个想法，如果是你，你会选择哪个呢？ 1.选择跳槽，去同行业的其它公司 2.选择转行，去到一个新兴的行业 冰山模型 第一步，先确定一个你要分析的岗位。 比如你有意向目标岗位，可以采用冰山模型分析自己匹配程度，如果是转行，0经验，可以从已有的相关经验出发，框住能做的几个岗位，一个个分析。 第二步，上招聘网站，搜索这个岗位的招聘要求。 比如登录知群内推系统或Boss直聘，你会搜到很多公司对这个岗位的招聘要求，找出几份不同的招聘需求。因为不同公司会有自己的细分要求，为了提取出共性要求，你可以尽可能多看几份，找到共性。 第三步，按照冰山模型，综合分析这些招聘需求。 分析 可以发现，招聘需求基本.上也是按照冰山模型来写的，以产品经理岗位来说，有对专业知识技能的要求，比如掌握产品知识体系、了解用户以及数据的知识、熟悉各大平台运作；也有对能力的要求，比如结构化思维能力、沟通表达能力、数据分析能力等等；最后，还有对个性特质、动机、价值观等等的要求，比如抗压能力等等。把它们汇总在一起，就可以得到这份岗位的需求模型了。 第四步，按照岗位需求模型，与自己进行对比。 岗位需求模型已经出来了，那么自己就可以对照一下，自己到底是不是符合，是否应该换工作或转行。当然，我们很难找到完全匹配的工作，如果是冰山底层的因素不匹配，那么不太建议选择这个职业，因为这些要素后天很难改变；但如果是知识、技能方面不匹配，未必不能选，因为大部分知识和技能都是可以后天学习的，只是看你是不愿意投入时间罢了。 conclusion 你可以发现，各个职业的招聘岗位要求中，越往上走，越能体现你的价值，给你开高工资的要素，是基石能力，也就是平时所说的“职场核心竞争力”，而不是具体的某个知识和技能 类似于沟通能力，规划能力、组织能力、认知能力，表达能力，思维（逻辑化思维,结构化思维等），解决问题。这些就属于基石能力的范畴，那将基石能力抽取出来，成为个人发展成长体系IDGS底层能力的集合，是你去任何行业都可以迁移过去的能力。 个人发展成长体系IDGS 那么工作3-5年，到了需要带一个小团队的阶段，需要具备解决复杂问题和创新的思维能力、辅导和激励下属让团队提升效率的能力、在公开场合演讲表达能力、处理复杂人际冲突的沟通能力。 more 最后如果是工作5年或更久，要带整个部门的时候需要具备的能力包括： 💦在思维方面，掌握认知能力以及理性的逻辑能力； 💦在效率方面，需要掌握一些项目管理和团队协作沟通的知识，更好地配置资源； 💦同时，需要掌握规划能力和学习能力，贯穿在工作全流程中； 💦最后，在人际方面，掌握组织能力和协作能力，需要全面的领导力。 tech 就像有同学讨论技术的职业发展，其实技术的天花板很明显，但如果这个技术，懂得沟通协调，懂得更多业务，懂得如何去激发团队的工作热情，是不是更可能走得远呢？ 是的，咱们重新来梳理一下，通过案例我们清楚的知道： 💎第一，大家要有自己的一个“提升方向/进阶路径”,这首需要先建立自己的目标 那不管有没有目标，为了避免成为 “企业定制化人才”，都要提升可迁移的基石能力。技能只能用在某一个地方，挪到别处去根本用不上。 而找到自己的目标可以借助工具，比如今晚Day2课程讲到的《个人商业画布》，也需要多提升或者利用人脉来跳出自己当前的认知圈，利用扩大接触面来找到自己想要做的，找到自己的目标。 💎第二，迷茫，不满意当前工作，找不到方向 其实，大部分人想转行是因为当前工作没有做到很好，薪酬和需求得不到满足，本质上还是能力问题。 因为我们改变不了外在因素，只能提升自己的能力适应外在。 那想要去做提升必须现有提升方向，然后在针对性的做提升，否则有可能方向错误不说，还白白损失掉了时间和机会。 💎第三，能力分基层能力和高阶能力，具备相互衔接关系。 这次的分享是给大家提供了一些可以衡量自己的市场价值以及预估自己未来薪水的思路，对于职业和自己的目标都有了更多的思考，希望对有正在找工作、想要晋升、转行，跳槽类似打算的同学，能够有帮助！","permalink":"http://catzillaorz.github.io/2021/03/03/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E5%8F%91%E5%B1%95%E4%BD%93%E7%B3%BB/","photos":[]},{"tags":[{"name":"熵增","slug":"熵增","permalink":"http://catzillaorz.github.io/tags/%E7%86%B5%E5%A2%9E/"}],"title":"熵增定律","date":"2021/03/01","text":"熵增定律 如果物理学只能留一条定律，我会留熵增定律 吴军老师给出的答案是三个公式： 爱丁顿爵士也曾说：“我认为，熵增原则是自然界所有定律中至高无上的。如果有人指出你的宇宙理论与麦克斯韦方程不符，那么麦克斯韦方程可能有不对；如果你的宇宙理论与观测相矛盾，嗯，观测的人有时也会把事情搞错；但是如果你的理论违背了热力学第二定律，我就敢说你没有指望了，你的理论只有丢尽脸、垮台。 宇宙未来 生命与群体：比如大公司的组织架构会变得臃肿，员工会变得官僚化，整体效率和创新能力也会下降；封闭的国家会被世界淘汰。 什么是熵增定律 定义：在一个孤立系统里，如果没有外力做功，其总混乱度（熵）会不断增大。 这里面有三个词非常重要：孤立系统、无外力做功、总混乱度（熵）。 首先我们来解释什么是熵。 熵（Entropy），最早在1865年由德国物理学家克劳修斯提出，用以度量一个系统“内在的混乱程度”。 你可以理解为，系统中的无效能量。 任何一个系统，只要满足封闭系统，而且无外力维持，它就会趋于混乱和无序。 如何对抗熵增，实现超越 也许我们可以从生命里得到启示，整个生命的发展就是一部负熵的历史。 即生命的熵减过程，会加剧环境的熵增，于是环境会变得越来越恶劣，生命为了生存，为了获得足够的能量和物质，必须变得更加智能…… 企业 主动做功 开放系统 你可以理解为，系统把无用的熵排出去，然后吸收新的可用物质、能量和信息。 注：熵有三种，物质熵、能量熵、信息熵，在相对论里物质和能量是一回事，但是为了理解，这里我们把它分开。 比如你每天的新陈代谢，比如你通过锻炼减去一身的赘肉，比如你看一本好书。 个人也许你会觉得自己还达不到在企业里运用熵增定律的高度，没关系，熵增定律也同样适用于你个人的发展。 比如工作、生活、学习、心情、成长、人际关系等等都与此相关。 这种状态就是生活陷入了极度的熵增状态，被无数的混乱的事情牵着走，丧失了生活的掌控权。 主动做功 痛苦着痛苦着，突然「熵增定律」闯进了我的脑海，让知识变得有序的过程不正是熵减的过程吗？ 开放系统 答案是降低信息熵。 我这辈子遇到的聪明人，没有不每天阅读的，没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。 智能充当的角色，就是从无序中发现有序，减少大量的瞎几把做功。 熵增无好坏之分 无序只是概率事件 意义是针对参考系而言的 对于宇宙而言，人类的存在确实没有意义；但对于人类而言，你的存在就有意义。 More延伸阅读","permalink":"http://catzillaorz.github.io/2021/03/01/%E7%86%B5%E5%A2%9E%E5%AE%9A%E5%BE%8B/","photos":[]},{"tags":[{"name":"CSS","slug":"CSS","permalink":"http://catzillaorz.github.io/tags/CSS/"}],"title":"CSS框架排行榜","date":"2021/01/15","text":"CSS框架 满意度、兴趣、使用和知晓率排名 CSS 框架这里真的是神仙打架，又诞生了一些新的工具库，但是 Tailwind CSS 依旧处于不可撼动的地位 （想起了几年前还是 BootStrap 霸榜，不禁感叹自己真的老了老了。） CSS 命名规范 满意度、兴趣、使用和知晓率排名 各个规范比较可以看 https://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/规范是写组件库的时候尤其重要的一环。 CSS-in-JS 满意度、兴趣、使用和知晓率排名 随着 React 这样的库兴起，CSS-in-JS 写起来真的太爽了。著名的框架 Material UI[15]（实现了 Google 的 Material Design）就是采用的这样的模式。 学习CSS渠道 再推荐两个国内个人比较看好的CSS博客 一个是张鑫旭的博客https://www.zhangxinxu.com/wordpress/ 另一个是国服第一切图仔的博客 https://github.com/chokcoco/iCSS/issues refs[^1]: Sacha Greif: https://twitter.com/sachagreif [^2]: Raphaël Benitte: https://twitter.com/benitteraphael [^3]: Chen Hui-Jing: http://chenhuijing.com/ [^4]: Philip Jägenstedt: https://blog.foolip.org/ [^5]: Adam Argyke: https://nerdy.dev/ [^6]: Ahmad Shadeed: https://www.ishadeed.com/ [^7]: Robert Flack: https://github.com/flackr [^8]: Dominic Nguyen: https://www.chromatic.com/ [^9]: Fantasai: http://fantasai.inkedblade.net/ [^10]: Kilian Valkhof: https://kilianvalkhof.com/ [^11]: Subgrid: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid [^12]: Multi-Column Layout: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns [^13]: Ten modern layouts in one line of CSS: https://web.dev/one-line-layouts/ [^14]: 从破解某设计网站谈前端水印(详细教程): https://juejin.cn/post/6900713052270755847 [^15]: Material UI : https://github.com/mui-org/material-ui","permalink":"http://catzillaorz.github.io/2021/01/15/CSS%E6%A1%86%E6%9E%B6%E6%8E%92%E8%A1%8C%E6%A6%9C/","photos":[]},{"tags":[{"name":"wikipedia","slug":"wikipedia","permalink":"http://catzillaorz.github.io/tags/wikipedia/"}],"title":"Svalbard Global Seed Vault","date":"2020/12/29","text":"斯瓦尔巴全球种子库斯瓦尔巴全球种子库（挪威语：Svalbard globale frøhvelv；英语：Svalbard Global Seed Vault）是挪威政府于北冰洋斯瓦尔巴群岛上建造的非营利储藏库，[9][1]用于保存全世界的农作物种子，为全球最大的种子库。[10]种子库位于该群岛首府朗伊尔城，由多个国际基因和生物组织合作[注 1]、挪威政府出资兴建，[11][4]是为了在大规模的区域性或全球性危机出现期间防止某些种子基因的遗失，并进一步保存和备份种子的样本，因此斯瓦尔巴全球种子库亦被称为末日种子库[12][13][14]或末日地窖[15]。 该计划也获得联合国粮食及农业组织的支持，被称为是全球农业的“诺亚方舟”。[16][17][18]种子库依照挪威政府、全球作物多样性信托基金和北欧遗传资源中心（NordGen）达成的长期合作协议中之规定管理[13]。 ind 斯瓦尔巴全球种子库4,500万挪威克朗的建设费用由挪威政府全额资助[3][4]，并和全球作物多样性信托基金共同负担运营费用，该基金会的主要资金则来自比尔及梅琳达·盖茨基金会、各国政府及国际组织[19][20] 目的 斯瓦尔巴全球种子库的建立是为保存全世界的农作物、植物种子，以防止在发生区域性或全球性毁灭灾害时，人类永久丧失某些粮食作物的基因，同时保护农业作物的多样性，挪威法律亦禁止在种子库中存放基因改造作物的种子。[21][22] 根据《经济学人》报导，斯瓦尔巴全球种子库是全球第1,750个种子库，也是维持农业作物的多样性的备用地。[23]","permalink":"http://catzillaorz.github.io/2020/12/29/Svalbard-Global-Seed-Vault/","photos":[]},{"tags":[{"name":"闭包","slug":"闭包","permalink":"http://catzillaorz.github.io/tags/%E9%97%AD%E5%8C%85/"},{"name":"柯里化","slug":"柯里化","permalink":"http://catzillaorz.github.io/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"}],"title":"闭包为什么叫闭包","date":"2020/12/27","text":"维基百科定义 在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是在支持头等函数的编程语言中实现词法绑定的一种技术。闭包在实现上是一个结构体，它存储了一个函数（通常是其入口地址）和一个关联的环境（相当于一个符号查找表）。环境里是若干对符号和值的对应关系，它既要包括约束变量（该函数内部绑定的符号），也要包括自由变量（在函数外部定义但在函数内被引用），有些函数也可能没有自由变量。闭包跟函数最大的不同在于，当捕捉闭包的时候，它的自由变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。捕捉时对于值的处理可以是值拷贝，也可以是名称引用，这通常由语言设计者决定，也可能由用户自行指定（如C++）。 MDN A closure is the combination of a function and the lexical environment within which that function was declared.— MDN Currying in JSWe can’t write the JS engine to currify all functions, but we can come up with a strategy to do so. The StrategyExamining the two forms of sum3 reveals an important fact. The actual function body from the plain function gets transferred as-is to the last function in the chain. function sum3(x, y, z) { //... }function sum3(x) { return (y) => { return (z) => { // ... }; }; } Before we reach the last level, we won’t have all the arguments in the execution scope. This means that we create a wrapper function that collects the arguments and calls the real function. All the intermediate nested functions are called accumulator functions — at least that’s what I call them. function _sum3(x, y, z) { return x + y + z; }function sum3(x) { return (y) => { return (z) => { return _sum3(x, y, z); }; }; }sum3(1)(2)(3) // 6 { return (y) => { return (z) => { return fn(x, y, z); }; }; }; }const sum3 = curry((x, y, z) => { return x + y + z; });sum3(1)(2)(3) // 6 { return fn(a1); }; }function curry2(fn) { return (a1) => { return (a2) => { return fn(a1, a2); }; }; }function curry3(fn) { return (a1) => { return (a2) => { return (a3) => { return fn(a1, a2, a3); }; }; }; }...function curryN(fn){ return (a1) => { return (a2) => { ... return (aN) => { // N-th nested function return fn(a1, a2, ... aN); }; }; }; } We can make a few observations: The i-th accumulator returns another function that is the (i+1)-th accumulator. We can also say that it is the j-th accumulator. The i-th accumulator accepts the i-th argument, while maintaining the previous i - 1 arguments in its environment. There will be N nested functions, where N is the arity of function fn. The N-th function always calls and returns fn. curry0 is pointless waste of a function and should not exist. Using the above observations, we can see that the curry function returns a nested structure of self-similar accumulator functions. We can easily generate such a structure using recursion. function nest(fn) { return (x) => { // accumulator function }; }function curry(fn) { return nest(fn); } We obviously need a terminal case else our code will form an infinite fractal. We will maintain a variable i that keeps track of our current level. The terminal case will be when i === N. function nest(fn, i) { return (x) => { if (i === fn.length) { return fn(); }return nest(fn, i + 1); }; }function curry(fn) { return nest(fn, 1); } Next up, we need to store the accumulated arguments and pass them to fn() in the terminal case. The easiest solution is to create an array args inside curry and pass it to nest. function nest(fn, i, args) { return (x) => { args.push(x);if (i === fn.length) { return fn(...args); }return nest(fn, i + 1, args); }; }function curry(fn) { const args = []; return nest(fn, 1, args); } Just add a guard for 0-arity functions and we are done. function curry(fn) { if (fn.length === 0) { return fn; }const args = []; return nest(fn, 1, args); } It’s a good idea to test our code at this stage: const log1 = curry((x) => console.log(x)); log1(10); // 10const log2 = curry((x, y) => console.log(x, y)); log2(10)(20); // 10 20 You can run your tests here on codepen. Tweaks and OptimisationsAt this point, we can either do nothing or we can try to optimise our code. For starters, we can move nest inside curry, thus reducing the number of arguments passed to nest by reading fn and args from the closure. function curry(fn) { if (fn.length === 0) { return fn; }const args = [];function nest(i) { return (x) => { args.push(x);if (i === fn.length) { return fn(...args); }return nest(i + 1); }; }return nest(1); } Let’s tweak this new curry to be more functional and not rely on closure variables. We do this by supplying args and fn.length as nest arguments. Further still, instead of passing fn.length for comparison, we can pass the remaining depth of recursion. function curry(fn) { if (fn.length === 0) { return fn; }function nest(N, args) { return (x) => { if (N - 1 === 0) { return fn(...args, x); }return nest(N - 1, [...args, x]); }; }return nest(fn.length, []); } Variadic CurryLet’s see our old friend sum3 and its older brother sum5: const sum3 = curry((x, y, z) => { return x + y + z; });const sum5 = curry((a, b, c, d, e) => { return a + b + c + d + e; });sum3(1)(2)(3) // 6 15sum5 1 2 3 (sum3 1 2 3) 5 > 17 If you ask me, even the simple function calls in JS look better: sum5(1, 2, 3, 4, 5) // 15 But this doesn’t mean we have to give up on currying. What we can do is settle for some middle ground. A system where the curried, the uncurried syntaxes both work and the ones in between work too. sum3(1, 2, 3) sum3(1, 2)(3) sum3(1)(2, 3) sum3(1)(2)(3) We need a simple modification — convert accumulators to variadic functions. However, when the i-th accumulator accepts k arguments, the next accumulator won’t be of N - 1 depth, but rather N - k depth. We were using N - 1 because all accumulators were accepting one argument each. This also means that we no longer require the 0-arity guard. function curry(fn) { function nest(N, args) { return (...xs) => { if (N - xs.length === 0) { return fn(...args, ...xs); }return nest(N - xs.length, [...args, ...xs]); }; }return nest(fn.length, []); } It’s testing time. You can run your tests here on codepen. function curry(){...}const sum3 = curry((x, y, z) => x + y + z);console.log( sum3(1, 2, 3), sum3(1, 2)(3), sum3(1)(2, 3), sum3(1)(2)(3), ); // 6 6 6 6 BonusWe did it! We created a curry function that takes multi-arity functions and returns variadic curried function(s). This would be a good time to take a bow. There is yet another method of currying in JS. In JS, we can bind arguments to a function and create a bound copy of it. The resultant function is said to be “partially applied” — partially, because the function already holds some of its arguments, but requires some more before invocation. Up until now, curry would return a function that accumulates arguments until all arguments were received and then invoke fn with the arguments. By binding arguments to the function, we can remove the need for multiple nested accumulator functions. And this is what we get: function curry(fn) { return (...xs) => { if (xs.length >= fn.length) { return fn(...xs); }return curry(fn.bind(null, ...xs)); }; } Here’s how it works. curry takes an N-arity function and returns an accumulator function. When the accumulator is invoked with k number of arguments, we check if k >= N, i.e. whether or not the function’s arity is satisfied. If it is, we invoke fn with the arguments. If not, we create a copy of fn that has k arguments partially applied and pass it to curry as the next fn, with its reduced arity of N - k.","permalink":"http://catzillaorz.github.io/2020/12/27/%E9%97%AD%E5%8C%85%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AB%E9%97%AD%E5%8C%85/","photos":[]},{"tags":[{"name":"Docker","slug":"Docker","permalink":"http://catzillaorz.github.io/tags/Docker/"}],"title":"你的容器需要诊断","date":"2020/12/12","text":"快速排查问题 片段回放一 服务器地址是否可访问 telnet icos-stomp-dit-pass 8080 片段回放二 容器当前网络状态 片段回放三 查看当前容器，已经启动的服务及端口状态，以及网络状态 netstat -anlp Other# mac 查询8080端口lsof -n -i4TCP:8080","permalink":"http://catzillaorz.github.io/2020/12/12/%E4%BD%A0%E7%9A%84%E5%AE%B9%E5%99%A8%E9%9C%80%E8%A6%81%E8%AF%8A%E6%96%AD/","photos":[]},{"tags":[{"name":"keycloak","slug":"keycloak","permalink":"http://catzillaorz.github.io/tags/keycloak/"}],"title":"kyecloak权限控制策略","date":"2020/07/29","text":"Keycloak支持细粒度的授权策略，并可以对这些策略进一步组合 基于属性（ABAC） 基于角色（RBAC） 基于用户（UBAC） 基于上下文（CABC） 基于规则（Rule-based） 通过JavaScript 使用Jboss Drools 基于时间（Time-based） 通过SPI自定义访问控制策略（ACM） Keycloak提供了一组管理界面和RESTful API，用于创建权限、关联权限与授权策略，以及在应用程序中执行授权决策。 资源服务器通常执行的是基于角色的访问控制（RBAC）策略，即检查用户所拥有的角色是否关联了要访问的资源。虽然这种方式非常有用，但是它们也有一些限制： 资源和角色紧耦合，角色的更改（如添加、删除或更改访问上下文）可能影响多个资源。 基于RBAC的应用程序无法很好地响应安全性需求的调整。 项目规模扩大时，复杂的角色管理会很困难而且容易出错。 不够灵活。角色并不能有效代表用户身份，即缺乏上下文信息。客观上来说被授予了角色的用户，至少会拥有某些访问权限。 当下的项目中，我们需要考虑不同地区、不同本地策略、使用不同设备、以及对信息共享有较高需求的异构环境。Keycloak授权服务可以通过以下方式帮助您提高应用程序和服务的授权能力： 不同的访问控制机制以及细粒度的授权策略。 中心化的资源、权限以及策略管理。 中心化的策略决策。 REST风格的授权服务。 授权工作流以及用户访问管理。 可作为快速响应您项目中安全需求的基础设施。 授权服务Keycloak授权服务构建在已经广泛使用的标准上，比如OAuth2和UMA规范。OAuth2客户端（如前端应用程序）可以利用token endpoint从服务器获取Access Token，然后使用Access Token从资源服务器（例如后端服务）获取被保护的资源。Keycloak授权服务扩展了OAuth2，通过评估与被请求的资源或范围相关联的策略来发出Access Token。这意味着资源服务器可以基于含有权限Access Token来控制对资源的访问。在Keycloak授权服务中，这种具有权限的Access Token称为请求方令牌或简称RPT。除了发布RPTs之外，Keycloak授权服务还提供了一组RESTful端点，这些端点允许资源服务器管理它们受保护的资源、范围、权限和策略，帮助开发人员将这些功能集成到应用程序中，以支持细粒度授权。 授权服务端点发现和元数据Keycloak提供了一个发现文档来帮助客户端获取与Keycloak授权服务交互所需的任何信息，包括端点位置和功能。 curl -X GET \\ http://${host}:${port}/auth/realms/${realm}/.well-known/uma2-configuration 请将上面占位符中的变量替换为实际的值。 token_endpoint 遵循OAuth2的Token端点支持 urn:ietf:params:oauth:grant-type:uma-ticket 授权类型。客户端可以向此端点发送授权申请并获取Keycloak RPT。 token_introspection_endpoint 遵循Oauth2的Token检查端点。客户端可以使用该端点查询RPT的状态，并确定与token相关的任何其他信息，比如Keycloak授予的权限。 resource_registration_endpoint 遵循UMA协议的资源注册端点，资源服务器可以使用它来管理资源以及范围。此端点提供了资源、范围的创建、查询、更新以及删除等功能。 permission_endpoint 遵循UMA协议的权限管理端点，资源服务器可以用来管理权限tickets。提供了对permission ticket的创建、查询、更新以及删除等功能。 获取权限 客户端验证方式 推送声明 User-Managed Access Keycloak 授权服务是基于User-Managed Access的，我们简写为UMA。UMA协议在下面这些方面增强了OAuth2： 隐私 点对点授权 资源共享 授权过程 在UMA中，授权过程开始于客户端试图访问受UMA保护的资源服务器时。 受UMA保护的资源服务器会要求请求带有bearer token。下面模拟了不带权限ticket的请求： curl -X GET \\ http://${host}:${port}/my-resource-server/resource/1bfdfe78-a4e1-4c2d-b142-fc92b75b986f 资源服务器将一个响应发送回客户机，该响应带有一个权限ticket和一个as_uri参数，该as_uri表示Keycloak服务器的地址，客户端可以将ticket发送到此地址来获得RPT。 下面是资源服务器的响应，注意响应中包含权限ticket： HTTP/1.1 401 UnauthorizedWWW-Authenticate: UMA realm=\"${realm}\", as_uri=\"https://${host}:${port}/auth/realms/${realm}\", ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\" 权限ticket是Keycloak权限API发放的一种特殊token。它们代表被申请的权限（如资源以及范围）以及其它请求中的关联信息。只有资源服务器可以创建它们。 客户机已经拥有了权限ticket和Keycloak服务器的地址，就可以使用文档发现API来获取token endpoint的地址并发送授权请求。 下面的例子展示了客户端向token endpoint请求RPT： curl -X POST \\ http://${host}:${port}/auth/realms/${realm}/protocol/openid-connect/token \\ -H \"Authorization: Bearer ${access_token}\" \\ --data \"grant_type=urn:ietf:params:oauth:grant-type:uma-ticket\" \\ --data \"ticket=${permission_ticket} Keycloak评估通过后会发放权限相关的RPT： HTTP/1.1 200 OKContent-Type: application/json...{ \"access_token\": \"${rpt}\",} 响应和其他授权类型的响应类似。RPT在access_token响应参数中，如果client没有通过授权服务端会返回403状态码： HTTP/1.1 403 ForbiddenContent-Type: application/json...{ \"error\": \"access_denied\", \"error_description\": \"request_denied\"} 提交权限请求 在整个授权过程中，客户端首先需要从受UMA保护的资源服务器获得一个权限ticket，以便在Keycloak的token端点用它来交换RPT。 如果Keycloak判断客户端无法通过授权，会返回403及request_denied错误信息。 HTTP/1.1 403 ForbiddenContent-Type: application/json...{ \"error\": \"access_denied\", \"error_description\": \"request_denied\"} 上面的响应表示Keycloak不能对该权限ticket发放RPT。 某些时候客户端会用到异步授权流程，并让被资源所有者来决定是否授权。为此，客户端可以在对token端点的请求中带上submit_request参数： curl -X POST \\ http://${host}:${port}/auth/realms/${realm}/protocol/openid-connect/token \\ -H \"Authorization: Bearer ${access_token}\" \\ --data \"grant_type=urn:ietf:params:oauth:grant-type:uma-ticket\" \\ --data \"ticket=${permission_ticket} \\ --data \"submit_request=true\" 当使用submit_request参数时，Keycloak会记录下每个被拒绝的权限申请。然后资源所有者就可以检查并管理这些它们。 你可以将此功能视为APP中的请求访问按钮，用户可以向其他用户申请以访问他们的资源。 管理对用户资源的访问 保护API保护API遵循UMA提供了一系列端点： 资源管理 权限管理 策略API Keycloak利用UMA保护API使资源服务器能够管理各自用户的权限。除了资源和权限API外，Keycloak还提供了策略API。可以让资源服务器代表其用户设置资源的权限。 使用此API要求资源服务器拥有名为protection API token（PAT）的特殊OAuth2 access token。在UMA中，PAT是有着uma_protection范围的token。 什么是PAT，如何获取它们？ 一个protection API token（PAT）是有着uma_protection范围的特殊token。创建资源服务器时Keycloak会自动创建uma_protection的角色，并将其与客户端的服务帐户关联起来。 资源服务器可以像获取其他OAuth2 token那样从Keycloak获取PAT。下边是一个curl的例子： curl -X POST \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d 'grant_type=client_credentials&client_id=${client_id}&client_secret=${client_secret}' \\ \"http://localhost:8080/auth/realms/${realm_name}/protocol/openid-connect/token\" 上面的示例使用client_credentials授权类型从服务器获取PAT。服务器返回的响应如下： { \"access_token\": ${PAT}, \"expires_in\": 300, \"refresh_expires_in\": 1800, \"refresh_token\": ${refresh_token}, \"token_type\": \"bearer\", \"id_token\": ${id_token}, \"not-before-policy\": 0, \"session_state\": \"ccea4a55-9aec-4024-b11c-44f6f168439e\"} Keycloak可以使用不同的方式来认证客户端应用。上面使用了 client_credentials 方式，它要求提供一个client_id和一个client_secret。你可以自由选择其它方式来认证。 管理资源 Keycloak提供了遵循UMA协议的端点来远程管理资源。 http://${host}:${port}/auth/realms/${realm_name}/authz/protection/resource_set 管理权限申请 使用策略API来管理资源权限 RPTRPT是使用JSON web signature（JWS） 签发的JSON web token（JWT）。RPT基于之前由Keycloak发出的OAuth2 access token来构建，该token用于用户自身或代表用户的特定客户端。 解码RPT可以看到它的payload如下： { \"authorization\": { \"permissions\": [ { \"resource_set_id\": \"d2fe9843-6462-4bfc-baba-b5787bb6e0e7\", \"resource_set_name\": \"Hello World Resource\" } ] }, \"jti\": \"d6109a09-78fd-4998-bf89-95730dfd0892-1464906679405\", \"exp\": 1464906971, \"nbf\": 0, \"iat\": 1464906671, \"sub\": \"f1888f4d-5172-4359-be0c-af338505d86c\", \"typ\": \"kc_ett\", \"azp\": \"hello-world-authz-service\"} 从此token中，你可以从服务器获取所有 permissions 声明的权限。 注意，权限与要保护的资源/范围直接相关，并且完全与实际授予和发出这些权限的机制解耦。 审视RPT 获取RPT信息 每次检视RPT时都需要调用服务端吗？ 授权客户端的Java API根据实际项目的需求，资源服务器客远程管理资源以及通过编程来检查权限。如果你正在使用Java，则可以使用授权客户端API来访问Keycloak授权服务。 Keycloak针对资源服务器的不同需求，提供了不同端点（如token端点、资源端点和权限管理端点）。 Maven依赖 配置 创建授权客户端 获取用户授权 使用保护API来创建资源 检查RPT 策略执行器 配置 声明信息点 从HTTP请求中获取信息 从外部HTTP服务获取信息 静态声明 Cliam Informatica Provider 的SPI 获取授权上下文 使用AuthorizationContext获取授权客户端实例 JavaScript集成 处理来自UMA保护的资源服务器的授权响应 获取权限 授权请求 获取RPT 设置TLS/HTTPS keycloak授权 keycloak授权","permalink":"http://catzillaorz.github.io/2020/07/29/kyecloak%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5/","photos":[]},{"tags":[{"name":"乐理","slug":"乐理","permalink":"http://catzillaorz.github.io/tags/%E4%B9%90%E7%90%86/"},{"name":"吉他","slug":"吉他","permalink":"http://catzillaorz.github.io/tags/%E5%90%89%E4%BB%96/"}],"title":"吉他乐理四-大调和弦","date":"2020/07/14","text":"弹吉常见常用的和弦 C调常用和弦指法图 这是C调常用的和弦，不同调是拥有属于自己的和弦的，也就是说除了C调和弦，还有D,E,F,G,A,B调的和弦。我先大家大概看看不同调的和弦都是什么样子的，大概过目下就好~ 以上就是各种调的常见和弦图，假如以上你都精通了，可以说你能弹唱80%的歌了！这是不是听起来很美妙？但做起来并没有那么容易~ 现在回到C调和弦图 和弦图上每个都有自己的名字，你看到上面的字母就是它的名字，比如C的名字就是C和弦，Dm的名字就是Dm和弦，对应下方的和弦图。 那么现在继续说和弦，为什么会有不同调的和弦呢？ 其实我们任何一首歌都会有属于自己的调调，然后什么调就会主要用哪些和弦。 还记得 1= C 是什么意思么？这个代表这首歌是C调的，所以说这个歌就算我不看谱子，我也知道它大概会用到什么和弦，也就是C调的和弦。 所以一首歌的调调是什么，可以直接决定会用到什么和弦去弹这个歌！ 这时候假如你是一个不喜欢遵守规矩的人，你可能会问我，一首歌是G调的话，我不想用G调的和弦弹，我想用C调的和弦去弹，可不可以啊？ 答案是可以的，作为一个弹吉他的，最熟悉的和弦莫不过C调的和弦了，直接用C调去弹其他调的歌，会让我们更加的轻松，自如！ 那要怎么去用C调去弹G调的歌呢？最笨的方法就是调音，把每个弦的音调到那个调的音阶，这样你就可以直接用C调和弦了。最聪明的方法就是直接用变调夹去夹品升调！ 在场有不知道变调夹是什么的话，请自行百度。 下面看这图： 看红色框部分，假如一首歌是D调的话，我们像用C调的和弦弹，而不用D调的和弦，那么直接用变调夹夹住2品的位置，就可以了。这时候，你的音阶就是D调的了，不需要调节。 换句话说，夹住2品，可以用C调和弦去弹D调的歌曲了! 其他调同意道理,主要会看这个图就行了. 现在给大家分享下本章的一次小知识吧： 那个变调图中的 #C/bD 这些是什么鬼？ 其实这些是升降音，#是升号，b是降号。两个相邻的音的升降是一个音来的，比如升C和降D，是一样的。所以缩写成 #C/bD （意思是升do或者降re）。还记得我们的音阶图么？ 有很多空白的地方，其实这些并不是没有音，而是升降音来的。算一个半音，所以严谨上来说是没有降do 和 升mi 的。(但随着深入接触 #mi 其实就是 fa) 假如我们把音乐中的所有音程列出来就是这样的 C #C/bD D #D/bE E F #F/bG G #G/bA A #A/bB B1 2 3 4 5 6 7 8 9 10 11 12 刚刚好十二个半音，这个在音乐中也叫十二平均律 一首歌变调后，和弦要怎么换？ 这个非常的简单，每个和弦都有级数的，变调后，只有把对应的级数换过来就是了 比如D调的歌用C调和弦弹，那么原来这个歌的D和弦就要换成C和弦(都是一级和弦)，Em和弦就换成Dm和弦(二级和弦)，其他同理，把对应级数的和弦互换就可以了。 看图变调太麻烦，有没有更方便的方法？ 当然有的，其实变调也是可以推导出来的，还是用全音和半音的关系去推导。 比如C调音阶要变D调音阶(就是D调的歌用C调和弦弹，夹品只是改变了音阶，千万不要认为是D调变成了C调) 还记得C和D是什么关系吧？全音关系，全音我们推音阶的时候是不是要隔开一个品？ 夹品同样道理，隔开1品后，就是直接夹2品的位置，然后2品就是D调的音阶了，这时候就可以直接用C调和弦去弹。 其他变调也一样的方法去推。E调转C调，C和E我们说不出什么关系，但我知道D调在2品的话，就从2品开始推！D和E是全音，所以2品再隔开一个品就是4品，夹4品就是E调的音阶 最后给大家证实下原理吧，你会发现不可思议： 图中的红色框的每条弦的音都是和C调空弦音一样的，你会发现实际不同调的音阶，仅仅只是把原来C调的音阶往后移了，所以我们在C调音阶的基础上夹品的话就是把C调音阶往后移了，从而得到我们想要的调调音阶！","permalink":"http://catzillaorz.github.io/2020/07/14/%E5%90%89%E4%BB%96%E4%B9%90%E7%90%86%E5%9B%9B-%E5%A4%A7%E8%B0%83%E5%92%8C%E5%BC%A6/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://catzillaorz.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"异常","slug":"异常","permalink":"http://catzillaorz.github.io/tags/%E5%BC%82%E5%B8%B8/"}],"title":"优雅的处理前端异常","date":"2020/06/23","text":"前端处理异常的意义前端一直是距离用户最近的一层，随着产品的日益完善，我们会更加注重用户体验，而前端异常却如鲠在喉，甚是烦人。 异常是不可控的，会影响最终的呈现结果，但是我们有充分的理由去做这样的事情。 增强用户体验； 远程定位问题； 未雨绸缪，及早发现问题； 无法复线问题，尤其是移动端，机型，系统都是问题； 完善的前端方案，前端监控系统； 对于 JS 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。 需要处理哪些异常对于前端来说，我们可做的异常捕获还真不少。总结一下，大概如下： JS 语法错误、代码异常 AJAX 请求异常 静态资源加载异常 Promise 异常 Iframe 异常 跨域 Script error 崩溃和卡顿 Try-Catch 的误区try-catch 只能捕获到同步的运行时错误，对语法和异步错误却无能为力，捕获不到。 同步运行时错误： try { let name = 'mojito'; console.log(nam);} catch (e) { console.log('捕获err：', e);}// output: 不能捕获到语法错误，我们修改一下代码，删掉一个单引号 try { let name = 'mojito; console.log(nam);} catch(e) { console.log('捕获err：', e);}// output: 异步错误： try { setTimeout(() => { undefined.map((v) => v); }, 1000);} catch (e) { console.log('捕获到异常：', e);}// output: 并没有捕获到异常，这是需要我们特别注意的地方。 window.onerror 不是万能的 当 JS 运行时错误发生时，window 会触发一个 ErrorEvent 接口的 error 事件，并执行 window.onerror()。 首先试试同步运行时错误 再试试语法错误，是否能捕获 window.onerror = function(message, source, lineno, conlno, error){ console.log('捕获异常：', {message, source, lineno, conlno, error})}let name = 'mojito// output: 居然没有捕获到，window.onerror 再来看，异步操作捕获： window.onerror = function(message, source, lineno, conlno, error){ console.log('捕获异常：', {message, source, lineno, conlno, error})}setTimeout(() => { Mojito;})// output: 控制台： 再来试试，网络请求异常情况： window.onerror = function(message, source, lineno, conlno, error){ console.log('捕获异常：', {message, source, lineno, conlno, error})}// output: 依然无法捕获，静态资源异常等错误。 解决方案：window.onerror 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Uncaught Error: xxxxx window.onerror = function(message, source, lineno, conlno, error){ console.log('捕获异常：', {message, source, lineno, conlno, error}) return true; // 返回 `true` 的时候，异常才不会向上抛出}setTimeout(() => { Mojito;})// output: 成功捕获： 注意点需要注意： onerror 最好写在所有 JS 脚本的前面，否则有可能捕获不到错误； onerror 无法捕获语法错误； 结论： 到这里基本就清晰了：在实际的使用过程中，onerror 主要是来捕获预料之外的错误，而 try-catch 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。 问题又来了，捕获不到静态资源加载异常怎么办？ window.addEventListener当一项资源（如图片或脚本）加载失败，加载资源的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 onerror() 处理函数。这些 error 事件不会向上冒泡到 window ，不过（至少在 Firefox 中）能被单一的 window.addEventListener 捕获。 window.addEventListener('error', (error) => { console.log('捕获异常：', error)}, true)// output: 控制台输出 由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。 需要注意: 不同浏览器下返回的 error 对象可能不同，需要注意兼容处理。 需要注意避免 addEventListener 重复监听。 Promise Catch在 promise 中使用 catch 可以非常方便的捕获到异步 error ，这个很简单。没有写 catch 的 Promise 中抛出的错误无法被 onerror 或 try-catch 捕获到，所以我们务必要在 Promise 中不要忘记写 catch 处理抛出的异常。 解决方案：为了防止有漏掉的 Promise 异常，建议在全局增加一个对 unhandledrejection 的监听，用来全局监听Uncaught Promise Error。使用方式： window.addEventListener(\"unhandledrejection\", function(e){ console.log(e);}) 在增加监听后，我们继续来尝试一下， 不对promis进行catch： 所以，正如我们上面所说，为了防止有漏掉的 Promise 异常，建议在全局增加一个对 unhandledrejection 的监听，用来全局监听 Uncaught Promise Error。 补充一点：如果去掉控制台的异常显示，需要加上： event.preventDefault(); 需要注意的是：error boundaries 并不会捕捉下面这些错误 事件处理器 异步代码 服务端的渲染代码 在 error boundaries 区域内的错误 我们来举一个小例子，在下面这个 componentDIdCatch(error,info) 里的类会变成一个 error boundary： 然后我们像使用普通组件那样使用它： componentDidCatch() 方法像 JS 的 catch{} 模块一样工作，但是对于组件，只有 class 类型的组件(class component )可以成为一个 error boundaries 。 实际上，大多数情况下我们可以在整个程序中定义一个 error boundary 组件，之后就可以一直使用它了！ iframe 异常对于 iframe 的异常捕获，我们还得借力 window.onerror： Script error一般情况，如果出现 Script error 这样的错误，基本上可以确定是出现了跨域问题。这时候，是不会有其他太多辅助信息的，但是解决思路无非如下： 跨源资源共享机制( CORS )：我们为 script 标签添加 crossOrigin 属性。 或者动态去添加 js 脚本： 特别注意，服务器端需要设置：Access-Control-Allow-Origin 此外，我们也可以试试这个-解决 Script Error 的另类思路： 简单解释一下： 改写了 EventTarget 的 addEventListener 方法； 对传入的 listener 进行包装，返回包装过的 listener，对其执行进行 try-catch； 浏览器不会对 try-catch 起来的异常进行跨域拦截，所以 catch 到的时候，是有堆栈信息的； 重新 throw 出来异常的时候，执行的是同域代码，所以 window.onerror 捕获的时候不会丢失堆栈信息； 利用包装 addEventListener，我们还可以达到「扩展堆栈」的效果： 崩溃和卡顿卡顿也就是网页暂时响应比较慢， JS 可能无法及时执行。但崩溃就不一样了，网页都崩溃了，JS 都不运行了，还有什么办法可以监控网页的崩溃，并将网页崩溃上报呢？ 崩溃和卡顿也是不可忽视的，也许会导致你的用户流失。 利用 window 对象的 load 和 beforeunload 事件实现了网页崩溃的监控。 基于以下原因，我们可以使用 Service Worker 来实现网页崩溃的监控： Service Worker 有自己独立的工作线程，与网页区分开，网页崩溃了，Service Worker 一般情况下不会崩溃； Service Worker 生命周期一般要比网页还要长，可以用来监控网页的状态； 网页可以通过 navigator.serviceWorker.controller.postMessage API 向掌管自己的 SW 发送消息。 错误上报 通过 Ajax 发送数据: 因为 Ajax 请求本身也有可能会发生异常，而且有可能会引发跨域问题，一般情况下更推荐使用动态创建 img 标签的形式进行上报。 动态创建 img 标签的形式: function report(){ let reportUrl = \"http://mojito.com/report\"; new Image().src = `${reportUrl}?logs=${error}`;} 收集异常信息量太多，怎么办？实际中，我们不得不考虑这样一种情况：如果你的网站访问量很大，那么一个必然的错误发送的信息就有很多条，这时候，我们需要设置采集率，从而减缓服务器的压力: Reporter.send = function(data){ // 只采集 30% if(Math.random() < 0.3 ){ send(data); // 上报错误 }} 采集率应该通过实际情况来设定，随机数，或者某些用户特征都是不错的选择。 总结回到我们开头提出的那个问题，如何优雅的处理异常呢？ 可疑区域增加 Try-Catch 全局监控 JS 异常 window.onerror 全局监控静态资源异常 window.addEventListener 捕获没有 Catch 的 Promise 异常：unhandledrejection VUE errorHandler 和 React componentDidCatch 监控网页崩溃：window 对象的 load 和 beforeunload 跨域 crossOrigin 解决 其实很简单，采用组合方案，分类型的去捕获异常，这样基本 80%-90% 的问题都化于无形。 原作者：coding小姐姐，仅对部分内容进行了修改原文链接：https://segmentfault.com/a/1190000018754274","permalink":"http://catzillaorz.github.io/2020/06/23/%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86%E5%89%8D%E7%AB%AF%E5%BC%82%E5%B8%B8/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-加分句40句","date":"2020/06/19","text":"托福加分句 It is a must for sb to do sth … 必须做… 【真题重现】: Should all teachers be required to take courses every five years to update their knowledge? 【真题运用】: It is a must for politics teachers to join in related courses to update their former storage of knowledge. Be bound to … 必然会… 【真题重现】: Should parents help to determine the future of their children? 【真题运用】: Such an impetus is bound to be powerful and effective. Under the instructions of … 在…的指导下 【真题重现】: Helping students gain self-confidence or teaching specific knowledge? 【真 题运用】: Under the instructions of their teachers in class, students can obtain a thorough understanding of what has been printed in the textbooks. The real looks of … ….的真面目 【真题重现】: Should university students be required to take at least one course that teaches them the culture of a country rather than their own? 【真题运用】: It vividly demonstrates the fact that only from a different angle could a person obtain the real looks of his own surroundings. A significant step toward … 向…迈出一大步 【真题重现】: Working 3 days a week with long hours or working 5 days a week with short hours? 【真题运用】: These are all positive phenomenon that mark a significant step toward social progress. Be paved with … 由…铺成 【真题重现】: In order to achieve happiness for yourself, you have to try to make other people happy? 【真题运用】: The way leading toward everlasting happiness is paved with endless efforts to make others happy. Be blamed for … 因…受到责备 【真题重现】: Should people have hobbies and do physical activities different from their work? 【真题运用】: Under such adverse circumstances, nobody could be blamed for feeling overwhelmed. Do one’s utmost to … 尽最大努力去做… 【真题重现】: Should advertisements targeting children aged between 2 and 5 be banned? 【真题运用】: In most cases, they would do their utmost to persuade their parents to buy their dream objects like expensive toys, snacks and drinks. heavily loaded with… 负载过量的… 【真题重现】: Is it difficult for people to know whom to believe or who is telling the truth because of so many sources of information? 【真题运用】: Heavily loaded with mountains of information from the advanced network of mass media, modern citizens are facing unprecedented psychological pressure. There is no need to … 没必要做… 【真题重现】: Has technology made children less creative than they were in the past? 【真题运用】: In their eyes, technology has advanced to such a large extent that there is no need to use their own brain to overcome difficulties. Deprive … Of … 剥夺;使…丧失 【真题重现】: Is one’s working more important than being with one’s family? 【真题运用】: Indeed, the fast pace of modern life has deprived citizens of more leisure time to spend with their family outside of work. Be associated with … 与…相关 【真题重现】: Won’t students use printed books any more in 20 years? 【真题运用】: Among the four great inventions in China’s history, two of them are associated with books. Bring … to the limelight 使…成为注目的焦点 【真题重现】: Be more like others or be different from everyone else? 【真题运用】: Definitely, the concrete determination to be unique brings a pioneer to the limelight. Be blessed with … 享有… 【真题重现】: Does telephone have greater influence on people’s lives than TV? 【真题运 用】: With the simple dialing of numbers, a person is blessed with the opportunity to speak to a friend far away and hear his voice directly through the telephone. Excessive obsession with … 过分沉迷于… 【真题重现】: Are most business people motivated only by the desire for money? 【真题运用】: Such excessive obsession with moneymaking may incur unhealthy competition and pose a threat to the fairness of the whole market. Well informed about … 对…有深入的了解 【真题重现】: Is it desirable to know events from all over the world? 【真题运用】: The advanced network of mass media today has kept people well informed about what is going on in all corners of the earth. Keep a blind eye to … 对…视而不见 【真题重现】: People buy things not because they need them, but because others buy them? 【真题运用】: Under such circumstances, people seem to keep a blind eye to whatever the others are pursuing. Lay the foundation for … 为…打下基础 【真题重现】: Should children play and study rather than learn how to do household chores? 【真题运用】: From the medical angle, it is widely acknowledged that children’s brains are the quickest to assimilate new knowledge and thus this stage of life lays the foundation for their future education. Come into one’s mind 使…想起; 进入…的脑海 【真题重现】: Watching a movie: in a cinema or at home? 【真题运用】: A familiar scene would come into people’s mind whenever the cinema is mentioned: comfortably seated before the wide silver screen. Endeavor to …尽力做… 【真题重现】: Buy a house or a business? 【真题运用】: Cherishing this faith, most business owners would endeavor to cultivate their minds and steel their personalities. Stimulus 激励;刺激 【真题重现】: Do grades encourage students to learn? 【真题运用】: In a sense, pursuing high grades is indeed an essential stimulus for students to concentrate on their textbooks. held in the palm of his own hand. 被掌握在某人手中 【真题重现】: What can help you to succeed? 【真题运用】: The success stories of numerous world-renowned celebrities justify the idea that one’s bright future is held in the palm of his own hand. immerse oneself in … 沉浸于…;埋头苦干 【真题重现】: Is it more important to work quickly with risks making mistakes than to work slowly with everything correct? 【真题运用】: Immersing himself in the task at hand can help him avoid careless mistakes. be of top priority …是最重要的 【真题重现】: Should the government focus more on preserving natural environment and less on economic development? 【真题运用】: To begin with, as the foundation of society, economy is of top priority in all nations. be obliged to… 有义务做… 【真题重现】: Are some scientists responsible for the negative impacts made by their discoveries? 【真题运用】: For instance, before a new discovery is put to use for human needs, the discoverer is obliged to formulate official instructions which must include the most detailed introduction for fear of… 为了避免;唯恐 【真题重现】: Is advertising the main cause of unhealthy eating habits? 【真题运用】: For fear of putting on weight, an increasing number of people have joined a shared mission to become slimmer. Prerequisite 前提;先决条件 【真题重现】: Does playing sports teach us about life? 【真题运用】: Indeed, motion is the prerequisite of life, without which all living beings would perish and the whole universe would no longer exist. from all walks of life 来自各行各业的 【真题重现】: Are environmental issues too complex to be handled by the individual? 【真题运用】: Hence, people from all walks of life, young and old, poor and rich, should offer to join in the campaign against environmental hazards. bring into full play 充分发挥(作用) 【真题重现】: The most important things for governments to do to improve health care. 【真题运用】: With increased public awareness, all these essential elements can be taken into account and brought into full play. Facilitate 促进;帮助 【真题重现】: The only way the government can conserve energy. 【真题运用】: One of these effective methods is to facilitate the replacement of non-renewable resources with renewable energy. Exert…on… 把…强加于…之上 【真题重现】: Were people friendlier in the past than they are today? 【真题运用】: Besides, the fierce competition in today’s society exerts so much pressure on people that there is no time for them to show friendliness. Ensue 接着发生 【真题重现】: Choosing a subject that interests you or one preparing you for a better job or career? 【真题运用】: Whenever a new theory in biology is grasped, another cheerful moment ensues. Shoulder 肩负 【真题重现】: Do some people like to spend time alone when relaxing? 【真题运用】: Today, in most enterprises, employees shoulder heavy responsibilities during office hours. Boast 取得;拥有 【真题重现】: Are students more influenced by their teachers than by their friends? 【真题运用】: In the eyes of many students, teachers boast absolute authority in education. Backup 支持 【真题重现】: Should the most important education for students be conducted in the classroom, but not out of the classroom? 【真题运用】: To a certain degree, education outside the classroom can be regarded as the powerful backup of classroom teaching rather than its unimportant accessory. Steel 使坚强;使坚固 【真题重现】: Solving questions using our own knowledge and experience or asking other people for advice? 【真题运用】: The process of probing deeper into a mystery until the result is outindeed tests our ability and steels our personalities. Destructive 破坏的;有害的 【真题重现】: Is it a good method to give the same grade to all the members who do the same project together? 【真题运用】: To some degree, making each one count helps eliminate prejudices and undesirable moods that are destructive to the progress and result of the project. marvel at… 对…感到惊讶;惊叹 【真题重现】: Will people reduce car use in 20 years? 【真题运用】: Tracing back to the past when only the rich were qualified to possess private cars, we couldn’t help marveling at the historic change such a convenient invention brought to people’s daily lives. Alien 外国的 【真题重现】: Do people benefit more from traveling in their own country than in a foreign country? 【真题运用】: Paying a visit to an alien nation makes it convenient to have direct contact with unique customs. Motivator 动力;激励因素 【真题重现】: Choosing a job: one with more vacation time, or one with high paying but less vacation time? 【真题运用】: Additionally, freedom is the best motivator for employees to work with passion and a good mood, thus enhancing their working efficiency.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E5%8A%A0%E5%88%86%E5%8F%A540%E5%8F%A5/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-综合写作范文","date":"2020/06/19","text":"Official22(TPO22)综合写作解析Ethanol fuel, made from plants such as corn and sugar cane, has been advocated by some people as an alternative to gasoline in the United States. However, many critics argue that ethanol is not a good replacement for gasoline for several reasons. First, the increased use of ethanol fuel would not help to solve one of the biggest environmental problems caused by gasoline use: global warming. Like gasoline, ethanol releases carbon dioxide into the atmosphere when it is burned for fuel, and carbon dioxide is a greenhouse gas: it helps trap heat in the atmosphere. Thus, ethanol offers no environmental advantage over gasoline. Second, the production of significant amounts of ethanol would dramatically reduce the amount of plants available for uses other than fuel. For example, much of the corn now grown in the United States is used to feed farm animals such as cows and chickens. It is estimated that if ethanol were used to satisfy just 10 percent of the fuel needs in the United States, more than 60 percent of the corn currently grown in the United States would have to be used to produce ethanol. If most of the corn were used to produce ethanol, a substantial source of food for animals would disappear. Third, ethanol fuel will never be able to compete with gasoline on price. Although the prices of ethanol and gasoline for the consumer are currently about the same, this is only because of the help in the form of tax subsidies given to ethanol producers by the United States government. These tax subsidies have cost the United States government over $11 billion in the past 30 years. If the United States government were to stop helping the producers in this way, the price of ethanol would increase greatly. 【解析】 重点词汇解析 ethanol N-UNCOUNT Ethanol is another name for . alcohol 的别称 [技术]. [有化] 乙醇， [有化] 酒精 advocate V-T If you advocate a particular action or plan, you recommend it publicly. 提 倡 [正式] 例: Mr. Williams is a conservative who advocates fewer government controls on business. 威廉斯先生是一位提倡减少政府对商业的控制的保守人士。 alternative N-COUNT If one thing is an alternative to another, the first can be found, used, or done instead of the second. 替代品 例: New ways to treat arthritis may provide an alternative to painkillers. 治疗关节炎的新方法可能会提供一种止痛药的替代品。 carbon dioxide N-UNCOUNT Carbon dioxide is a gas. It is produced by animals and people breathing out, and by chemical reactions. 二氧化碳 trap V-T When something traps gas, water, or energy, it prevents it from escaping. 留住 (气体、水或能量) 例: Wool traps your body heat, keeping the chill at bay. 羊毛织物能留住你的身体热量，阻挡寒气。 substantial ADJ Substantial means large in amount or degree. 大量的; 很大程度的 [正式] 例: A substantial number of mothers with young children are deterred from undertaking paid work because they lack access to childcare. 很多有小孩的母亲找不到人照顾小孩，从而无法从事有薪工作。 subsidy N-COUNT A subsidy is money that is paid by a government or other authority in order to help an industry or business, or to pay for a public service. 补贴金 例: European farmers are planning a massive demonstration against farm subsidy cuts. 欧洲的农场主们正在策划一场反对削减农场补贴的大游行。 参考译文 乙醇燃料是从玉米或者甘蔗之类的植物中提取的。在美国,一些人提倡使用乙醇燃料 来代替 汽油。然而,很多评论家认为一些原因使得乙醇燃料不是良好的汽油替代品。 首先,使用汽油带来的最大的问题之一是全球变暖,而对于乙醇燃料使用的增加并不能 解决 这个问题。同汽油一样,乙醇燃烧后向大气释放二氧化碳,而二氧化碳是温室气体。它会 保 持大气层内的温度。因而,相对于汽油来说,乙醇并没有环保优势。 第二,乙醇产品的大量增加会导致用于其他目的作物数量减少。比如,在美国很多的玉 米都 是用来作动物饲料来喂养牛和鸡。可以推测,如果乙醇只满足美国对燃料需要的 10%, 那 么美国就要用现在玉米产量的 60%用来制造乙醇燃料。如果把玉米产量的大部分用来生 产 乙醇燃料的话,那么家畜主要的食物来源就不复存在了。 第三,乙醇燃料燃料在价格上永远无法与汽油竞争。虽然目前对消费者来说,乙醇燃料 和汽 油的相差无几,但是只是因为美国政府以税收补贴的形式补助乙醇燃料制造商。这个税 收补 贴在过去的三十年花掉了美国政府110 亿美元。如果美国政府停止以这种形式帮助制 造商, 那么乙醇燃料的价格会大幅升高。 文章结构 中心论点 Ethanol is not a good replacement for gasoline for three reasons. 要点2 The production of significant amounts of ethanol would dramatically reduce the amount of plants available for uses other than fuel. 要点1 The increased use of ethanol fuel would not help to solve the environmental problem global warming caused by gasoline use. 要点3 Ethanol fuel will never be able to compete with gasoline on price. 综合范文【LISTENING】 Ethanol actually is a good alternative to gasoline although you just read three reasons why it is not a good alternative. Not one of these three reasons is convincing. First, the increased use of ethanol will not add to global warming. It is true that when ethanol is burned, it releases carbon dioxide into the atmosphere. But as you read, ethanol was often made from plants such as corn. Well, the process of growing the plants counteracts this release of carbon dioxide. Let me explain. Every growing plant absorbs carbon dioxide from the air as a part of its nutrition. So, growing plants for ethanol production actually removes carbon dioxide from the atmosphere. Second, large scale production of ethanol does not have to reduce the source of food for animals. That is because we can produce ethanol using cellulose. Cellulose is the main component of plants’ cell walls, and you find most cellulose in those parts of plants that are not eaten by animals. So, since we can produce ethanol from the plant parts that are not eaten, the amount of animals feed that is available will not be reduced. Third, in the future, ethanol will be able to compete with gasoline in term of price. It is true that the government subsidies make up ethanol is cheaper than it would normally be, but this support would not always be needed. Once enough people start buying ethanol, ethanol producers will increase their production of ethanol. Generally, increased production of a product leads to a drop in its price, so the price of ethanol will go down as more of it becomes available. Study shows that if ethanol production could be three times greater than it is now, the cost of producing a unit of ethanol would drop by forty percent. 【解析】 重点词汇解析 counteract V-T To counteract something means to reduce its effect by doing something that produces an opposite effect. 对…起反作用; 抵消 例: My husband has to take several pills to counteract high blood pressure. 我丈夫不得不吃几片药来抵制高血压。 absorb V-T If something absorbs light, heat, or another form of energy, it takes it in. 吸取 (光、热等能量) 例: A household radiator absorbs energy in the form of electric current and releases it in the form of heat. 家用暖气以电流的形式吸收能量，然后以热量的形式将其释放出去。 nutrition N-UNCOUNT Nutrition is the process of taking food into the body and absorbing the nutrients in those foods. 吸收营养 例: There are alternative sources of nutrition to animal meat. 有能替代动物肉类的其他营养来源。 cellulose N-UNCOUNT Cellulose is a substance that exists in the cell walls of plants and is used to make paper, plastic, and various fabrics and fibres. 纤维素 component N-COUNT The components of something are the parts that it is made of. 组成 部分 例: Enriched uranium is a key component of a nuclear weapon. 浓缩铀是核武器的一个关键组成部分。 参考译文 虽然阅读部分说乙醇燃料不是汽油很好的代替品,但是事实上是可以很好代替汽油的。阅读 部分给出的三个理由都是没有说服力的。 首先,提高对乙醇燃料的使用不会导致全球变暖。诚然,燃烧乙醇燃料的时候是会向空气中 排放二氧化碳。但是,就像在阅读部分看到的,通常来说乙醇燃料是由玉米之类的作物制 造 的。恩,这些作物生长的过程中可以抵消掉乙醇燃料燃烧所释放的二氧化碳的。我来解释 一 下。所有作物在生长的过程中都会吸收空气中的二氧化碳作为养料。所以,为制造乙醇燃 料 而种植的作物事实上可以吸收乙醇燃料排放到空气中的二氧化碳。第二,大量生产乙醇燃料不会减少畜牧业的饲料供应。这是因为我们用纤维素制造乙 醇燃料。 纤维素是植物细胞壁的主要组成成分,而且多数作物富含纤维素的部分都是家畜不 食用的。 所以,鉴于我们是使用家畜不食用的部分来制造乙醇燃料的,那么家畜可使用的饲料 不会减 少。第三,在未来,乙醇燃料可以在价格上同汽油竞争的。确实,现在政府的补贴政策使得乙 醇 燃料的价格比实际要低,但是这样的补贴政策不需要一直存在。一点有足够多的人购买乙 醇 燃料燃料,那么乙醇燃料燃料的制造商将会更多地生产。一般来说,对某产品的生产增多会 导致价格下降,所以当乙醇燃料燃料的产量增加之后,价格也会随之下降。研究表明如果乙 醇 燃料燃料产品的产量增加三倍,那么每个单位乙醇燃料燃料的价格将会下降 40%。 文章结构 中心论点None of these three reasons is convincing. 要点1 Burning ethanol will not add to global warming as the statement mentioned in the reading passage. Although burning ethanol will release carbon dioxide into the atmosphere, the growing process will counteract the effort by absorbing carbon dioxide in the air. 要点2 Producing ethanol will not reduce the amount of food for animals. In fact, the professor says we can produce ethanol by using cellule, which will not be eaten by animals. 要点3 ethanol will compete with gasoline in terms of price. The professor indicates that the continuing support for ethanol will make the production of ethanol increase, and thus the price of ethanol will decrease in the future. 范文【范文】In the lecture, the professor casts doubt on the reading passage’s idea that ethanol is not a good replacement for gasoline for three reasons. The professor asserts that none of these three reasons is convincing. Firstly, contrary to the belief in the passage that the increased use of ethanol fuel would not help to solve the environmental problem global warming caused by gasoline use, the professor asserts that burning ethanol will not add to global warming as the statement mentioned in the reading passage. Although burning ethanol will release carbon dioxide into the atmosphere, the growing process will counteract the effort by absorbing carbon dioxide in the air.Secondly, the author of the passage points out that the production of significant amounts of ethanol would dramatically reduce the amount of plants available for uses other than fuel, while the lecture notes that producing ethanol will not reduce the amount of food for animals. In fact, the professor says we can produce ethanol by using cellule, which will not be eaten by animals. Lastly, opposing the author’s belief that ethanol fuel will never be able to compete with gasoline on price, the professor contends that ethanol will compete with gasoline in terms of price. The professor indicates that the continuing support for ethanol will make the production of ethanol increase, and thus the price of ethanol will decrease in the future. 【范文结构-高分句型】 首段 passage’s idea that 阅读材料态度. The professor asserts that 听力材料态度. 第二段 Firstly, contrary to the belief in the passage that 阅读要点 1+细节 1, the professor asserts that 听力要点 1+细节 1. 第三段 Secondly, the author of the passage points out that 阅读要 点 2+细节 2，while the lecture notes that 听力要点 2+细节 2. 第四段 Lastly, opposing the author’s belief that 阅读要点 3+细节 3, the professor contends that 听力要点 3+细节 3. Official21(TPO21)综合写作解析 【READING】 Genetic modification, a process used to change an organism’s genes and hence its characteristics, is not being used to improve trees. Through genetic modification, it is possible to create trees that produce more fruit, grow faster, or withstand adverse conditions. Planting genetically modified trees on a large scale promises to bring a number of benefits. First, genetically modified trees are designed to be hardier than nature trees; that it, they are more likely to survive than their unmodified counterparts. In Hawaii, for example, a new pest-resistant species of papaya tree has been developed in response to ring-spot virus infections that have repeatedly damaged the native papaya-tree population. Planting the genetically modified papayas has largely put an end to the ring-spot problem.Moreover, genetically modified trees promise to bring a number of economic benefits to those who grow them. Genetically modified trees tend to grow faster, give greater yields – of food, fruit, or other products – and be hardier. This allows tree farmers to get faster and greater returns on their farming investment and save on pesticides as well. Finally, the use of genetically modified trees can prevent overexploitation of wild trees. Because of the growing demand for firewood or building timber, many forests around the world are being cut down faster than they can be replaced. Introducing genetically modified trees – designed for fast growth and high yield in given geographic conditions – would satisfy the demand for wood in many of those areas and save the endangered native trees, which often include unique or rare species. 【解析】 重点词汇解析 Genetic modification n. 转基因 characteristic N-COUNT The characteristics of a person or thing are the qualities or features that belong to them and make them recognizable. 特征 例: Genes determine the characteristics of every living thing. 基因决定每个生物的特征。 withstand V-T If something or someone withstands a force or action, they survive it or do not give in to it. 抵御 [正式] 例: …armoured vehicles designed to withstand chemical attack. …设计来抵御化学攻击的装甲车。 adverse ADJ Adverse decisions, conditions, or effects are unfavourable to you. 不利的 例: The police said Mr. Hadfield’s decision would have no adverse effect on the progress of the investigation. 警方说哈德菲尔德先生的决定对于调查进展不会有任何不利的影响。 counterpart N-COUNT Someone’s or something’s counterpart is another person or thing that has a similar function or position in a different place. 对应的人或物 例: As soon as he heard what was afoot, he telephoned his German and Italian counterparts to protest. 他一听到在进行中的事，马上就给德国和意大利相应人员打电话抗议。 pest-resistant adj. 抗虫害的 papaya N-COUNT A papaya is a fruit with a green skin, sweet orange flesh, and small black seeds. Papayas grow on trees in hot countries. 木瓜 infection N-COUNT An infection is a disease caused by germs or bacteria. 传染病 例: Ear infections are common in preschool children. 耳朵感染在学前儿童中很常见。 pesticide N-MASS Pesticides are chemicals that farmers put on their crops to kill harmful insects. 杀虫剂 overexploitation n.(对工人等的)过度剥削(对矿产、资源等的)过度开采，(尤指自然资源的)过度开发 参考译文 基因改良是通过改变有机体的基因,进而改变其性状的过程。目前还没有用来改良树 木。通 过基因改良,可能创造出具有产量高、生长快、抗逆强特点的树木。很大程度上,种植 基因 改良树木可以带来诸多益处。首先,基因改良树木设计得比天然树木更能承受不良环境。也就是说,相对于它们没有 改良 的同类,它们更易存活。比如,在夏威夷有一种新的抗虫害的番木瓜树。这种树可以抵抗 环 斑病毒的感染,而正是这种环斑病毒常常会降低当地番木瓜树的数量。种植这种基因改良 的 番木瓜可以很大程度上解决环斑病毒的问题。而且,基因改良的树木据信可以给种植者带来巨大的经济利益。基因改良的树木基因 改良更 快。同时,产量更高,也就是说可以获得更多的粮食、水果以及其他产品。而且,这些 树木 抗逆性更好。这样就能是的弄明可以更多而且更多地收回投资,同时节约杀虫剂的花费。最后,种植基因改良树木可以减少对野生树木的过度开发。由于对于木柴和建筑木材 的越来 越大,世界上森林砍伐的速度超过了再生速度。引入在相同地里条件下生长更快、产 量更大 的改良树木可以很多地方对于木材的需求,这样可以保护那些独特而稀少的濒危野生 树种。 文章结构 中心论点Planting genetically modified trees on a large scale promises to bring a number of benefits. 要点1Genetically modified trees are more likely to survive than their unmodified counterparts. 要点2 Genetically modified trees promise to bring a number of economic benefits to those who grow them. 要点3The use of genetically modified trees can prevent overexploitation of wild trees. LISTENING Sure, there is benefit to planting genetically modified trees, but are these trees really as great as they first sound? When you examine the subjects closely, there are some serious problems and causes associated with the using of genetic modified trees. First, genetically modified trees may be resistant to one particular condition, but it doesn’t necessarily ensure their survival. You see: a typical non-modified tree population is genetically diverse. That means that for most threatening conditions, for climate, insects, and pests, whatever, there will be at least some individual trees of any given species tree that are resistant. So, even if the most of one kind of tree were killed, those few resistant ones will survive and ensure the survival of that species of tree. But, genetically modified trees are genetically much more uniform, so if there is supposed to an environmental challenge they have not been designed for, they will all die. So, if the climate changes or new pest engages in, the genetically modified trees will likely be completely wagged out. That is the second point. There are hidden causes associated with the growing genetically modified trees. You see, the company that genetically modified tree can charge tree farmers much more for its seeds than unmodified tree seeds would cost. Also, after you’ve grown the tree, you can not just collect the seeds and plant the new tree for free. By law, you have to pay the company every time you plant. And finally, genetically modified trees might actually cause even more damage to the local wild trees. You see, genetically modified trees often grow more aggressively than natural trees do. And genetically modified trees are typically planted among natural trees. As a result, the genetically modified trees out compete the native trees for resources: sunlight, soil nutrition and water. Eventually, crowd out the nature trees. 【解析】 重点词汇解析 resistant ADJ If something is resistant to a particular thing, it is not harmed by it. 有抵 抗力的 例: …how to improve plants to make them more resistant to disease. …如何改良植物来使它们对疾病更有抵抗力。 diverse ADJ If a group of things is diverse, it is made up of a wide variety of things. 各 种各样的 例: The building houses a wide and diverse variety of antiques. 这栋楼里摆放着大量各式各样的古董。 wagged out v. 死亡 associate V-T If you associate someone or something with another thing, the two are connected in your mind. 将 (…和…) 联系起来 例: Through science we’ve got the idea of associating progress with the future. 通过科学我们已有了将进步与未来联系起来的观念。 aggressive adj. 侵略的;侵犯的;挑衅的 过分自信的，(行为等)过分的，放肆的;好寻衅的，咄咄逼人的 nutrition N-UNCOUNT Nutrition is the process of taking food into the body and absorbing the nutrients in those foods. 吸收营养 例: There are alternative sources of nutrition to animal meat. 有能替代动物肉类的其他营养来源。 参考译文 当然,种植基因改良树木是有好处的,但是真的有利到可以作为首选作物吗?当你仔细审视 这些理由的时候,就会发现基因改良树木会带来一些严重的问题。 首先,基因改良树木可能对某种特定问题有抵抗力,但是这却不足以保证它们的生存。你看, 非基因改良的树木种群是具有基因多样性的。这就意味着无论何种树木,即便是在遭遇 极端 气候灾害或者虫害的情况下,都至少有部分个体对灾害有抵抗能力。所以,即便种群中的 大 多数都死亡了,那么少数有抵抗力的存活下来也能保证这个种群的延续。但是对于基因改良 树木基因是一直的,所以当他们受到他们基因设计里不能低于的环境挑战时,他们会全部死 亡。所以,当气候发生变化或者有新的害虫出现,那么基因改良树木就将全部死亡。现在说第二点。在基因改良树木的生长过程中伴随着一些隐含问题。你看,公司都是 以高于 天然种子很多的价格向农民出售基因改良树木种子的。同时,你现在不能再每年收获 之后收 集种子,然后来年免费再种了。因为根据法律规定,你每年都必须向种子公司支付费用。最后,基因改良树木可能会对本土野生树木造成更多的损害。你看,基因改良树木相对 于天 然树木生长的更为迅猛。而且,基因改良树木一般来说跟天然树木是共同生长的。那么 结果 就是,基因改良树木会抢占天然树木的资源,诸如阳光、土壤和水等。慢慢地,基因改良 树木。 文章结构 中心论点 Planting genetic modified trees will bring potential problems and costs. 要点1 Genetic modified trees may resistant, but this cannot guarantee their survival. She points out that in fact the unity of genes within genetic modified plant will increase their likelihood to wipe out when there is some threatening situation. 要点2 Though genetic modification trees may provide more products or can save pesticide, their seeds are usually charged at a higher price. In addition, according to the law, a farmer has to pay for the seed each time they plant the trees. 要点3 Genetic modification trees tend to grow aggressively and can easily exhaust the resource of normal trees. This will bring disastrous result for the local vegetation. 【范文】3In the lecture, the professor casts doubt on the reading passage’s idea that planting genetically modified trees on a large scale promises to bring a number of benefits. The professor asserts that there are some potential problems and costs associated with planting genetically modified trees. Firstly, contrary to the belief in the passage that genetically modified trees are more likely to survive than their unmodified counterparts, the professor asserts that genetic modified trees may resistant, but this cannot guarantee their survival. She points out that in fact the unity of genes within genetic modified plant will increase their likelihood to wipe out when there is some threatening situation. Secondly, the author of the passage points out that genetically modified trees promise to bring a number of economic benefits to those who grow them, while the lecture notes that though genetic modification trees may provide more products or can save pesticide, their seeds are usually charged at a higher price. In addition, according to the law, a farmer has to pay for the seed each time they plant the trees. Lastly, opposing the author’s belief that the use of genetically modified trees can prevent overexploitation of wild trees, the professor contends that genetic modification trees tend to grow aggressively and can easily exhaust the resource of normal trees. This will bring disastrous result for the local vegetation. 范文结构-高分句型 首段 In the lecture, the professor casts doubt on the readingpassage’s idea that 阅读材料态度. The professor asserts that 听力材料态度. 第二段 Firstly, contrary to the belief in the passage that 阅读要点 1+细节 1, the professor asserts that 听力要点 1+细节 1. 第三段 Secondly, the author of the passage points out that 阅读要 点 2+细节 2，while the lecture notes that 听力要点 2+细节 2. 第四段 Lastly, opposing the author’s belief that 阅读要点 3+细节 3, the professor contends that 听力要点 3+细节 3. Official20(TPO20)综合写作解析 【READING】 In the United States, it had been common practice since the late 1960s not to suppress natural forest fires. The “let it burn” policy assumed that forest fires would burn themselves out quickly, without causing much damage. However, in the summer of 1988, forest fires in Yellowstone, the most famous national park in the country, burned for more than two months and spread over a huge area, encompassing more than 800,000 acres. Because of the large scale of the damage, many people called for replacing the “let it burn” policy with a policy of extinguishing forest fires as soon as they appeared. Three kinds of damage caused by the “let it burn” policy were emphasized by critics of the policy. First, Yellowstone fires cause tremendous damage to the parks trees and other vegetation. When the fires finally died out, nearly one third of Yellowstone’s land had been scorched. Trees were charred and blackened from flames and smoke. Smaller plants were entirely incinerated. What had been a national treasure now seemed like a devastated wasteland. Second, the park wildlife was affected as well. Large animals like deer and elk were seen fleeing the fire. Many smaller species were probably unable to escape. There was also concern than the destruction of habitats and the disruption of food chains would make it impossible for the animals that survived the fire to return.Third, the fires compromised the value of the park as a tourist attraction, which in turn had negative consequences for the local economy. With several thousand acres of the park engulfed in flames, the tourist season was cut short, and a large number of visitors decided to stay away. Of course, local businesses that depended on park visitors suffered as a result. 【解析】 重点词汇解析 suppress V-T If someone in authority suppresses an activity, they prevent it from continuing, by using force or making it illegal. 镇压; 压制 例: …drug traffickers, who continue to flourish despite international attempts to suppress them. …尽管全世界努力镇压却继续猖獗的毒贩子们。 encompass V-T If something encompasses particular things, it includes them. 包含 例: His repertoire encompassed everything from Bach to Schoenberg. 他的表演曲目从巴赫到勋伯格，样样俱全。 extinguish V-T If you extinguish a fire or a light, you stop it from burning or shining. 使熄 灭 [正式] 例: It took about 50 minutes to extinguish the fire. 扑灭那场大火花了约五十分钟。 tremendous ADJ You use tremendous to emphasize how strong a feeling or quality is, or how large an amount is. 非常的; 巨大的 [强调] 例: I felt a tremendous pressure on my chest. 我感到胸口有股巨大的压力。 scorch V-T To scorch something means to burn it slightly. 烧焦 例: The bomb scorched the side of the building. 炸弹烧焦了建筑物的侧面。 charred ADJ Charred plants, buildings, or vehicles have been badly burned and have become black because of fire. 烧焦的 例: …the charred remains of a tank. …一辆烧焦的坦克的遗骸。 blacken V-T/V-I To blacken something means to make it black or very dark in colour. Something that blackens becomes black or very dark in colour. 使变黑; 变黑 例: The married women of Shitamachi maintained the custom of blackening their teeth. 下町的已婚妇女保留了染黑牙齿的习俗。 incinerate V-T When authorities incinerate rubbish or waste material, they burn it completely in a special container. 把…烧成灰烬 例: They were incinerating hazardous waste without a licence. 他们没有许可就把危险废弃物烧成灰烬。 devastated ADJ If you are devastated by something, you are very shocked and upset by it. 十分震惊的 [v-link ADJ] 例: Teresa was devastated, her dreams shattered. 特雷莎非常震惊，她的梦想破灭了。 engulf V-T If one thing engulfs another, it completely covers or hides it, often in a sudden and unexpected way. 吞没 例: A seven-year-old boy was found dead after a landslide engulfed an apartment block. 山崩掩埋了一座公寓楼之后，一名 7 岁的男孩被发现遇难。 参考译文 在美国,从 1960 年代末开始就非常普遍地对森林大火采取不扑灭的策略。这种“随它燃烧” 的策略认为森林大火可以在不造成太多损失的情况下迅速燃烧完。然后,1988 年发生 在美 国最出名的黄石国家公园的森林大火却整整燃烧了两个月,蔓延了 80 万英亩。鉴于这 次造 成的巨大损失,很多人主张取消“随它燃烧”的策略,转而开始全力扑灭森林大火的策略。 评 论家们提供了三个由“随它燃烧”策略造成的损害来支持自己的观点。 首先,黄石大火给公园里的树木以及其他植物造成了巨大的损失。当火燃尽的时候,黄 石公 园接近三分之一的面积已成焦土。火焰烧焦树木,浓烟熏黑树木。小型植物则被彻底烧 成灰 烬。当看到宝贵的国家财富成为一片荒地的时候,会是何种感觉?第二,公园的野生动物也遭到了伤害。像鹿或者麋鹿这些大型动物在火灾中都逃脱了, 但是 很多小型动物却不能逃脱。同时,大火还破坏了动物的栖息地并打乱了食物链,这使得当 或 在结束之后,逃离的动物也无法回来栖息于此。第三,火灾会降低公园对游客的吸引力,进而对当地的经济造成不良的影响。由于数千 英亩 的土地被火焰吞没,旅游旺季缩短了,而很多游客都会选择放弃游览黄石公园。当地的经 济 对于旅游业依赖很大,自然会受到负面影响。 文章结构 The “let it burn” policy should be replaced by the policy of extinguishing forest fires as soon as they appeared. 要点2 The park wildlife was affected by the policy of “let it burn” and the fire was a destruction of habitats and the disruption of the food chain. 要点1 Yellowstone fires cause tremendous damage to the parks trees and other vegetation. 要点3 The fires compromised the value of the park as a tourist attraction. 【LISTENING】 Actually, fires are natural part of ecological cycle and their role is not just destructive but also creative. That is why the “let it burn” policy is fundamentally a good one, even if it sometimes causes fires of the 1988 Yellowstone fire. Let’s look at what happened after 1988 fire. First, vegetation. As you might imagine, scorched areas were in time colonized by new plants. As a matter of fact, the plants in Yellowstone became more diverse because the fire created an opportunity for certain plants that could not grow otherwise. For example, areas where the trees have been destroyed by the fire could now be taken over by smaller plants that needed open and shaded space to grow. And another example, seeds of certain plants species won’t germinate unless they’re exposed to very high levels of heat. So, those plants started appearing after the fire as well. It’s a similar story with the animals. Not only did their populations recover, but the fire also created new opportunities. For instance, the small plants that replaced trees after the fire created an ideal habitat for certain small animals like rabbits and hares. And when rabbits and hares started thriving, so did some predators that depended on them for food. So, certain food chains actually became stronger after the fire than they were before. And last, fires like 1988 Yellowstone fire would be a problem for tourism if they happened every year. But they don’t. It was a very unusual combination of factors that year, low rainfall, unusually strong winds, accumulation of dry undergrowth that caused fire to be so massive. This combination has not occurred since and Yellowstone has not seen such a fire since 1988. Visitors came back to the park next year and each year after that. 【解析】 重点词汇解析 ecological ADJ Ecological means involved with or concerning ecology. 生态的 [ADJ n] 例: Large dams have harmed Siberia’s delicate ecological balance. 大坝损害了西伯利亚脆弱的生态平衡。 destructive ADJ Something that is destructive causes or is capable of causing great damage, harm, or injury. 毁坏性的 例: …the awesome destructive power of nuclear weapons. …核武器可怕的毁怀性力量。 fundamentally ADV You use fundamentally for emphasis when you are stating an opinion, or when you are making an important or general statement about something. 从根 本上讲 [ADV with cl/group] [强调] 例: Fundamentally, women like him for his sensitivity and charming vulnerability. 从根本上说，女人们因他的敏感和迷人的脆弱而喜欢他。 colonize When an area is colonized by a type of plant, the plant grows there in large amounts. (植物) 在…大量繁殖 [usu passive] 例: The area was then colonized by scrub. 那时该地区被大量低矮灌木所覆盖。 germinate V-T/V-I If a seed germinates or if it is germinated, it starts to grow. 使发芽; 发芽 例: Some seed varieties germinate fast, so check every day or so. 有一些品种的种子发芽快，所以差不多每天都要察看一下。 habitat N-VAR The habitat of an animal or plant is the natural environment in which it normally lives or grows. 生长环境 例: In its natural habitat, the hibiscus will grow up to 25 ft. 在其野生环境中，木槿能长 25 英尺。 thrive V-I If someone or something thrives, they do well and are successful, healthy, or strong. 兴旺发达; 茁壮成长 例: He appears to be thriving. 他看起来兴旺发达蒸蒸日上。 predator N-COUNT A predator is an animal that kills and eats other animals. 食肉动物 例: With no natural predators on the island, the herd increased rapidly. 由于岛上没有天然食肉动物，牧群的数量迅速增加。 参考译文 事实上,森林大火是生态系统的组成部分,而且大火的角色不仅仅是破坏性的,同时也是建 设性的。这就是为什么“随它燃烧”政策基本上是正确的,尽管它导致了 1988 年黄石大火。 让我们看看 1988 大火之后发生了什么。首先,对于植物来说。你们可以想到,那些烧焦的地方随着时间的发展都会被新的植物 覆盖。 而且事实上,因为大火给一些本来难以生长的种类得以发芽,黄石的植物因此变得更具 多样 性。比如,原来长满树木的地方因为火灾遭到破坏,但现在那里长满了需要开阔而阴凉空 间 的小型植物。另一个例子是,一些植物的种子只有经受过非常高的温度之后才能够发芽。 所 以,这些植物会在大火之后开始生长。动物的情况也类似。不但动物的数量会逐步回复,而且大火会给动物的生长带来新的 机会。 比如,那些在火灾之后取代原有树木的小型植物给一些小型动物提供了极佳的栖息地, 比如 兔子。当兔子的数量开始变多,那么以它们为食的捕食者的数量也会增加。所以,大火过 后, 相应的食物链会变得比之前更加稳定。最后,只要 1988 年的黄石大火不是每年都发生,那么就不会对旅游业造成巨大问题。 而事 实上,也确实不会每年发生。大火的发生是在那一年诸多因素和偶然的相互作用。比如, 降 水少、罕见的大风,以及干燥的低层植被的聚集导致了那次大火规模空前。但是这些因素 没 有再次聚合,而黄石公园自 1988 年开始也没有出现过这样规模的火灾。游客在大火第二 年 的时候就会恢复,而且这种趋势会保持下去。 文章结构 中心论点 The arguments in the reading passage are not convincing. 要点1 The natural forest fires are a cycle of creative even they have a large scale of the damage, and after the fires,new plants which became more diverse than before existed in the Yellowstone. For example, some big plants were replaced by the small ones appeared in the Yellowstone due to the open and shaded lands. Another example is that it was a better place for certain seeds thanks to the high level of the heat. This point directly contradicts what the passage indicates. 要点2 The population had already recovered, and created some ideal habitats for the small animals such as rabbits and hares. Moreover, since the rabbits and hares began to live there, the predators who lived on them came to live in the Yellowstone, too. 要点3 The fire in 1988 was quite unusual and it did not happen every year. Moreover, the massive fire was caused by the low rain fall and the strong wind, which would not occur again. Besides, the visitors still come back to the Yellowstone next year and each year after that. 【范文】 In the lecture, the professor casts doubt on the reading passage’s idea that the “let it burn” policy should be replaced by the policy of extinguishing forest fires as soon as they appeared. The professor asserts that the arguments in the reading passage are not convincing. Firstly, contrary to the belief in the passage that Yellowstone fires cause tremendous damage to the parks trees and other vegetation, the professorasserts that The natural forest fires are a cycle of creative even they have a large scale of the damage, and after the fires,new plants which became more diverse than before existed in the Yellowstone. For example, some big plants were replaced by the small ones appeared in the Yellowstone due to the open and shaded lands. Another example is that it was a better place for certain seeds thanks to the high level of the heat. This point directly contradicts what the passage indicates.Secondly, the author of the passage points out that the park wildlife was affected by the policy of “let it burn” and the fire was a destruction of habitats and the disruption of the food chain, while the lecture notes that The population had already recovered, and created some ideal habitats for the small animals such as rabbits and hares. Moreover, since the rabbits and hares began to live there, the predators who lived on them came to live in the Yellowstone, too. Lastly, opposing the author’s belief that the fires compromised the value of the park as a tourist attraction., the professor contends that the fire in 1988 was quite unusual and it did not happen every year. Moreover, the massive fire was caused by the low rain fall and the strong wind, which would not occur again. Besides, the visitors still come back to the Yellowstone next year and each year after that. 【范文结构-高分句型】 首段 In the lecture, the professor casts doubt on the reading 首段passage’s idea that 阅读材料态度. The professor asserts that 听力材料态度. 第二段 Firstly, contrary to the belief in the passage that 阅读要点 1+细节 1, the professor asserts that 听力要点 1+细节 1. 第三段 Secondly, the author of the passage points out that 阅读要 点 2+细节 2，while the lecture notes that 听力要点 2+细节 2. 第四段 Lastly, opposing the author’s belief that 阅读要点 3+细节 3, the professor contends that 听力要点 3+细节 3. Official26(TPO26)综合写作解析 【READING】Official26(TPO26)综合写作解析The zebra mussel, a freshwater shellfish native to Eastern Europe, has long been spreading out from its original habitats and has now reached parts of North America. There are reasons to believe that this invasion cannot be stopped and that it poses a serious threat to freshwater fish populations in all of North America.First, the history of the zebra mussel’s spread suggests that the invasion might be unstoppable. It is a prime example of an invasion made possible by humantransportation. From the zebra mussel，s original habitats in Eastern Europe,ships helped spread it out along new canals built to connect Europe’s waterways. The mussel can attach itself to a ship’ s bottom or can survive in the water— called “ballast water”—that the ship needs to take on to properly balance its cargo. By the early nineteenth century, the mussel had spread to the whole of Europe. It was later carried to the east coast of North America in the ballast water of ships traveling from Europe. The way ships have spread the zebra mussel in the past strongly suggests that the species will soon colonize all of North America.Moreover, once zebra mussels are carried to a new habitat, they can dominate it. They are a hardy species that does well under a variety of conditions, and they have a high rate of reproduction. Most important, however, zebra mussels often have no predators in their new habitats, and species without natural predators are likely to dominate their habitats.Finally, zebra mussels are likely to cause a decline in the overall fish population in habitats where they become dominant. The mussels are plankton eaters, which means that they compete for food with many freshwater fish species. 【LISTENING】 Contrary to what you just read, there are ways to control the zebra mussel’s spread. What’s more, it is not so clear that the mussel is a serious threat to fish populations.True, the spread of zebra mussels couldn’t be controlled in the past, but that’s because people didn’t have enough knowledge. In fact, there are effective ways to stop ships from carrying the mussels to new locations. Here’s an example. The way zebra mussels usually travel across the ocean is that a ship takes on some fresh “ballast water” in Europe and then empties that water into American waterways when it arrives. Full of zebra mussels, but the ship can be required to empty out the freshwater and refill with ocean water while still out in the ocean. Salt water will kill the mussels.Second, it’s true that zebra mussels often don’t have predators in their new habitats, but that’s only in the beginning. What’s been happening in Europe is that local aquatic birds sooner or later notice there’s a new food source around and change their habits to exploit it. They switch from whatever they were eating before to eating zebra mussels. And birds can eat a lot of mussels. So zebra mussels aren’t so likely to dominate their new habitats after all.Finally, even in habitats where zebra mussels become dominant, is the overall fish population likely to decrease. It’s true that zebra mussels may have a negative impact on fish that eat plankton. But on other fish, they can have a positive impact. For example, the mussels generate nutrients that are eaten by fish that feed near the bottom of the lake or river. So bottom-feeding fish populations may increase, even if plankton-eating fish population decrease. 【范文】In the lecture, the professor casts doubt on the reading passage’s idea that zebra mussel poses a serious threat to freshwater fish populations. The professor asserts that zebra mussels are not likely to become a serious threat to freshwater fish populations in North America.Firstly, contrary to the belief in the passage that the invasion might be unstoppable, the professor asserts that new knowledge of the zebra mussel has shed light on new ways to prevent their invasion, even though people in the past have not been able to stop the spread of zebra mussels effectively. For instance, although a large amount of zebra mussels spread to North America by staying in the ballast water of a ship, people can now get rid of them before the ship gets to the shore – if the ballast water is emptied halfway of the journey and refreshed with sea water, the zebra mussels can be exterminated as soon as they get exposed to salt water.Secondly, the author of the passage points out that once zebra mussels are carried to a new habitat, they can dominate it, while the lecture notes that zebra mussels are not likely to dominate a new habitat for a long period of time. The lecture agrees that zebra mussels may have no predators and reproduce rapidly in the beginning, but it would not be long before predators notice this new source of food and therefore prevent its domination.Lastly, opposing the author’s belief that zebra mussels are likely to cause a decline in the overall fish population in habitats, the professor contends that zebra mussels would not cause the decline of overall fish population. While zebra mussels would most likely cause the decline of plankton eaters, as the passage suggests, they would also provide nutrients for bottom-feeding fish and eventually cause the population of those fish to increase. 【范文结构-高分句型】 首段In the lecture, the professor casts doubt on the reading passage’s idea that 阅读材料态度. The professor asserts that 听力材料态度. 第三段Secondly, the author of the passage points out that 阅读要 点 2+细节 2，while the lecture notes that 听力要点 2+细节 2. 第二段Firstly, contrary to the belief in the passage that 阅读要点 1+细节 1, the professor asserts that 听力要点 1+细节 1. 第四段Lastly, opposing the author’s belief that 阅读要点 3+细节 3, the professor contends that 听力要点 3+细节 3.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E7%BB%BC%E5%90%88%E5%86%99%E4%BD%9C%E8%8C%83%E6%96%87/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-独立范文-单一观点类2篇","date":"2020/06/19","text":"单一观点类1Do you agree or disagree with the following statement? People holding different views cannot achieve success as a team? In a team, unity is one of the most highly-valued commodities, with all members moving toward the same goal. Without their combined efforts, there is no way they could achieve that goal. Of course it is inevitable that each individual will have his own perspective and points of view. Differences of opinion should not hinder the progress of the team, but benefit group with fresh ideas. Thus, it is possible that people with different views can succeed as a team. Admittedly, some people may concern that conflicts may arise if different viewpoints are put forwarded. Immersed in a heated debating atmosphere, some sensitive individuals might lose their temper and speak ill of others rudely, giving rise to undesirable hostilities among several group members. This inevitably undermines the existing harmony within the group. Therefore, some even propose that it is the responsibility of every member to be fully aware of this while discussing controversial topics, since mental unity is one of the most desirable qualities of an efficient team. However, in a strong team where members are pursuing the same objective, different viewpoints will not necessarily have a negative effect. The prerequisite for any successful team is the unshakable goal that is shared by all. Thus, different views are unlikely to threaten the harmony and power of the entire team. In a sense, through the discussions and debates, people are provided with opportunities to get to know each other better. Thus, mutual understanding will be strengthened during those exchanges. It is also possible that stable friendships may also be established on this basis. Ample evidence can be seen in real life. I was once involved in a project that aimed at improving teaching methods. Some of my colleagues disagreed with my views, yet we managed to decide on a satisfactory plan through frequent discussions and even became good friends during the process. In addition, differences may spark debates and in-depth discussions that give birth to better ideas. It is well known that debating on controversial issues is afrequently-adopted means to provoke creative thinking. The same is true within a team. Psychologically speaking, with the objective of convincing the others of their valuable ideas, people holding different views may do their utmost to pick out the weak points of their teammates’ ideas. This helps everyone to become clearer about those ideas. As for the flaws that are revealed, they can always be improved upon. In this regard, different views may be complementary to each other. By contrast, without any different ideas being articulated, which sometimes seems to be very vital in addressing problem in a relatively more comprehensive way, members of the team are likely to fail to gain more constructive and useful viewpoints. In brief, as long as individual differences can be accepted and utilized, a team will not be negatively affected and teamwork has a promising future. Meanwhile, some open-minded team leaders might even try to encourage their members to express diversified thoughts freely. Thereafter, we may conclude that people with different views can make up a successful team. 单一观点类2Do you agree or disagree with the following statement? Because environmental issues are too complicated, individuals can do nothing to solve them. Our current environmental problems grow ever more serious. Sometimes they seem so serious and confusing that it seems an individual could never do anything to help fix the problems. Personally speaking, I believe that individuals can make a difference. There are at least two areas where the efforts of ordinary individuals can be meaningful in solving environmental issues. Admittedly, many people may hold that most people do not have the specialized knowledge and skills to tackle many issues related to the environment, which might discourage the general public to put forward any concrete proposals. Besides, people might believe that individuals do not have the influence to change entire systems since policies may be made by the authorities rather than the commonplace. However, individuals can protect environment by changing their ways of waste disposal. If every person would classify his or her garbage before throwing it away, much of it could be recycled and pollution could be reduced. Just take beverage cans as one example. Recent surveys suggest that over 7, 000 tons of waste beverage cans go un- recycled each year in America alone. The cost of finding these cans after they have been thrown away, reclassifying them as recyclable and then sending them to be recycled is far higher than simply making new ones. However, if individuals would sort their cans before they discard them, and then discard them into the proper containers, the expense of recycling would decline greatly and there would be reduction in absolute pollution caused by the beverage cans.This is just one area where an individual can make a difference. In addition, environmental problems will be somewhat resolved once individuals in society consume less energy. It is because the requirement of natural resources used to produce energy will reduce and as a result, the environmental damage human inflicts will also decline. As an academic survey indicates, if every family in American could reduce their electricity use by 5% a year, 1. 65 billion units would be saved. It means that the generator motivated by coals in the whole country can take a break for more than a month. In fact, not only can it make human’ s requirement of natural resources less, but also it can alleviate the air pollution caused by burning coals. Consequently, for winning the battle of protecting environment, individuals’ endeavor, undoubtedly, is a great strength that should not be ignored. In conclusion, I disagree with the idea that individuals can do nothing in solving environmental problems since the issues are too complicated.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E7%8B%AC%E7%AB%8B%E8%8C%83%E6%96%87-%E5%8D%95%E4%B8%80%E8%A7%82%E7%82%B9%E7%B1%BB2%E7%AF%87/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-独立范文-绝对化","date":"2020/06/19","text":"独立范文-绝对化Do you agree or disagree with the following statement? The most important investment for a big company is to improve the efficiency and proficiency of employees. The construction of superior-quality human resources is critical to a company’s sustainable development. As for an enterprise with a lager scale of working staff, investing in personnel training is particularly necessary and rewarding. Undeniably, so long as the overall ability of employees is enhanced to a higher degree, more profits might be gained and productivity can be improved at the same time. Therefore, it is a wise choice for company leaders to allocate a portion of capital on human resources improvement. However, on no account can a company neglect the significance of other investments. Admittedly, the working efficiency of employees is of irreplaceable significance to the survival and prosperity of a large enterprise. In reality, as each company has its unique cultural background and values, the work allocations in different companies are supposed to differ extensively. Every post within a business requires some special skills and knowledge that must not have been mastered before. Thereafter, it is imperative to start formal training courses to make him fully qualified to perform his assigned tasks. According to a news report in the famous journal named Business World, the salary level of certified enterprise trainers has been raised due to the increasing demand of large companies which attach great importance to the ability enhancement of their working staff. This vividly indicates that the abilities of employees are closely associated with the general interests of an entire enterprise. From this angle, the investment is absolutely practical. In fact, there are also other aspects that deserve the company’s attention and investment. For instance, a large amount of money should be invested in enterprise promotion, including TV or magazine advertisements, makingdonations to social welfare as well as taking part in diversified commercial activities. Despite the high cost, all these investments are supposed to be rewarding, for they would help lift a company’s image before the public. Besides, the perfection of a comprehensive enterprise welfare system is another investment that should not be omitted by any wise company leaders. To sum up, in-service education is of essential importance to both the employers and employees. As the major force of a big company’s further development, employees at all levels should be competent enough to perform their assigned duties. On the other hand, investing in other crucial aspects such as welfare system is also playing a indispensable part in a company’s thriving.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E7%8B%AC%E7%AB%8B%E8%8C%83%E6%96%87-%E7%BB%9D%E5%AF%B9%E5%8C%96/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-独立范文-对比类2篇","date":"2020/06/19","text":"独立范文-对比类1 Should children only play sports for fun rather than in competitions or contests? Playing sports benefits people tremendously. Not only does joining in suchphysical activities help one relax the mind and keep healthy, but it also trainshis character as well. Nowadays, a huge number of youngsters areenthusiastically taking part in various sports activities. Some adults insist thatchildren should only play sports for fun rather than competition. As far as I amconcerned, this is an extreme viewpoint. On the one hand, most children play sports because it is fun. On thecampus playground or in the courtyard, children’s laughter can be heard everynow and then when they are playing sports. Evidently, they enjoy thesemoments! This is their temporary break from the pressure of schoolwork whenthey get to participate in their favorite activities. No matter what kind ofgames they are, whether football, basketball, tennis, or some other sport, theyadore running around and feeling as free as birds. Perhaps this is just wherethe creative nature of children finds an expression. According to the statistics,7 out of 10 school- age youngsters prefer to play sports in their leisure time.This shows us how powerfully appealing sports are to children. On the other hand, I think that having an opportunity to participate ina sporting contest may be beneficial to children. As a matter of fact, inorder to become a well-balanced person, one has to cultivate strong willpowerand the ability to compete and cooperate at an early age. Taking part incompetitive sporting events is an effective method of achieving this aim. Inmost primary schools, sports meetings are being held every semester. Thisindicates that contests really benefit children in many ways. For instance,during the relay race, students gradually realize the strong power of unity andteamwork. At the starting line, each competitor is fully prepared to pass thebaton. As soon as the signal rings, they do their utmost to run to reach theirtarget. The determination to win could be traced in each team member and itbinds their hearts together. Regardless of the final result, everyone hassucceeded in gaining the experience of teamwork and of contributing theireffort. All in all, I think children should be encouraged to join in various sportingevents. In their efforts to meet the challenges that sport and teamworkprovide, they can train themselves both spiritually and physically and theirpotential as an excellent player could be discovered in the process. Thus, thereis no need to prohibit children from playing sports in contests. 对比类2 Should governments spend more money in support of arts than in support of athletics? As the cultural heritage of mankind, arts embody not merely humanintelligence and creativity, but also unique traditions. Therefore, in order topass them down from generation to generation, their purity and uniquenessshould be well protected. It is the government’s responsibility to renderfinancial support to them, especially those with historic value. The same is truewith sports. The significance of athletics has gone far beyond the primarypurpose of maintaining health and gaining strength. The thriving of a nation’ssports symbolizes the overall quality of its people and the comprehensivestrength of the country. As a result, both arts and sports should receive thegovernment’s support. On the one hand, if more official funds are created, national arts will have theopportunity to be accepted by the world. Outstanding artists or art groupsmight be sponsored on many international tours. They will be able to takeadvantage of these overseas travels to disseminate the essences and values ofthose arts and make them known to foreign friends. Once a traditional art formobtains renown abroad, its influence is considerably extended. Take BeijingOpera as an instance. If such a national treasure could be shown to othernations, it can become a window for the outside world to understand theuniqueness of Chinese culture and value. On the other hand, state sponsorship in athletics is also beneficial to both theathletes and the nation. With financial support from the government, coachesand players will have bettertraining facilities. Higher income might also improve the athletes’ living andhealth conditions. Besides, a more scientific and advanced sports system canbe established to help cultivate potential team members, who are qualified towin gold metals in international events like the Olympic games and bring gloryto the country and its people. Hence, the international image of the nation canbe remarkably lifted. Those essential qualities shown in diversified art forms should be recognizedby the public. The enhancement of sports teams demands tremendous supportfrom the government. As long as a dynamic and effective state sponsorship system could be built andfurther developed, both arts and athletics will be acknowledged and supportedby all ordinary citizens in the nation.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E7%8B%AC%E7%AB%8B%E8%8C%83%E6%96%87-%E5%AF%B9%E6%AF%94%E7%B1%BB/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-思路拓宽4-三选一类","date":"2020/06/19","text":"重点机经36-40重点机经36-40 Which one of the reason is most important in helping students to study in colleges and universities? Having access to the university tutors who can provide individual instruction for the students who have difficulty in study. Having the help and encouragement from the family and friends. Having excellent teachers in high-school who can help the students before the university. Some teenagers are free in the evenings or have days off at school, which way can bring them the most benefit? accumulating work experience by a part-time job or volunteering in a community learning to play a sport learning to play a musical instrument Which one of the following values is the most important to share with a young child(5-10 years old)? being helpful Being honest Being well organized In times of economic crisis, in which field do you think the government can cut financial support? Art Scientific research Parks and public gardens The university club wants to help others but they can only choose one project a year. If you are a member of them, which one of the following do you think is the best to choose? help young students in a nearby primary school with reading and mathematics; help people who have no place to live to find new houses for rent; visit and assist elderly people with daily tasks. 母题库 What do you think is the most important ability for a high school teacher: The ability to give good advice to students about their future plan; The ability to help students solve their problems; The ability to encourage students to study by themselves about the outside world. A school has been funding different after-school activities, but this year, because of the lack of money, the school will only fund one activity, which one do you think the school should fund: sports, art or volunteering? Do you agree or disagree with the following statement? To improve health, which of the following aspect in life would you like to make a change: Kinds of food to eat The amount of exercise The amount of stress What is the most useful way for people to help protect or improve the environment in their local communities? Plant trees and create parks; Persuade local shops to stop providing plastic bags for customers; Increase access to public transportation (such as buses and trains) in order to reduce the number of automobiles on the road What is the most important action for government to take for the protection of environmental problems? fund research on new energy sources such as solar and wind power protect forests and natural wildlife species pass and enforce laws to reduce the pollution.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%80%9D%E8%B7%AF%E6%8B%93%E5%AE%BD4-%E4%B8%89%E9%80%89%E4%B8%80%E7%B1%BB/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-思路拓宽3-绝对化类","date":"2020/06/19","text":"重点机经31-35重点机经31-35 You are helping to select a leader for a student organization or a group. Do you think a person’s honesty is the most important characteristic for being a leader? Do you agree or disagree with the following statement: Universities should require every student to take public speaking courses. Give specific examples and details to support your answer. Do you agree or disagree with the following statement? Only movies that can teach us something about real life are worth watching. Do you agree or disagree with the following statement? The most important thing that the government can do to improve health care is to clean the environment. Do you agree or disagree with the following statement: All university students should take basic science courses regardless of their fields of study.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%80%9D%E8%B7%AF%E6%8B%93%E5%AE%BD3-%E7%BB%9D%E5%AF%B9%E5%8C%96%E7%B1%BB/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-思路拓宽2-单一观点类","date":"2020/06/19","text":"重点机经16-20重点机经16-20 Recently some students need to arrive at school early in the morning. Some people think that starting school day early is a good approach to support learning, while others think it should be a better idea for students to attend school at a later time. Which view do you prefer and why? Do you agree or disagree with the following statement? High school students should be required to learn many subjects at the same time instead of concentrating on only three or four subjects at a time. Do you agree or disagree with the following statement? Students should take at least one year to work or travel before they go to universities. As a student of university that has a long break between university semesters, the university requires all students to do one of the following for one month during the break: Students must take a course on the subject that has no direct connection to their majors of study ; Students must volunteer to work in the university’ s city or their hometowns to improve some aspects of life of the city or their own town. - Which one do you think is more beneficial for students in their university? Why? Do you agree or disagree with the following statement: The way a person dresses is a good indication of his or her personality or character. 重点机经21-25重点机经21-25 Should parents help children with their schoolwork or encourage them to work independently. Do you agree or disagree: It is impossible to always be completely honest with your friends? At some universities, students take part in making decisions about the issues that affect daily life of everyone on campus, such as how many hours that the libraries should be open each day or what kinds of food should be served in the cafeteria. But at some universities, experts are hired to make these decisions, students almost never involved. Which approach do you prefer and why. Do you agree or disagree with the following statement? Sports teaches us lessons about life. Which one do you prefer? 1) A company which offers you a job with challenging and interesting project but less vacation days or 2) Another company which offers you a job that is not so challenging and interesting but have more vacation days. 重点机经26-30重点机经26-30 Do you agree or disagree with the following statement? The competition between friends always has a negative effect on their relationship. A city wants to improve the education of high school students(aged 14 to 18), and there are two plans: A.Choosing a group of excellent teachers to attend lectures given by experts, and then let them go back to their own schools to train other teachers. B. Providing training for every teacher online, offering online materials and letting them study individually. Which do you think is better? Should the government cover the Internet fee or should individuals pay the Internet fee? Some people like to buy and eat their meals at restaurants frequently, while others like to do this at home. Which do you prefer? Why? Some people think that we should keep away from others to improve our relationship, because being away from people reminds us of how important they are. Others think we should always stay with others to have good relationship because we can communicate with them more often. What do you think? 母题库 Do you agree or disagree with the following statement? The more money people have, the more they should give away to charity. Do you agree or disagree with the following statement? It is often not a good thing for people to move to a new town or a new country because we may lose our old social connection. Do you agree or disagree with the following statement? Some people think that some lessons for young children (age 5-8) which include video games can serve as effective and interesting ways of learning, while others think that these lessons are quite distracting and can be seen as a waste of time. What is your opinion and why? Do you agree or disagree with the following statement: People should be open to new ideas and change their minds to be successful. Do you agree or disagree with the following statement? Young people should take several different kinds of jobs before they decide which career to pursue in the long term.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%80%9D%E8%B7%AF%E6%8B%93%E5%AE%BD2-%E5%8D%95%E4%B8%80%E8%A7%82%E7%82%B9%E7%B1%BB/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-思路拓宽1-对比类","date":"2020/06/19","text":"对比类机经1-5题重点机经1-5题 Do you agree or disagree with the statement? Schools should require young children (aged 5-11) to work together in a small group instead of working alone to learn many activities. Do you agree or disagree with the following statement? Your job has more effect on your happiness than your living environment does. Do you agree or disagree with the following statement? It is more important to watch or read news presented by people whose views are different from your own than watch or read the ones presented by people whose views are similar to your own. Do you agree or disagree with the following statement: People who try to acquire more than one skill are more likely to become successful than people who just focus on one skill. Do you agree or disagree with the following statement? When working on a project, it’s better for classmates or colleagues to communicate face to face than sending emails. 对比类机经6-10题重点机经6-10 Do you agree or disagree with the following statement? Instead of spending money on exploration of outer space, government should spend money on the environment. Do you agree or disagree with the following statement? It’s better to spend money enjoying life like going on vacation than to save money for the future. Do you agree or disagree with the following statement? It is more important for the government to spend money on the construction of art museums and concert halls than on recreational facilities like swimming pools and playgrounds. Do you agree or disagree with the following statement? It’s better to complete a project and then start another one than to do several things at the same time. Do you agree or disagree with the following statement? Movies and televisions have more negative influences than positive influences on young people’s behavior. 对比类机经11-15题重点机经11-15 Do you agree or disagree with the following statement? Advice from older friends is more valuable than that from friends at the same age. Do you agree or disagree with the following statement? The reading materials chosen by students on their own is more important than those assigned by their teachers. Do you agree or disagree with the following statement? It is better to take risks and try new things for the young than for the elderly. Some people think that it is an important part of a child’s education to go on field trips (for example, museums), other people think a child’s time is better spent learning in a classroom at school. What is your opinion? Do you agree or disagree with the following statement: it’s better to make friends with intelligent people than with people who have a sense of humor? 母题库 Do you agree or disagree with the statement? To remain happy and optimistic when you fail is more important than achieving success. Do you agree or disagree with the following statement? Children rely too much on the technology, like computers, smart phones, video games for fun and entertainment. Playing simpler toys or playing outside with friends would be better for children’s development. Do you agree or disagree with the following statement? Students should be encouraged to study those filed like science, technology, engineering, and math(STEM) rather than they have interest in. . Do you agree or disagree with the following statement: Some people think that it is an important part of a child’s education to go on field trips (for example, museums), other people think a child’s time is better spent learning in a classroom at school. What is your opinion? . Do you agree or disagree with the following statement? The government should spend money helping more people access the Internet instead of improving public transportation.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%80%9D%E8%B7%AF%E6%8B%93%E5%AE%BD1-%E5%AF%B9%E6%AF%94%E7%B1%BB/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-朗读5","date":"2020/06/19","text":"为什么应该涉猎不同学科Secondly, studying broad subjects may help arouse the students’ interest in learning, while limiting to one specific field may sooner or later result in boredom. Interest is the best teacher. The involvement in a variety of different subjects broadens students’ knowledge base and opens their minds. They are endowed with the opportunity to master the essences of different subjects. As soon as a natural association between subjects is uncovered, enthusiasm may be sparked. We could easily imagine the delightful moment when a familiar term typical to chemistry is encountered while reading an article in a textbook of biology. 体育教会我们哪些道理Above all, playing sports shows us an important truth that life is always in motion. This famous notion was first brought up by a French thinker named Voltaire. Such an idea is simple in words but deep in meaning. The globe is turning nonstop; the sun rises in the east and sets in the west day after day; rivers are flowing towards the sea; time is passing; all living creatures are growing…all these events justify Voltaire’s concept. Indeed, motion is the prerequisite of life, without which all living beings would perish and the whole universe would no longer exist. Taking part in any sport, like playing basketball, swimming, diving, playing golf, or running, involves body movements and physical strength, which in turn constitutes an indispensable benefit to one’s life. Health is a determinant factor in sustaining life and allowing it to continue. Playing sports is an effective way of keeping people healthy enough to progress smoothly in their life. 并非所有机遇都会带来成功As a matter of fact, not all opportunities lead to success. We should hold an objective attitude about the relationship between favorable chances and success. Kevin Geary used to say, “Success happens not by chance, but because you were given a chance and took advantage of it.”In other words, meeting an opportunity is only a stepping stone toward a potential future success. Showing off before certain people and letting them know one’s strong points might be helpful, but is by no means a decisive factor that directly leads to prosperity. If a person manages to convince an influential figure of his merits and achievements, he is more likely to be promoted to a higher position or work on an important project. That indeed paves the way to his success. Nonetheless, suppose this person becomes overly self-contented and stops making great efforts? Then the blessed opportunity will be wasted. No matter how brilliant his past used to be, his future will not be promising. Therefore, seize the opportunity and continue to work diligently, as this is the key to success. Neither step should be neglected. 高工资也意味着大压力Conversely, high salary is often associated with high pressure and risk at work. Too much pressure undermines people’s health. Less time is available for them to rest and enjoy life. In consequence, people may suffer from sleeplessness and headache. Statistics show that people under heavy workload have a higher risk of heart diseases and hypertension, major threats to the lifespan of modern white collar workers in large cities around the world. Furthermore, excessive pressure may also lead to psychological problems. In some cases, unable to put up with tough tension, some employees may go to extremes and even commit suicide.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%9C%97%E8%AF%BB5/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-朗读4","date":"2020/06/19","text":"家长不应该只关注孩子的成绩In this world of multiple-choice tests, children’s skills are developed unevenly, hampering them from developing their full potential. By focusing only on studying, parents lose sight of the fact that study is only one aspect of education and development. Worse, by judging the children by his or her test scores, parents make them insecure. Parents should focus on developing all of their child’s skills and increasing his or her self-esteem. In short, giving a good education to the child is not only on the basis of financial investment but on the basis of attaching importance to their skill development. So it can be cheaper and get twice the result with half the effort 政府该在保护环境上下点功夫Likewise, environmental preservation is also of vital importance. In reality, the unprecedented environmental problems are closely associated with economic and scientific advancement, thus demanding attention from the government. To illustrate, among these issues, the most noticeable ones include air and water pollution caused by industrial waste, global warming, acid rain, land depletion, rainforest destruction as well as the excessive consumption of natural resources. Undeniably, no individual is capable of handling all these disasters without tremendous official support. It is the government’s responsibility to implement effective policies and take immediate measures to combat these hazards. Moreover, efforts should also be made to increase the awareness of the public to participate in these activities to preserve the environment and avoid further problems 广告导致人饮食不健康Admittedly, advertising is a possible channel that misleads people into bad eating habits. The masses may have access to numerous food advertisements while watching TV or browsing through newspapers and magazines. In order to establish a good image before the public and make the biggest profits, food producers or restaurants are exaggerating the quality of their products and services. Thus, a number of people, especially children, are attracted to buying more snacks or eating more junk food like McDonald’s. These are all harmful to a person’s healthy diet. 友谊如此珍贵Above all, friendship is the most treasured gift life renders to an individual. Therefore, everyone should appreciate and thoroughly comprehend the essential value of friendship. Alfred Capus used to say, we choose our friends by instinct, but we keep them by judgment. With the purpose of making the priceless friendship last longer, it is necessary to learn to evaluate the inner qualities of a potential friend. Recognizing the value of friendship just constitutes an effective way to select a most deserved friend. As a matter of fact, honesty stands out as the most fundamental element that maintains good friendship. Mutual understanding and trust, as well as the willingness to offer emotional support in time of difficulties contribute tremendously to maintaining the solidity of friendship. Furthermore, heart-to-heart compassion and the enjoyment of companionship with each other are also desirable qualities of pure friendship.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%9C%97%E8%AF%BB4/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-朗读3","date":"2020/06/19","text":"小孩为什么要尽早学外语In the first place, childhood is the best period for language learning. Research indicates that the brains of children are in a superior state to grasp the essences of a language. With a faster reaction speed and better memories, it can be much easier for them to assimilate basic grammatical points and remember new words and phrases. What’s more, children are extremely good at imitating others. Thus, by listening to recorded texts, they can follow the speaker in the tape and imitate the voice repeatedly. As time goes by, they will gradually speak what has been stored in their mind. As soon as they have accumulated enough vocabulary and expressions, they may use them bravely in spite of possible mistakes. These are all key elements that lead to progress in learning a language. Such a learning process is more effective in children than in adults. 网络也给学生带来坏习惯The first major problem with the internet is that as an education tool, the internet creates more problems than it solves. Surfing the web does not always teach students useful lessons. More often, it teaches them the wrong lessons. It is silly to teach students to use calculators when they still cannot count properly. Additionally, internet teaches students bad habits such as impatience. It is very fast so students do not have to wait long. As a result, they become impatient and demanding. On-line students learn that social skills are not important because they can ask a machine instead of a classmate or teacher. 市场经济使得终生聘用不切实际Nonetheless, the market-based economy today makes life-long employment unrealistic. A series of complicated social elements are the major obstacles that force job hunters or employees to give up the ideal of a life-long position. To illustrate, modern economy can never do without personnel transfer, which is the symbol of a vigorous job market. The growing number of candidates has made the competition fiercer than before. As a result, even if one succeeds in filling a long-term post, he is still faced with unexpected challenges from other employees or new job hunters. Besides, the prosperous economic environment encompasses more potential opportunities for the working class. Whenever a better job opportunity in a different company appears, few people would wait around, but would strive to improve their situation instead. 一切为了“考试”的弊端In many cases teachers are encouraged to teach only material that will be seen on certain standardized tests. For this reason, teachers are forced to extract superfluous material from the course. So, teachers focus only on specific items from the test. Students are encouraged to memorize isolated facts and regurgitate short responses. In an article published by the Fair Test organization, this method is called “teaching the test.” Teaching the test seems to be conducive to improving test-taking skills but real academic progression is not always represented.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%9C%97%E8%AF%BB3/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-朗读2","date":"2020/06/19","text":"教育的意义Education is one of the most important tools that the society possesses. The right implementation of this tool is one of the greatest ways of assuring the quality of life within a society. At its most basic definition, education is nothing more than the teaching of ideas. The early stages of schooling instill more attitude and social skills than knowledge. As the age and skill level of the student increases, more education is based upon the interest of the student. 学校有没有必要存在School education always is, and will remain, essential for children’s upbringing, because it is not only a platform to impart knowledge but also a stage to educate an individual about values and attitudes, rights and wrongs, goods and evils. At school, children, encouraged by their teachers and accompanied by their peers, can benefit in a wider range. They are more likely to be sociable and outgoing, cooperative and tolerant. On the other hand, the Internet can hardly serve these functions. Even if it provides information about role samples, about moral classes, it is not up to children to choose from these “goods” and those unsuitable “evils” online, for children are not mature enough to make a good judgment and their parents, always busy working, are absent from home. 教室外教育的重要性Secondly, outdoor education may provide ample opportunities for the students to turn the assimilated knowledge into practice. Theories are only valuable after being used in reality. The limitation of classroom teaching is getting more and more apparent than ever. People are gradually aware of the possible growth of doctrinairism that threatens the efficiency and importance of indoor education. A most popular trend among college students is to take part- time jobs after class. It is not merely a means of earning money, but an effective way to use knowledge in real life. They may become teachers, tour guides or even designers in some companies. This mode of education prepares them for future career. Therefore, We should never underestimate its significance. 作业重要吗Primarily, homework helps the students to review what has been learned and prepare for the new. Needless to say, a period of time is needed to carefully digest the accumulated knowledge. Doing homework is an effective way to assimilate knowledge. Through having a suitable amount of exercises and memorizing tasks, further comprehension is obtained. Afterwards, a brief preview familiarizes the students with the new knowledge, thus making it easier for them to understand what will be taught the next day. According to a report from a major education website, over 90% of high school teachers assign homework every day. Many of them agree that students who can actively complete their homework are more able to make progress in their studies.","permalink":"http://catzillaorz.github.io/2020/06/19/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C-%E6%9C%97%E8%AF%BB2/","photos":[]},{"tags":[{"name":"Klingon","slug":"Klingon","permalink":"http://catzillaorz.github.io/tags/Klingon/"},{"name":"Language","slug":"Language","permalink":"http://catzillaorz.github.io/tags/Language/"}],"title":"Klingon Pronunciation 1","date":"2020/06/12","text":"Pronunciation 1 This unit will teach you the sounds of Klingon. Don’t worry if you can’t say or hear them perfectly to begin with. Keep practising and you will get it. Much as the letter “H” in English has a name (“aitch” or “haitch”), or “Y” is “wye” and “W” is “double-you”, so Klingon letters also have names. The vowels are called ‘at ‘et ‘It ‘ot ‘ut, the consonants by adding -ay to the consonant sound, e.g. m is called may (sounds like English my) and tlh, tlhay. Translate those names as “the letter a”, “the letter D”, “the letter tlh”, etc. This lesson also teaches the word mu’ which means “word”. General notes on pronunciation: Letters b, l, m, n, p, t, & v are said as in English, but b, p & t should always have a puff of air, even at the end of a word. Vowels each have one pronunciation.a as in fathere as in tenI as in ito as in bowlu as the oo in pool I is uppercase to remind us that it is different from the pattern of 5 vowels we often see in foreign languages. The vowel I (capital i) never has an adjacent vowel and the consonant l (small L) will always have at least one adjacent vowel. Also note the small curl at the bottom of the l (small L) and absent from the I (capital i). w & y are as in English at the beginnings of syllables and form a combined sound called a diphthong at the ends. At the end of a syllable w sounds like the vowel u & y sounds like “ee”. So paw sounds like “pow” & pay sounds like “pie”. ch is said as in the English word “church”. Never like an English “k” nor “sh”, & never like a German, Scottish, nor Hebrew “ch”. Please note that ch is a single Klingon consonant. j should be said hard like the beginning & end of the English word “judge” & never with the softer sound from French. ‘ represents a sound we make a lot in English. We don’t usually mark it in English, but in Klingon it is a full letter & leaving it out is like missing any other letter from a word. We call this a qaghwI’. It is made by closing the throat & is described as a glottal stop. You can experience it in the middle of the word “uh-oh”. That stop between syllables is a glottal stop. You may notice that you also close the throat at the beginning of “uh-oh” and all English words that start with a vowel. The Klingon word ‘ej sounds exactly like the English word “edge”. r is not usually said at the roof of the mouth like an American English “r”, but with the tip of the tongue behind the teeth like a Spanish “r”. ng is said exactly as in English, but many English speakers are not used to it at the beginning of a word. Put the back of your tongue to the roof of your mouth to make this sound. Please note that ng is a single Klingon consonant. q sounds much like an English “k”, but is said from the back of the throat. The q does not include the “w” sound as in English words that begin with “qu” and even when q is followed by u, the two sounds do not blend. The Klingon word qul (“fire”) should sound like the English word “cool”, but with a stronger “c” sound. This is a different letter than the Q which is explained below. D in Klingon sounds very similar to the English “d”, but should be said with the tip of the tongue further back in the high roof of the mouth and is capitalized to help us remember the difference. S is similarly said with the tip of the tongue further back in the high roof of the mouth. It winds up sounding a little bit like an English “sh”, but should never be said like an “sh”. The S is also capitalized to help us remember the different pronunciation. gh is produced at the top of the throat with a raspy gargle or purr and a voiced vibration in the throat. Please note that this is a single Klingon consonant. H is pronounced in the same position as the gh but without the voiced vibration. It is very similar to the “ch” heard in Scottish “loch”, Hebrew “l’chaim”, & German “Bach”, though it is usually pronounced a little further back and a little stronger than those sounds. It is capitalized to remind us not to pronounce it like the weak English “h”. When you see a lower-case “h” it will always be part of one of the consonants ch, gh, or tlh. Q is different than q, but it is similar in that it is a sort of a combination of the q sound and the H sound. It should start with the throat closed like you are going to make a q, but then explode into a raspy H-type sound. tlh is another sound not made in English. It sort of explodes like a “t”, but out the sides of the tongue like an “l”. Note that this is one consonant in Klingon and is the only time you will see a l (lower-case L) without at least one vowel next to it. readmore Example sentences tlhIngan Hol Dajatlhʼaʼ? Do you speak Klingon? jIyajbeʼ. I don’t understand. Dochvetlh vISoplaHbeʼ. I can’t eat that thing. bIlughbeʼ. You are wrong. bortaS bIr jabluʼDIʼ reH QaQquʼ nayʼ. Revenge is a dish best served cold. (lit: When cold revenge is served, the dish is always very good) HeghluʼmeH QaQ jajvam. Today is a good day to die.","permalink":"http://catzillaorz.github.io/2020/06/12/Klingon-Pronunciation-1/","photos":[]},{"tags":[{"name":"Language","slug":"Language","permalink":"http://catzillaorz.github.io/tags/Language/"},{"name":"Russian","slug":"Russian","permalink":"http://catzillaorz.github.io/tags/Russian/"}],"title":"俄语-Alphabet 1","date":"2020/06/12","text":"Alphabet 1We’ll start with some simple sentences right away. Russian does not have articles, nor does it normally use the verb “to be” in the Present tense. An em-dash is used instead of the verb “to be” between the two nouns: «Мокка — кофе» (“A mocha is coffee”).Russian uses a version of the Cyrillic Alphabet. Many letters look similar to their Latin counterparts. As Cyrillic typography was remodeled around 300 years ago, both alphabets have a similar style. For information on how to install a Russian keyboard layout, please click here. Letters and SoundsК, О, М, Т, А sound similar to their Latin counterparts (to be more precise, “о” is the sound in “more”). However, in handwriting and typed italics, the letter Т can look rather like a lower case ‘m’ in the Latin alphabet. E.g. in the verb просить (to ask for, to request), т = t. Е actually sounds more like “ye”, as in “yell”, not as in “Hear ye, hear ye!” (this will work for now; it’s more complicated after a consonant). В sounds like ‘v’, Б sounds like ‘b’. Н is “n” and И is “i” (‘eeh’). The remaining letters are included in the table below: Ёё⁰ (your) Вв (vase) Бб (bed) Ээ (red) Нн¹ (nap) Дд¹ (dab) Уу (soon) Хх² (Bach) Гг (gap) Ии (meet) Йй (yes) Лл¹ (nil) Юю (you) Рр (trilled R) Пп (poor) Ыы³ (hit) Сс (Sam) Зз (zebra) Яя (yard) Фф (photon) Цц (cats) Жж⁴ (seizure) Шш⁴ (shun) Щщ⁴ Чч (cheer) Ъ and Ь⁵ ⁰ Ёё The umlaut-like double dots are optional in writing. Syllables containing this letter are always stressed. ¹ т, д, н, л are pronounced near your teeth. ² х(‘kh’) is somewhat similar to the H in “hue”. It is like making the “sh” sound, only it is pronounced where you make the “K” sound. ³ ы has no equivalent in English. It is an “eeh”-like sound, but less distinct, sounds closer to “e” in “lover”, and has your tongue deeper that in “heat” or “hit”. ⁴ for ш and ж your tongue is lower than in English and slightly bent back. Щ has all your tongue raised—it is a longer and more hissy sound. Ч corresponds to щ (i.e. a bit different than “ch”). ⁵ ъ and ь are separators and have no sound. Л can have a flat top, like П, or a pointy top like А (it comes from the Greek Λ). Д and Л have a similar top in many fonts, though it’s up to the designer. Handwritten Д looks like D, and д like a g or a д (the last two affect the italic shapes). An Italic Г in lower case usually looks this: г. That’s it with the introduction! We will discuss reading words in more detail in later skills. P.S. In our notes, we use an accute accent to show you the stress (e.g., ра́дио). It is a standard practice in Russian textbooks for little children or foreign learners—and, generally, the most common way of marking the position of the stress.","permalink":"http://catzillaorz.github.io/2020/06/12/%E4%BF%84%E8%AF%AD-Alphabet-1/","photos":[]},{"tags":[{"name":"Klingon","slug":"Klingon","permalink":"http://catzillaorz.github.io/tags/Klingon/"},{"name":"Language","slug":"Language","permalink":"http://catzillaorz.github.io/tags/Language/"}],"title":"Klingon Start Lesson 1","date":"2020/06/06","text":"Useful phrasesQumwI’ yIchu’! (“Activate communicator!”) Hello and welcome to Duolingo’s course in Klingon! We’re excited to bring the language of the future to your primitive technical devices! We would like to tell you “Hello and welcome” in Klingon, but as you will see, Klingon does not have equivalents to those words. Klingons tend to be very direct and rarely engage in conversation simply for the pleasure of conversing, making superfluous many of the pleasantries we are accustomed to using in English. In this part of the course, we will focus on getting you using Klingon right away by introducing useful phrases. The grammar for these phrases will be explained in future lessons. AlphabetThe Klingon alphabet has the following letters: a b ch D e gh H I j l m n ng o p Q q r S t tlh u v w y ‘. Note that case matters: many letters are always lowercase (even at the beginning of a sentence!) and some are always uppercase. Note I (capital i) versus l (small L) - the second has a small curl at the bottom in Duolingo’s website font. Q and q are two separate letters. ch gh ng tlh count as single consonants in Klingon. And ‘ (the apostrophe) also counts as a letter. It represents a glottal stop. More about pronunciation will be presented in the “Sounds” Skill. nuqneH & nuqjatlhnuqneH is a truncated form of nuq DaneH, meaning “What do you want?” It is a common misconception that this is “the Klingon word for hello”. In fact, Klingons have no word for hello. If a Klingon wishes to say something, they’ll walk up to you and say it, without wasting time - as they see it - on idle chatter. nuqjatlh? is a truncated form of nuq Dajatlh?, meaning “What did you say?” Qapla’Klingon for “success”. This word is often mistranslated as “Goodbye”, due to the fact that it is often heard at the end of conversations. In fact, Klingon has no word for “Goodbye”, but Qapla’ is often used either to congratulate somebody on their success or to wish them success in the future. VideoQuvar - also known as the Klingon Teacher from Germany - has produced an informative video about the words nuqneH and Qapla’, available in both English and German. VerbsKlingon verbs do not have tense (past, present, future), so a verb such as yaj could mean “understands, understood, will understand”. They do have aspect (e.g. whether an action is completed or is continuous), but that will come later in the course. For now, translate verbs as non-continuous forms (e.g. “he walks” or “he walked”, not “he is walking” or “he was walking”) until the continuous aspect is introduced. In grammar, a subject is the one doing the action and an object is the one the action is done to. Klingon verbs show the subject and the object of verbs by means of prefixes. The most important verb prefixes at the beginning of the course are: jI- = I (subject), no object bI- = you (subject), no object – for one person vI- = I (subject), him/her/it/them (object) Da- = you (subject), him/her/it/them (object) – for one person If the subject is third person (he/she/it/they) and has either no object or a third-person object (him/her/it/them), then the verb has no prefix. (With the exception of “they - him/her/it”, which you will learn later). So a verb such as yaj can mean “he understands; she understands; it understands; they understand; he understands him/her/it/them; she understands him/her/it/them; they understand them”, or the same in the past or future. Because of the verbal prefixes, the subject and/or object does not have to be included as a pronoun, and subject or object pronouns are often left off. Torg and MaraIn this lesson, you will meet Torg and Mara. They will appear in many sentences where a name is useful. (Later on, more names will appear, too.) Torg is male and Mara is female - though that fact is not important to Klingon grammar, as there are no separate words for “he” and “she”, or different verb prefixes or suffixes depending on gender. Joining nouns with and without “and”Nouns are joined with je, which comes after the nouns, as in torgh mara je “Torg and Mara”, or Hol pong je “the language and the name”. If there is no je after two nouns next to each other, the effect is similar to possession: mara pong “Mara’s name”; tlhIngan Hol “a Klingon’s language, the Klingon language”. Word orderKlingon word order in a sentence may seem like the opposite of English word order - first comes the object (if any), then the verb, then the subject. So a sentence such as mara legh torgh means “Torg sees Mara”. Computer translationsYou may be tempted to use computer translators, like Bing. Just don’t! The quality of Klingon machine translation is almost always very bad. Don’t report sentences from there.","permalink":"http://catzillaorz.github.io/2020/06/06/Klingon-Start-Lesson/","photos":[]},{"tags":[{"name":"符号","slug":"符号","permalink":"http://catzillaorz.github.io/tags/%E7%AC%A6%E5%8F%B7/"},{"name":"math","slug":"math","permalink":"http://catzillaorz.github.io/tags/math/"}],"title":"数学基础","date":"2020/06/05","text":"数学基础-符号 总结数学中常用到的符号与公式 数学符号 用于数学、科学和工程的希腊字母","permalink":"http://catzillaorz.github.io/2020/06/05/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/","photos":[]},{"tags":[{"name":"SPA","slug":"SPA","permalink":"http://catzillaorz.github.io/tags/SPA/"}],"title":"微前端-qiankun2.0","date":"2020/05/22","text":"Why not Iframe为什么不用 iframe，这几乎是所有微前端方案第一个会被 challenge 的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 “炫技” 或者刻意追求 “特立独行”。 如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。 iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。 总结为以下几点（不包括全部）： url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。 UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中.. 全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。 慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。 其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。 目标是最完善的微前端解决方案 - qiankun 2.02019 年 6 月，微前端框架 qiankun 正式发布了 1.0 版本，在这一年不到的时间内，我们收获了 4k+ star，收获了来自 single-spa 官方团队的问候，支撑了阿里 200+ 线上应用，也成为社区很多团队选用的微前端解决方案。 qiankun@2.0 带来了一些新能力的同时，只做了很小的 API 调整，1.x 的用户可以很轻松的迁移到 2.x 版本，详细信息见下方 升级指南 小节。 qiankun 简介微前端是最近一年国内前端领域被频繁提及的关键字，虽然它并不是一个全新的领域/技术，但很显然在当今越来越多的前端应用即将步入第 3 个、第 5 个甚至更久的年头的背景下，如何给 巨石应用/遗产应用 注入新鲜的技术血液已经成为我们不得不正视的问题，而微前端正是解决这类问题的一个非常合适的解决方案。 qiankun 是一个生产可用的微前端框架，它基于 single-spa，具备 js 沙箱、样式隔离、HTML Loader、预加载 等微前端系统所需的能力。qiankun 可以用于任意 js 框架，微应用接入像嵌入一个 iframe 系统一样简单。 定位变化qiankun 2.0 带来的最大变化便是 qiankun 的定位将由 微前端框架 转变为 微应用加载器。 此前 qiankun 的典型应用场景是 route-based 的控制台应用，做为一个微应用的聚合框架而被使用。 如上图所示，在这种场景下，一个负责聚合与切换的主应用 与 多个相互独自的微应用 一起构成了整个大的微前端应用，一般来说页面上活跃着的也往往只有一个微应用。 而这是微前端的场景之一，在另外一些场景下，你应该可以在同一个页面中，加载多个不同的微应用，每个微应用都是主应用的组成部分 或者是 提供一些增强能力，这种场景可以说是微应用粒度的前端组件化。 因此，qiankun@2.0 将跳出 route-based 的微前端场景， 提供更加通用的微应用加载能力，让用户可以更加自由的组合微应用来搭建产品。 Readmore支持多应用并行及多实例沙箱, 支持手动 加载/卸载 微应用,支持 IE11 沙箱兼容, 官方的极简微应用通信方案, 支持基于 Shadow DOM 的样式隔离","permalink":"http://catzillaorz.github.io/2020/05/22/%E5%BE%AE%E5%89%8D%E7%AB%AF-qiankun%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","photos":[]},{"tags":[{"name":"SPA","slug":"SPA","permalink":"http://catzillaorz.github.io/tags/SPA/"}],"title":"微前端-Single-SPA","date":"2020/05/22","text":"JavaScript 微前端Single-spa 是一个将多个单页面应用聚合为一个整体应用的 javascript 微前端框架。 使用 single-spa 进行前端架构设计可以带来很多好处，例如: 在同一页面上使用多个前端框架 而不用刷新页面 (React, AngularJS, Angular, Ember, 你正在使用的框架) 独立部署每一个单页面应用 新功能使用新框架，旧的单页应用不用重写可以共存 改善初始加载时间，迟加载代码 架构概览Single-spa 从现代框架组件生命周期中获得灵感，将生命周期应用于整个应用程序。 它脱胎于 Canopy 使用 React + React-router 替换 AngularJS + ui-router 的思考，避免应用程序被束缚。现在 single-spa 几乎支持任何框架。 由于 JavaScript 因其许多框架的寿命短而臭名昭著，我们决定让它在任何您想要的框架都易于使用。 Single-spa 包括以下内容: Applications，每个应用程序本身就是一个完整的 SPA (某种程度上)。 每个应用程序都可以响应 url 路由事件，并且必须知道如何从 DOM 中初始化、挂载和卸载自己。 传统 SPA 应用程序和 Single SPA 应用程序的主要区别在于，它们必须能够与其他应用程序共存，而且它们没有各自的 html 页面。 例如，React 或 Angular spa 就是应用程序。 当激活时，它们监听 url 路由事件并将内容放在 DOM上。 当它们处于非活动状态时，它们不侦听 url 路由事件，并且完全从 DOM 中删除。 一个 single-spa-config配置, 这是html页面和向Single SPA注册应用程序的JavaScript。每个应用程序都注册了三件东西 A name A function (加载应用程序的代码) A function (确定应用程序何时处于活动状态/非活动状态) 推荐设置 single-spa 核心团队已经汇总了文档，工具和视频，展示了当前使用single-spa鼓励的最佳实践。 查看这些文档以获取更多信息。 The Recommended Setup Alternatives qiankun is a popular alternative to this recommended setup. Isomorphic Layout Composer - complete solution for Micro Frontends composition into SPA with SSR support In-browser versus build-time modules Tutorial video: Youtube / Bilibili READMORE examples Video tutorials single-spa 生态系统 微前端在小米CRM系统的实践","permalink":"http://catzillaorz.github.io/2020/05/22/%E5%BE%AE%E5%89%8D%E7%AB%AF-Single-SPA/","photos":[]},{"tags":[{"name":"Debug","slug":"Debug","permalink":"http://catzillaorz.github.io/tags/Debug/"}],"title":"VSC Debug完全指南","date":"2020/05/18","text":"vsc debug 完全指南 - chrome 安装vsc chrome debug插件 配置config { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"chrome\", \"request\": \"launch\", \"name\": \"Launch Chrome against localhost\", \"url\": \"http://localhost:4200\", \"webRoot\": \"${workspaceFolder}/universal/\" } ]} vsc debug 完全指南 - node run with nodemon nodemon --inspect=0.0.0.0:9229 app.js 安装vsc node debug插件 { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Launch\", \"type\": \"node\", \"request\": \"launch\", \"program\": \"${workspaceRoot}/universal/app.js\", \"stopOnEntry\": false, \"args\": [], \"cwd\": \"${workspaceRoot}/universal\", \"preLaunchTask\": null, \"runtimeExecutable\": null, \"runtimeArgs\": [ \"--nolazy\" ], \"env\": { \"NODE_ENV\": \"development\" }, \"console\": \"internalConsole\", \"sourceMaps\": false, \"outFiles\": [] }, { \"name\": \"Attach\", \"type\": \"node\", \"request\": \"attach\", \"port\": 9229, \"address\": \"localhost\", \"restart\": true, \"sourceMaps\": false, \"outFiles\": [], \"localRoot\": \"${workspaceRoot}/universal/\", \"remoteRoot\": \"http://localhost:8080\" } ]} vsc-cn-doc 中文文档已过期，建议查看最新官方文档","permalink":"http://catzillaorz.github.io/2020/05/18/VSC-Debug%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/","photos":[]},{"tags":[{"name":"Docker","slug":"Docker","permalink":"http://catzillaorz.github.io/tags/Docker/"}],"title":"Mac OS Docker连接本地数据库","date":"2020/05/12","text":"Docker启动的服务在Macos上从容器内部连接容器外的数据库# Ctr + R docker run -d -p 8080:3000 --name wiki --restart unless-stopped -e \"DB_TYPE=postgres\" -e \"DB_HOST=docker.for.mac.host.internal\" -e \"DB_PORT=5432\" -e \"DB_USER=postgres\" -e \"DB_PASS=postgres\" -e \"DB_NAME=wiki\" requarks/wiki:2.2.51 可以看出，如果想要从容器内部访问本地数据库，需要使用docker.for.mac.host.internal来访问，使用172.0.0.1或IP都无法连接到（原因可能是Docker是以虚拟机的形式在macos上启动）.","permalink":"http://catzillaorz.github.io/2020/05/12/Mac-OS-Docker%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93/","photos":[]},{"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://catzillaorz.github.io/tags/Markdown/"}],"title":"Github免费图床+VSC，让Markdown起飞","date":"2020/05/10","text":"创建自己的GitHub图床关键步骤： 生成一个Token用于操作GitHub repository vs code插件picgo 将github仓库 + 密钥，填写到picgo插件配置项中，然后就可以在vscode里，随时上传图片（只需复制图片到剪切板即可，上传成功后会返回链接） Mac OS快捷键 Cmd + Opt + U 已经使用图床替换了Blog里到头像和二维码，非常好用 features The VSCode extension of PicGo. Keyboard shortcuts You can change all the shortcuts below as you wish. OS Uploading an image from clipboard Uploading images from explorer Uploading an image from input box Windows/Unix Ctrl + Alt + U Ctrl + Alt + E Ctrl + Alt + O OsX Cmd + Opt + U Cmd + Opt + E Cmd + Opt + O Readmore推荐1: 一款在线md排版编辑器，可用于微信公众号 推荐2: 一款在线全部md语法示例+在线编辑","permalink":"http://catzillaorz.github.io/2020/05/10/Github-VSC%EF%BC%8C%E8%AE%A9Markdown%E8%B5%B7%E9%A3%9E/","photos":[]},{"tags":[{"name":"前端方案","slug":"前端方案","permalink":"http://catzillaorz.github.io/tags/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/"},{"name":"Devops","slug":"Devops","permalink":"http://catzillaorz.github.io/tags/Devops/"}],"title":"从Devops看前端基建","date":"2020/05/03","text":"从DevOps流程看前端基建 当你进入一个新团队，前端从 0 开始，怎样从DevOps的角度去提高团队效能呢？ 一套简易的DevOps流程包含了协作、构建、测试、部署、运行。 而前端常说的开发规范、代码管理、测试、构建部署以及工程化其实都是在这一整个体系中。 当然，中小团队想玩好DevOps整套流程，需要的时间与研发成本，不比开发项目少。 DevOps核心思想就是：“快速交付价值，灵活响应变化”。其基本原则如下： 高效的协作和沟通； 自动化流程和工具； 快速敏捷的开发； 持续交付和部署； 不断学习和创新; 在团队内/外促进协作前端基建协作方面可以写的东西太多了，暂且粗略分为：团队内 与 团队外。 以下可能是前端们都能遇到的问题： 成员间水平各异，编写代码的风格各不相同，项目间难以统一管理。 不同项目Webpack配置差异过大，基础工具函数库和请求封装不一样。 项目结构与技术栈上下横跳，明明是同一 UI 风格，基础组件没法复用，全靠复制粘贴。 代码没注释，项目没文档，新人难以接手，旧项目无法维护。 三层代码规范约束 第一层，ESLint： 常见的ESLint风格有：airbnb，google，standard。 在多个项目间，规则不应左右横跳，如果项目周期紧张，可以适当放宽规则，让warning类弱警告可以通过。且一般建议成员的IDE和插件要统一，将客观因素影响降到最低。 第二层，Git Hooks git 自身包含许多 hooks，在 commit，push 等 git 事件前后触发执行。而husky能够防止不规范代码被commit、push、merge等等。 代码提交不规范，全组部署两行泪。 npm install husky pre-commit --save-dev 例子： // package.json\"scripts\": &#123; // ... \"lint\": \"node_modules/.bin/eslint '**/*.&#123;js,jsx&#125;' &amp;&amp; node_modules/.bin/stylelint '**/*.&#123;css,scss&#125;'\", \"lint:fix\": \"node_modules/.bin/eslint '**/*.&#123;js,jsx&#125;' --fix &amp;&amp; node_modules/.bin/stylelint '**/*.&#123;css,scss&#125;' --fix\"&#125;,\"husky\": &#123; \"hooks\": &#123; \"pre-commit\": \"npm run lint\", \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\" &#125;&#125;, 通过简单的安装配置，无论你通过命令行还是Sourcetree提交代码，都需要通过严格的校验。 建议在根目录README.md注明提交规范： ## Git 规范使用 [commitlint](https://github.com/conventional-changelog/commitlint) 工具，常用有以下几种类型：- feat ：新功能- fix ：修复 bug- chore ：对构建或者辅助工具的更改- refactor ：既不是修复 bug 也不是添加新功能的代码更改- style ：不影响代码含义的更改 (例如空格、格式化、少了分号)- docs ：只是文档的更改- perf ：提高性能的代码更改- revert ：撤回提交- test ：添加或修正测试举例git commit -m 'feat: add list' 第三层，CI(持续集成)。 前端代码规范最佳实践 前两步的校验可以手动跳过（找骂），但CI中的校验是绝对绕不过的，因为它在服务端校验。使用 gitlab CI 做持续集成，配置文件 .gitlab-ci.yaml 如下所示: lint:stage:lintonly: -/^feature\\/.*$/script: -npmlint 这层校验，一般在稍大点的企业中，会由运维部的配置组完成。 统一前端物料 公共组件、公共 UI、工具函数库、第三方 sdk 等该如何规范？ 如何快速封装部门 UI 组件库？ 首先，得感谢各大 UI 组件库的维护者们，给我们省了非常多的开发成本。遥想Jquery时代，到处找插件的日子….但是每个新团队都有自己的 UI 风格取向，你单引一个ElementUI，肯定会出现业务水土不服以及观感不同的地方，而如果你在每个项目都强行魔改，到处污染样式，这得多心累啊。虽然各大组件库都有提供初始化变量的方式，但业务向的组件就没办法了。解决方案之一，就是国外很火的一个开源库：StoryBook: Storybook是一个开源工具，用于独立开发React、Vue和Angular的UI组件。它能有组织和高效地构建 UI 组件。 Storybook提供了一个沙箱，用于隔离地构建 UI 组件。 类似于组件库的官方文档，却更加强大。可以通过控件和对出入参数调整，快速查看组件的用法，测试也可以对组件功能完整性等做校验。 一般的建议步骤是： 将业务从公共组件中抽离出来。 在项目中安装StoryBook(多项目时另起) 按官方文档标准，创建stories，并设定参数（同时也建议先写Jest测试脚本），写上必要的注释。 为不同组件配置StoryBook控件，最后部署。 如何统一部门所用的工具函数库和第三方sdk 其实这里更多的是沟通的问题，首先需要明确的几点： 部门内对约定俗成的工具库要有提前沟通，不能这头装一个MomentJs，另一头又装了DayJS。一般的原则是：轻量的自己写，超过可接受大小的找替代，譬如:DayJS替代MomentJs，ImmerJS替代immutableJS等。 部门间的有登录机制，请求库封装协议等。如果是SSO/扫码登录等，就协定只用一套，不允许后端随意变动。如果是请求库封装，就必须要后端统一Restful风格，相信我，不用Restful规范的团队都是灾难。前端连调会生不如死。 Mock方式、路由管理以及样式写法也应当统一。 在团队外促进协作 核心原则就是：“能用文档解决的就尽量别 BB。”虽说现今前端的地位愈发重要，但我们经常在项目开发中遇到以下问题： 不同的后端接口规范不一样，前端需要耗费大量时间去做数据清洗兼容。 前端静态页开发完了，后端迟迟不给接口，因为没有接口文档，天天都得问。 测试反馈的问题，在原型上没有体现。 首先是原型方面： 一定要看明白产品给的原型文档！！！多问多沟通，这太重要了。 好的产品一般都会提供项目流程详图，但前端还是需要基于实际，做一张页面流程图。 要产品提供具体字段类型相关定义，不然得和后端扯皮。。。 其次是后端： 执行Restful接口规范，不符合规范的接口驳回。 必要的接口文档站点与 API 测试（如Swagger，Apidoc），不接受文件传输形式的接口。 然后是测试方面： 为了避免测试提出一些无效的 bug，最好提前参与测试的用例评审。 在实际开发中，如果有不合理功能需要修改，所有的修改都必须要求产品经理更新到 PRD 以及原型设计中。否则，测试如果不知道的话，会认为是 bug。 通过自测和编写Jest单元测试，将代码意外bug降到合理程度。 和测试一起吐槽后端的接口规范（滑稽）。 最后是运维方面： 除了CI/CD相关的，其实很可以和运维一起写写nginx和插件开发。","permalink":"http://catzillaorz.github.io/2020/05/03/%E4%BB%8EDevops%E7%9C%8B%E5%89%8D%E7%AB%AF%E5%9F%BA%E5%BB%BA/","photos":[]},{"tags":[{"name":"keycloak","slug":"keycloak","permalink":"http://catzillaorz.github.io/tags/keycloak/"},{"name":"sso","slug":"sso","permalink":"http://catzillaorz.github.io/tags/sso/"}],"title":"前端集成keycloak-Express+Keycloak","date":"2020/04/30","text":"KeycloakKeycloak是一个开源软件产品，旨在为现代的应用程序和服务，提供包含身份管理和访问管理功能的单点登录工具。截至2018年3月，红帽公司负责管理这一JBoss社区项目，并将其作为他们RH-SSO产品的上游项目。从概念的角度上来说，该工具的目的是，只用少量编码甚至不用编码，就能很容易地使应用程序和服务更安全。 Express + Keycloak 前端应用场景 Resource-Based Authorization Resource-Based Authorization allows you to protect resources, and their specific methods/actions,* based on a set of policies defined in Keycloak, thus externalizing authorization from your application. This is achieved by exposing a keycloak.enforcer method which you can use to protect resources. ​app.get('/apis/me', keycloak.enforcer('user:profile'), userProfileHandler) The keycloak-enforcer method operates in two modes, depending on the value of the response_mode configuration option. ​app.get('/apis/me', keycloak.enforcer('user:profile', &#123;response_mode: 'token'&#125;), userProfileHandler) If response_mode is set to token, permissions are obtained from the server on behalf of the subject represented by the bearer token that was sent to your application. In this case, a new access token is issued by Keycloak with the permissions granted by the server. If the server did not respond with a token with the expected permissions, the request is denied. When using this mode, you should be able to obtain the token from the request as follows: ​ app.get('/apis/me', keycloak.enforcer('user:profile', &#123;response_mode: 'token'&#125;), function (req, res) &#123; ​var token = var token = req.kauth.grant.access_token.content; ​var permissions = token.authorization ? token.authorization.permissions : undefined; ​// show user profile ​&#125;) Prefer this mode when your application is using sessions and you want to cache previous decisions from the server, as well automatically handle refresh tokens. This mode is especially useful for applications acting as a client and resource server. If response_mode is set to permissions (default mode), the server only returns the list of granted permissions, without issuing a new access token. In addition to not issuing a new token, this method exposes the permissions granted by the server through the request as follows: app.get('/apis/me', keycloak.enforcer('user:profile', &#123;response_mode: 'token'&#125;), function (req, res) &#123; ​var permissions = req.permissions; ​// show user profile​&#125;) Regardless of the response_mode in use, the keycloak.enforcer method will first try to check the permissions within the bearer token that was sent to your application. If the bearer token already carries the expected permissions, there is no need to interact with the server to obtain a decision. This is specially useful when your clients are capable of obtaining access tokens from the server with the expected permissions before accessing a protected resource, so they can use some capabilities provided by Keycloak Authorization Services such as incremental authorization and avoid additional requests to the server when keycloak.enforcer is enforcing access to the resource. By default, the policy enforcer will use the client_id defined to the application (for instance, via keycloak.json) to reference a client in Keycloak that supports Keycloak Authorization Services. In this case, the client can not be public given that it is actually a resource server. If your application is acting as both a public client(frontend) and resource server(backend), you can use the following configuration to reference a different client in Keycloak with the policies that you want to enforce: ​keycloak.enforcer('user:profile', &#123;resource_server_id: 'my-apiserver'&#125; It is recommended to use distinct clients in Keycloak to represent your frontend and backend.If the application you are protecting is enabled with Keycloak authorization services and you have defined client credentials in keycloak.json, you can push additional claims to the server and make them available to your policies in order to make decisions. For that, you can define a claims configuration option which expects a function that returns a JSON with the claims you want to push: app.get('/protected/resource', keycloak.enforcer(['resource:view', 'resource:write'], &#123; ​claims: function(request) &#123; ​return &#123; ​\"http.uri\": [\"/protected/resource\"], ​\"user.agent\": // get user agent from request ​&#125; ​&#125; ​&#125;), function (req, res) &#123; Advanced authorizationreadmore 根据keycloak官方指南中原文部分可以看出如何去区分keycloak的不同应用场景。 Keycloak node adapter Usage Instantiate a Keycloak class The Keycloak class provides a central point for configuration and integration with your application. The simplest creation involves no arguments. var session = require('express-session');​var Keycloak = require('keycloak-connect');​var memoryStore = new session.MemoryStore();​var keycloak = new Keycloak(&#123; store: memoryStore &#125;) By default, this will locate a file named keycloak.json alongside the main executable of your application to initialize keycloak-specific settings (public key, realm name, various URLs). The keycloak.json file is obtained from the Keycloak Admin Console. Instantiation with this method results in all of the reasonable defaults being used. As alternative, it’s also possible to provide a configuration object, rather than the keycloak.json file: ​let kcConfig = &#123; ​clientId: 'myclient', ​bearerOnly: true, ​serverUrl: 'http://localhost:8080/auth', ​realm: 'myrealm', ​realmPublicKey: 'MIIBIjANB...'​&#125;;​let keycloak = new Keycloak(&#123; store: memoryStore &#125;, kcConfig) Applications can also redirect users to their preferred identity provider by using: ​let keycloak = new Keycloak(&#123; store: memoryStore, idpHint: myIdP &#125;, kcConfig) Configuring a web session store If you want to use web sessions to manage server-side state for authentication, you need to initialize the Keycloak(…​) with at least a store parameter, passing in the actual session store that express-session is using. var session = require('express-session');​var memoryStore = new session.MemoryStore();​var keycloak = new Keycloak(&#123; store: memoryStore &#125;) Passing a custom scope value By default, the scope value openid is passed as a query parameter to Keycloak’s login URL, but you can add an additional custom value: ​var keycloak = new Keycloak(&#123; scope: 'offline_access' &#125;) Installing Middleware Once instantiated, install the middleware into your connect-capable app: var app = express();​app.use( keycloak.middleware() ) Checking Authentication To check that a user is authenticated before accessing a resource, simply use keycloak.checkSso(). It will only authenticate if the user is already logged-in. If the user is not logged-in, the browser will be redirected back to the originally-requested URL and remain unauthenticated: ​app.get( '/check-sso', keycloak.checkSso(), checkSsoHandler ) Protecting Resources Simple authentication To enforce that a user must be authenticated before accessing a resource, simply use a no-argument version of keycloak.protect(): ​app.get( '/complain', keycloak.protect(), complaintHandler ) Role-based authorization Express中间件Passport is authentication middleware for Node passport 不能完全适配keycloak的场景，keycloak实现了自己的Adapter。但不排除未来标准化，所以保留部分passport oidc中间件策略功能，统一跳转设置未授权跳转到oidc/login保证逻辑完整性 此外，官方文档中描述了单点登陆的特性，Adapter自动默认设置server请求logout时销毁session退出用户的实现： Explicit user-triggered logout By default, the middleware catches calls to /logout to send the user through a Keycloak-centric logout workflow. This can be changed by specifying a logout configuration parameter to the middleware() call: ​app.use( keycloak.middleware( &#123; logout: '/logoff' &#125; )) 说明中间件支持配置指定的退出策略，只需要配置并use即可 server端ssl等意外请求报错 process.env.NODE_TLS_REJECT_UNAUTHORIZED = ‘0’;的配置可能会影响 Keycloak的 Node Adapter 的正常使用，此处是一个很大的坑！ readmore Nodejs Passport 系列之一：基础概念 Nodejs Passport 系列之一：基础概念 Read moreKeycloak Node.js Adapter 官方文档 Keycloak Node.js Adapter Latest 官方文档 blog-Keycloak and Express blog-Openshift, Node and Keycloak 官方Basic NodeJS Example-keycloak-nodejs-connect 官方Docker Using the image keycloak-nodejs-connect &amp;&amp; keycloak Docker image 可以做一个完整的本地案例","permalink":"http://catzillaorz.github.io/2020/04/30/%E5%89%8D%E7%AB%AF%E9%9B%86%E6%88%90keycloak-Express-Keycloak/","photos":[]},{"tags":[{"name":"JWT","slug":"JWT","permalink":"http://catzillaorz.github.io/tags/JWT/"},{"name":"会话管理","slug":"会话管理","permalink":"http://catzillaorz.github.io/tags/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"}],"title":"别再用 JWT 做会话管理了","date":"2020/04/27","text":"Stop using JWT for sessions原文见 joepie91的博客: Stop using JWT for sessions（WTFPL 协议许可） Update - June 19, 2016: A lot of people have been suggesting the same “solutions” to the problems below, but none of them are practical. I’ve published a new post with a slightly sarcastic flowchart - please have a look at it before suggesting a solution. Stop using JWT for sessions, part 2: Why your solution doesn’t work 真是不幸，我最近看见越来越多的人建议使用 JWT(JSON Web Token)管理应用的会话。这是一个非常、非常糟糕的想法，在这篇博客里，我会解释下我为什么这么说。 为了避免读者困惑，我先定义一些术语： 无状态 JWT: JWT 令牌中包含全部的会话信息 有状态 JWT: JWT 令牌中只包含存储在会话 ID，会话信息存储在服务端 Session 令牌/cookie: 标准会话 ID，会话存储在服务端 事先讲明，我写这篇文章并不是说：你一定不能用 JWT，只是 JWT 不适合做会话管理，而且，这样做也很危险。不过，JWT 在其它领域很有用。在这篇文章的结尾处，我会简单地介绍下。 题外话很多人错误地 拿“Cookie 和 JWT”作比较。这种比较其实一点意义都没有，因为它们本就是风马流不相及的两种事物：Cookie 是存储机制，而 JWT 是加密签名令牌。 它们并不是对立的，你可以结合使用或者独立地使用它们。真正应该比较的是“Session 和 JWT”以及“Cookie 和本地存储”。 在这篇文章里，我主要对比 Session 和 JWT 令牌，也会偶尔提及 Cookie 和本地存储的对比，因为有必要这么做。 所谓的 JWT 优点当人们推荐使用 JWT 时，他们往往会说 JWT 有如下（或更多）优点： 易（水平）拓展 易用 更灵活 更安全 内置过期功能 不需要用户同意使用 Cookie 预防 CSRF 更利于移动端使用 适用于禁用 Cookie 的用户 我会逐一对上述优点进行说明，证明它们为什么是错误的或者误导人。下面的说明可能有些比较含糊，主要是因为上述优点别人描述地也比较含糊。我乐于把说明写得更加具体，你们可以在文章末尾找到我的联系方式。 易（水平）扩展这是上述列表中唯一一个有点正确的观点，不过也仅限于使用无状态 JWT 令牌时。事实是，几乎没人真正需要这种拓展性，因为有多种拓展方式。除非像 Reddit 那种网站，你不会需要无状态的会话。 以下是有状态会话的几种拓展方式： 在一个服务器上运行多个后台程序： 可以在服务器上运行 Redis 守护进程作会话存储。 一个后台程序运行在多台服务器上： 采用一个专用 Redis 服务器作会话存储。 多服务器，多程序集群： 使用粘性会话。 这些都是现有的应够很好应对常见场景的策略，你不必采用其它策略。 也许你会说：我要应对那些规模可能变得很大的“未来场景”。然而，在实际运用中，延后替换会话机制微不足道。你只需要在会话状态转变时，为每个用户注销一次就好，而没必要使用 JWT ，特别是考虑到接下来我要说的 JWT 的缺点。 易用并不是这样。使用 JWT 的话，你得在服务器端和客户端自己实现会话管理。然而，标准的 Cookie 是拆箱即用的，JWT 可没这么简单使用。 更灵活我现在还没看到有人真正地解释，使用 JWT 是如何更灵活的。基本上所有主流的会话管理机制，都让你随意存储会话数据。这和 JWT 的工作方式没什么两样。要我说，只是流行方式更灵活吧。如果你有什么不同的看法，欢迎联系我。 更安全很多认为 JWT “更安全”，因为它加密了。虽然签名的 Cookie 比没签名的 Cookie 更安全，但这并非 JWT 所特有的。而好的会话实现，也会使用签名的 Cookie。 “使用加密”并不能让某件事更安全，当且仅当为特定服务加密时，这样说才有意义。事实是，不正当地使用加密，可能还更不安全。 我听到更多关于 JWT 更安全的论调是：“JWT 不作为 Cookie 发送给客户端”。这纯粹鬼扯，Cookie 只是 HTTP 的一个头信息，用 Cookie 并没有不安全。实际上，Cookie 能预防客户端恶意代码攻击，我稍后会讲到。 如果你担心有人会截获你的会话 Cookie，你大可以用 TLS。所有不使用 TLS 的会话机制都可能被人截获，包括 JWT。 内置过期功能这毫无意义，而且也见得是什么有用的特性。服务端可以很好地实现过期功能，很多会话实现也是这样做的。而且，事实是，服务端实现会话过期，比依赖 JWT 过期功能实现的会话机制更好。因为，服务端实现会话过期，可以在你不需要会话信息时，把会话清除掉，JWT 的有状态令牌可做不到这一点。 不需要用户同意使用 Cookie大错特错。没有所谓的 “Cookie 法”。所谓的覆盖所有限制持久化标识的 Cookie 法，对于我们而言，没有太实质性作用。你能够想到的所有的会话机制，已经涵盖了“Cokie 法”。 概括地说： 如果你出于功能性需求，使用会话或者令牌（比如，用户登录登出），那你就不需要向用户同意使用 Cookie ，不管你是如何保存会话的。 如果你出于其它目的，需要使用会话或者令牌（比如，分析或跟踪），那你也不需要用户同意使用 Cookie，不管你如何存储会话。 预防 CSRF这个真没有。大抵有两种方式存储 JWT: 保存在 Cookie 中： 这样，你还是可能遭受 CSRF 攻击，还是得想办法预防。 保存在其它地方，如，本地存储中： 这样，你就不容易遭受 CSRF 攻击。不过这样的话，你的应用或者网站就得启用 JavaScript，你更容易受其它形式的攻击，详细信息待会讲到。 唯一能够减缓 CSRF 攻击方式是使用 CSRF 令牌，相关的会话机制这里不作描述。 更利于移动端使用扯。所有的移动端浏览器都支持 Cookie以及会话，那些主流的移动端框架和 HTTP 库同样如此。所谓“更利于”不成立。 适用于禁用 Cookie 的用户不大可能。用户不仅仅会拒绝 Cookie，他们还会拒绝其它所有形式的持久性玩意儿。包括本地存储和其它形式的持久化会话的东西（那些使用或者不使用 JWT 的方式），你用不用 JWT 都没差。这里需要讨论的是另外一个问题了——试图在禁用 Cookie 的情况下获取会话信息才是主因。 最重要的是，禁用 Cookie 的用户通常明白，这样做他们将无法进行身份认证，他们会为自己关心的网站单独打开 Cookie。这也不是你一个 Web 开发者需要解决的问题，更好的解决方式是，你要告知你的用户，为什么你的网站需要 Cookie。 缺点至此，我已经就上述 JWT 所谓的优点一一反驳。你可能在想“哦，没什么大不了的，我用 JWT 又没有什么关系，哪怕我不那么需要 JWT。” 我想说，你错了。使用 JWT 做会话管理真的有很多缺点，有些甚至有严重的安全问题。 占据更多空间JWT 令牌一点也不小。特别是，当你使用无状态的 JWT 时，所有的会话信息都被编码成一个令牌。很快，你就会发现，它们会超过浏览器对 Cookie 或者 URL 的数据大小限制。你可能会想到使用本地存储代替令牌，然而。。。。 更不安全当你把 JWT 存储在 Cookie 中，它和其它的会话标识没差。但是，如果你把 JWT 保存在别的什么地方，你就更容易遭受其它形式的攻击。像这篇文章里提及的（特别是“会话存储”那一小节）。 我们从刚刚停下的地方继续吧：回到本地存储中来。本地存储（local storge）是 HTML5 的一个超级棒的功能，它允许我们存储键/值对到浏览器和 Cookie 中去。那么，我们应该把 JWT 保存在本地吗？考虑到 JWT 令牌可能到达的大小，这样做似乎有意义。通常，Cookie 的大小最多可以达到 4k 。当 JWT 令牌很大的时候，Cookie 的问题会暴露，本地存储正好能解决该问题。可是，本地存储不能提供 Cookie 机制那样的安全机制。 和 Cookie 不同，本地存储无法在每次请求时，把你存储的信息带上。获取存储信息的唯一方法是，使用 JavaScript，这也就意味着，任何通过安全策略的 JavaScript 攻击者，都能够访问和获取你本地存储的内容。不止如此，JavaScript 也不管你的数据是否通过 HTTPS 发送，就 JS 而言，它们和网页上的其它元素一样，都只是数据。 毕竟那些工程师们，绞尽脑汁，克服万难，以确保没人能够动我们的 Cookie。而我们，却置他们给予我们的礼物不顾。可能是我思想落后了吧，我一直想不明白为什么有人会这么做。 无法让 JWT 令牌单独失效还有更多的安全问题要说。不像 Session，服务器可以在任何时候，使一个会话过期，却不能使一个无状态 JWT 过期。根据开发者的设计，不管发生了什么，我们只能等到 JWT 令牌自己过期。这样就意味着，你无法在黑客攻击了你的系统后，主动使会话过期；当用户修改了密码，你也无法使旧的会话过期。 实质上，你什么也做不了。如果不构建一个识别令牌的系统，你根本无法“杀死”一个会话。 数据过时某种程度上，和这个问题相关的都存在安全问题。在缓存中的数据，最终都会过时，不再和你数据库中的数据一一对应。 这就好比，一个令牌中包含过时的信息，比如持有一个已经更改个人信息的用户 的旧的 URL。更严重的是，某人在你收回管理员权限时，可能依然持有管理员权限。在没有关闭系统的情况下，你无法拒绝这些人的管理员权限。 实现没有实战性，或者根本不存在你可能会想，这些问题大都存在于无状态的 JWT 令牌中，你只对了大部分。可是，有状态的令牌和 Session 的 Cookie 一样，但没经历过实战性的考验。 已存的会话机制（举个例子，express-session）已经运用于生产环境，很多很多年了，它们的安全机制也因此提升。你使用 JWT 做会话管理没什么好处，要么你得自己实现会话的那一套东西，往往你实现的有很大的安全性问题；要么你使用第三方实现，但这种在现实中又不常见。 结论无状态的 JWT 令牌无法灵活地更新或失效，也会因你的存储方式，或是有大小的限制，或是有安全性问题。有状态的 JWT 令牌和 Session-Cookie 作用相同，但是未经时间考验，并且没有完美的第三方客户端支持。 除非你做到 Reddit 这种规模，否则没有理由使用 JWT 令牌作为会话凭证，就用 Session 吧。 那么… JWT有什么好处吗在文章的开始，我说过，JWT 在某些场合下有优势，但它不适合做会话机制。这个观点依然成立，当作为单用户认证时，JWT 特别有用。 我从JSON Web Token 说明中摘录了下面的话： JSON Web Token(JWT) 是一种紧凑的、URL 安全的方式，在两方中传送声明。通过消息认证码（MAC）或加密技术，是声明能被数字签名或者完整性保护。 在上文中，“声明”可以用来指代某种“命令”，一次认证或者像下面这张场景： 你好，服务器 B，服务器 A 告诉我我可以 &lt;这里是声明&gt; ，给，这是（加密的）证明 举个例子，你可能开发了一个保存文件的服务，用户必须授权才能下载他们的文件，但是这些文件被分散到无状态的多个下载服务器。在这种情况下，你可能需要你的应用服务器（服务器 A）发布一个一次性的“下载令牌”。然后，用户就可以拿这个令牌去文件服务器（服务器 B）下载文件了。 在使用 JWT 时，有下面几种特定条件： 令牌的生命周期短 它们在几分钟后就过期，这段时间用作初始化下载 令牌只希望用户使用一次 应用服务器每次下载都会分配一个新的令牌，所有，一个令牌对应一个文件下载请求，然后，舍弃该令牌，不需要存储状态。 服务器端依然使用 Session 只是下载服务器需要令牌来认证每次下载请求，所以不需要存储状态。 当你看到这儿，我们绝对有理由混用 JWT 令牌和 Session。它们都有自己的适用场景，有时候，你需要使用它们俩。但是，不要用 JWT 做持久化、长期保存数据。 Readmore深入理解JWT的使用场景和优劣JSON Web Token (JWT)Stop using JWT for sessions, part 2: Why your solution doesn’t workStop using JWT for sessions用户认证：基于jwt和session的区别和优缺点JWT 超详细分析谈谈我对session, cookies和jwt的理解","permalink":"http://catzillaorz.github.io/2020/04/27/%E5%88%AB%E5%86%8D%E7%94%A8-JWT-%E5%81%9A%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%E4%BA%86/","photos":[]},{"tags":[{"name":"发音","slug":"发音","permalink":"http://catzillaorz.github.io/tags/%E5%8F%91%E9%9F%B3/"},{"name":"英语","slug":"英语","permalink":"http://catzillaorz.github.io/tags/%E8%8B%B1%E8%AF%AD/"}],"title":"开音节和闭音节以及英语发音规则","date":"2020/04/27","text":"开音节和闭音节以及英语发音规则 如何识别开音节和闭音节 开音节是以原音字母结尾的音节，辅音字母(r .w.y 除外)+不发音的e结尾的音节 闭音节是以以一个或几个辅音字母(r 除外)结尾而中间只有一个元音字母的音节，称为闭音节。在重读的闭音节中元音字母读做短元音。 绝对开音节/相对开音节 开音节又可以细分为绝对开音节和相对开音节。绝对开音节：单个原音字母后面没有辅音字母的重读音节; 相对开音节：单个原音字母后面加单个辅音字母，再加一个不发音字母e构成的重读音节。 绝对开音节/相对开音节 绝对开音节也可以认为是以一个元音字母结尾的重读音节。这个原音字母在单词中发它在字母表中的音，就是它本身的读音。 相对开音节也可以认为是在含有一个元音字母的重读音节中，在元音字母后有一个辅音字母r除外与一个不发音的字母e，也是开音节。这个元音字母发它本身的音。 一般闭音节/重读闭音节 一般闭音节是指单个元音字母后面有辅字组成(r w y 除外)，且以辅音字母结尾的重读音节。结构为：元音+辅音或元音+辅音+辅音。 重读闭音节是指元音字母不是发它本身的字母音，重读闭音节就是指在一个音节中，以辅音音节结尾的而且是重读音节的音节。","permalink":"http://catzillaorz.github.io/2020/04/27/%E5%BC%80%E9%9F%B3%E8%8A%82%E5%92%8C%E9%97%AD%E9%9F%B3%E8%8A%82%E4%BB%A5%E5%8F%8A%E8%8B%B1%E8%AF%AD%E5%8F%91%E9%9F%B3%E8%A7%84%E5%88%99/","photos":[]},{"tags":[{"name":"插件","slug":"插件","permalink":"http://catzillaorz.github.io/tags/%E6%8F%92%E4%BB%B6/"}],"title":"好用插件推荐合集","date":"2020/03/23","text":"recommend plugin alasql","permalink":"http://catzillaorz.github.io/2020/03/23/%E5%A5%BD%E7%94%A8%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%90%88%E9%9B%86/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"}],"title":"托福复习计划日志","date":"2020/01/15","text":"复习计划 1.12 4:00-4:30 单词闯关25关 4:30-5:00 听力录播课程1 5:05-5:30 整理笔记 5:30-6:30 回家+吃饭 6:30-7:30 作业——精听联系一篇 7:40-8:10 \b阅读1录播课 8:20-8:50 \b笔记 9:00-9:30 课后作业，阅读一篇 9:30-10:00 整理TPO及PDF文档 10:00-10:30 TPO精听1篇-笔记 appendix 安哥鲁萨克逊民族的土地，在法语里就是。Angleterre，这就是为什么他在英语里和法语，你会如此不同。 suddenly I realized there are so many people who are defined by others. They are so self-conscious and they don’t even know what they really want to be. These feelings just coming up to me all of a sudden. Déjà vu I hate these feelings because it’s too late somehow I don’t even wanna it. Why are you so self-conscious I hate anyone tried to defined me from now on it will not make me to be a hater but It will make me to be myself","permalink":"http://catzillaorz.github.io/2020/01/15/%E6%89%98%E7%A6%8F%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%E6%97%A5%E5%BF%97/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"}],"title":"托福考友经验","date":"2020/01/14","text":"托福四战103 ORANGECAAT 考试时间 2019-08-1 基本情况英语基础 高考全国一卷130+ 四级裸考550 六级裸考400多 学习能力 自律性较强，英语基础还可以，考托福之前都没有怎么努力学过英语。单词量特别少，属于考试凭语感的类型。 历史成绩 第一次考试 80 （R18，L19，S20，W23） 第二次考试 90 （R24，L20，S22，W24） 第三次考试 89 （R24，L23，S21，W21） 第四次考试 103（R29，L25，S23，W26） 备考规划最开始是漫无目的的做题，对量和质心里都没有把握，第一次考试其实跟裸考差不多，都还没做过多少题，考到90已经有了一些练习量，但还是很模糊的状态。 第三次考试以为自己可以直接考到100+的，没想到只有89，受到了很大的打击，那次已经感觉能力相对之前有了很大的提升，方法主要也是通过刷题，那时候tpo基本上30以后的都做完了。 全力以赴进行第四次备考的时候，时间也很紧张，白天实习晚上学英语，但是那时候对自己的学习情况已经有了很清晰的认知：首先制定目标，想要过百必须把阅读和听力冲到高分，写作我也觉得是相对好提分的一项。所以每天几乎都会做一套阅读或者一套听力，用零碎的时间听老托。 阅读我个人没有太多的方法，对我来说改革后的阅读要好做很多，因为时间充裕了很多。 口语我一直没有怎么准备过，因为觉得提分空间不大，需要花很大力气才能提到高分，所以只是了解了每道题型如何回答，然后用kmf的机器评分自己练习，在练习中我发现自己确实句型很单一，如果有更多时间备考的话，在这方面其实也还有很多需要学习的地方。 说到作文，我在kmf报名了写作的vis冲分小班，因为当时觉得自己写作不稳定，想通过老师的批改知道自己的问题。在冲分班中我收获最大的是 意识到写作并不需要那么多华丽的词藻，最关键的其实还是扣题、逻辑、例子展开和不要犯错，其实语言的要求并没有那么高。 综合写作更是很需要技巧，在听力过关的情况下，对逻辑的把握梳理，如何抓重点，这些才是得高分的关键。 单科方法 听力 听力这次其实没有考好，之后还考了一次听力29，我对听力最大的感受是抓逻辑，其实并没有完全听懂，但是只要逻辑梳理清楚了，听完就不会有一团乱麻的感觉，对解题来说也是更加高效的。 听力的学习中，每个人的习惯不同，我个人比较习惯的方式是不做笔记，听逻辑，然后在练习中是用1.2倍速听梳理逻辑。我的感受是听力的确需要量的积累，辅以正确的方法，来实现质的突破。 我一开始听听力也都是云里雾里，觉得真的很难，五分钟的lecture也觉得很长，经常听着听着听不懂就走神了。我觉得是在练习中会慢慢适应。我对于辨音方面没有太大的问题，对我来说突破是来自于当我了解了听力内容其实逻辑大同小异，例如提出一个观点然后说出两个不同的观点，或是提出一个问题，说出几种不同的理论。当你感觉到自己都可以判断出听力大概的内容时，离成功也就不远了。听力中一些很难的名词也常常让人头痛，但其实那些词是不需要听懂的，只需要带着往下听，当对考试越来越熟悉，其实会发现ets还是很讲道理不会难为人的。 写作 在kmf报的写作课对我来说帮助很大，因为之前写作没有怎么准备的时候自己能考23、24，准备了之后却突然考了21，当时自我反思觉得是因为我滥用词藻短语，也许其中有很多不准确的错误的用法，并且忽视了逻辑的搭建。 在上课之后，我对独立写作的题型和如何破题有了更系统的认识，对于如何选取分论点也更清晰更有把握了。我的感受是其实独立写作和初高中时候的语文议论文写作十分类似，并且立意更加简单。只要逻辑通常，例子展开丰富，语法错误控制到很少，再把几个基础的句型加一运用，拿到25+是非常容易的事。 我也一直都在kmf网站上备考，确实还是很好用的，写作的机器评分可以用来检查自己的语法错误和框架是否完整。在后期我参加过三次kmf组织的在线模考，我觉得这样的模考很好，因为我当时几乎所有的tpo都做过有印象了，很渴求其他真题的练习，并且这样的定时考试也能一定程度上锻炼我们的心态，做到真正的模拟考，心态对于考场发挥也是有着极大的影响。 Tips因为我的目标就是100+，所以我最大的感受就是，想考到100+，可以先把口语和写作放一放，把听力和阅读先提到25+，毕竟听力和阅读其实是后续输出最重要的基础，没有听力和阅读能力，口语和写作的提高是没有坚实的地基的，并且从考试角度来说，口语和写作分数相对更难稳定，所以在有限的时间内，一定要先把阅读听力稳定在高分段，在练习的时候都是以全对为目标。 感谢在kmf遇到的老师，是老乡并且很投缘，风趣幽默也很负责。平时的助教老师们都很积极地回答问题，基本都是秒回的状态，还后台都是信息联通，这种高效让我很欣赏。 工作党四六级基础三个月出分100分 doggwang 考试时间 2019-09-21 基本情况-doggwang英语基础 首先英语四六级是在十年前考的，都是低空飞行飘过。 其次语言环境平时除了外文电影也没有什么用到英语的时候。 所以我的英语基础是属于比较普通的，并没有什么很好的基础。因此在5月份给自己定下的分数目标是（R29，L26，S20，W25），可以看出基本符合国内非英语专业同学的特点，读写要求尽量拉分，听说部分水桶的最短板，这种方式绝大多数国人在认真复习、适当提点和帮助的条件下是可以做到的。 学习能力 本人的托福学习“提高”能力因为年龄和工作的关系，是必然要打折扣的。不稳定的复习时间，无法控制的下班后的疲劳感，都是对复习托福有非常大的影响。所以，就需要有比较好的决心和自律让自己能够多拿一分是一分。而英语是一种语言工具，所谓工具就是要被使用才有意义，所以我一个比较好的优点是，学到就用，有机会就用，而且要大胆的用！看电影的时候练听力，看菜单的时候看一遍英文，要说话的时候能有机会说就一定要大胆说。这对我的复习其实是一个很好的帮助。 历史成绩 首考2019年8月25日 94（R29，L25，S19，W21） 二战2019年9月21日 100（R29，L25，S23，W23） 参培情况 vis口语（bobo王博老师） 备考故事 说说个人情况，88年出生，奔四的中年人一个，所以很多时候体力，精力，记忆力都远远不如自己在学生时期那么好。同时，又要忙于工作，作为一个建筑师，常年9106的工作模式让自己也很难抽出完整的时间去集中的复习。最重要的是计划的出分时间是8月到9月，而开始复习的时间是5月底，三个月的复习时间，目标分数在100分，复习考试的容错机会特别少。所以我的经验更多是作为其他工作党或者需要快速出分的伙伴使用和参考。 备考规划-使用的资料 KMF官网 KMF词汇app 托福考满分app 三个月的时间如何安排复习？ 第一个月：夯实基础阶段。 这个阶段是一个准备期，就是背单词，每天争取300个词。背单词的同时，可以开始做阅读TPO了，一天一套的练习。 第二个月是复习高峰阶段。 除了写作和口语综合题以外，所有科目都要每天分配一定的时间去完成每日目标，单词继续300一天，阅读一天一个TPO，听力一天一个TPO，口语独立一天一题。 这段时间是最痛苦的时间，每天醒来就和出租车司机一样，欠着这么多题目，晚上12点睡前还想着玩一个小时游戏，所以9点到23点之间需要合理安排好工作生活与学习。每天看着时间流逝，还是很抓狂的，但是大家一定要坚持下来，而对于学生党，这些工作量应该是很轻松能完成的。 第三个月是冲刺阶段。 全题型都需要冲刺的阶段，重点可能会放到口语综合题和写作上面，一天的时间单词继续200一天，阅读一天一个TPO，听力一天一个TPO，口语独立一天一题，口语综合题争取一天一套（我的实际情况是考前大概做了30套口语），写作两天一套（考前做了5套） 至于每天的具体时间安排，因人而异，我可以说说我的周末安排。 上午无论几点起床，一套阅读一套听力的TPO的模考和错题回顾。 下午午休，醒来后一套写作。 吃完晚饭看会电视，睡前完成口语TPO一套。 其中找时间穿插背一背单词和背一下语料（口语和写作通用）。 有人觉得一天需要做两套TPO，我觉得很难实现，毕竟做错题还要检查为什么错，基本上一天一套TPO差不多了，何况TPO资源有限，不能浪费，必须做一套反思一套。 单科方法- 阅读 阅读是拿分重点，词汇是基础，所以单词一定要背几遍。 复习的时候，学会去找同义转换，要相信考试的时候，绝大多数题目还是在做原文的同义转换，快速定位关键词KEYWORD，将原文和题目选项对照，所有题都做排除法，基本能保证很高的分数。我两次考试，第二次考试最后三题只剩30秒，最后分数29，一方面说明同义转换的正确定，也说明了考试的容错率。 考前TPO阅读都做完，因为有可能出现阅读题目变成听力题目，所以TPO刷完，最后问题不大。 听力 听力是从80分到100分最重要的助力。 听力题是有容错率的。 拿我的考试经验看，每次到时会遇到七八题需要思考一下二选一，两次考试分数都是25分，比自己预想的要高。 听力复习最重要的是多听。 通过多听，培养英语的声音结构。 听力不是一个个单词听，每句话都有自己的主谓宾，考试考点无非就是考察主语或者宾语你有没有听到，少量题目是对整体或者段落的态度理解。 通过多听，熟悉段落结构，养成对出题点，问题，语气词，转折词的敏感性，在考试中助力自己能在出题点前提高自己的耳朵注意力。 每天一套TPO，加考后精听，精听是边听边思考上面的两个要点，一遍通过。靠前两周，做到1.2倍速度做题没问题，复习平均分基本就是考试分数。做题的时候，坚持到底，不要因为一句或者一段没听清楚就放弃，很多情况下，听力题目在不理解听力素材的条件下也能回答。但是要做到有连续听六题的忍耐力和注意力。TPO题目现在有可能成为你阅读的题目，所以大家一定要做完。 关于笔记，我的历程是一文章五六个词，到一文章记得密密麻麻，到最后考试前一文章不超过10个词，其实最重要的内容是记下文章观点和逻辑。关键词，术语，不重要。 考前听力TPO都做完，问题不大。 口语 考前一个月时间准备口语。 我报了BOBO王博的课，我只能说，语料是真的好用，2个月的考试，独立口语命中两题（一模一样的题目）。Bobo的对每种题型的理解也比较清晰，也提供了答题需要注意的结构和模版，挺好用。 具体复习的时候，口语只能靠自己多说了，而且要厚着脸皮说，因为考试的时候，自信心非常重要，你身边可能有比你说的不好的，可能说得和老外一样好，这时候你如果心态疲软，会出现答题问题，越说越不自信，越说声音越小，越说语言越枯燥。 独立口语就是语料的积累，我为自己准备了多种语料，能面对交流，文化，科技，环保等内容的时候，有话可说。同时积累逻辑词，因果关系，递进关系，转折关系每种关系准备两三个词，通过结构和语料，共同搭建起自己一分钟的语言轰炸。考试的时候，保证自己能说完整完一个观点，包含态度，原因，举例，反方，总结。 综合口语更重要的其实是听力，能把考点都记下来。所以这种题型相对简单，考题结构也比较稳定，比听力题简单点。最后通过模版或者自己准备的逻辑词把重要考点说出来就可以。 写作 写作我也不知道要不要建议大家准备模版，因为我第一次用了模版是21，第二次没用模版是23。当然，这也是因为我综合写作听力有一定专门的训练，所以可能是综合写作分数往上提升。 有模版，写起来会比较简单，字数，高级词汇也会有一点。 不用模版，也不是不行，因为考试最重要的是看你的大逻辑和提供的论点是否切题，是否符合你的态度。 另一个关于打字数度，我可以给大家一个参考，独立写作380字，综合写作220字，分数也是能拿到23了。KMF里头动不动就500起步的，我真的很佩服，他们拿30分合理。 关于拼写，我感觉这个对分数影响是很大的，靠前要做到不超过5个拼写错误。平时不要用带拼写检查的软件练习写作！ 语料同口语一起准备，考前两周，做到两天一套TPO，保证自己写作评分能在4分稳定，问题不大。 写在最后，首考的同学要做好心理建设工作，因为真实考试和模考是会有不同的。听力有时会出现英式英语，口语第一题会有一种突然开始的感觉。 托福考试并不是洪水猛兽，充分利用好TPO题目，珍惜自己错过的每一道错题，会学积累，3个月100分，问题不大。 Tips-送给大家一句话“战略上藐视敌人，战术上重视敌人”。 托福考试不是洪水猛兽，ta不是国内的考试，要求你做到满分面面俱到（要求110以上的同学除外）。托福考试是一种能力的测试，不是想办法出难题刁题（TPO只遇到过一次）为难大家。同时，考试也没有大家想象的那么难，我只考了两次，包括和考友的交流发现，考试改革以后，容错率仍然是挺高的。所以大家在对待考试的时候，不要对ta产生惧怕心理，要藐视ta，相信自己的付出一定能得到相应的分数。同时，是考试就有应试的技巧，无论是KMF的课程，大家的攻略，还是每个人自己复习时候的心得，都是大家找到考试诀窍的方法。一定要对托福考试有一种熟悉感，一种我知道你想出什么题目，你在哪里出题的熟悉感。这需要复习的时候有一颗热诚的心，要像对待女孩子一样了解她，学会去预判她的想法，做她希望你的事，而不是浪费精力做无关的事，或者作死。所以请大家复习的时候要有安排，有技巧，把精力放在最容易有效果的地方，多拿一分是一分。 托福考试分四个科目，读听说写四个方向，其实每一个方向都有一个共同的基础，那就是词汇。词汇不过关，100分就是虚无缥缈的幻想。所以第一个月一定要沉下心来好好背单词。单词就用KMF词汇app的托福乱序版本，我是工作党，利用闲暇时光，目标是一天300个单词，白天争取在午休和吃饭的时候背好，不求背了就永远不忘，因为你会要背3-4遍。背单词其实是一种加速的过程，到后面几遍的时候，可能需要背的单词量也就一半不到，所以不用担心。 而听力是从80分到100分的最终助力，其实除了阅读，每个科目都和听力息息相关，每门课都要拿到good，那需要能够精准的反映出听力的信息。我首考94，我觉得很大的原因，除了第一次考试紧张和一些突发意外，最重要的就是没有重视听力，没有做好仔细听的心理准备，到时口语和写作综合题没有踩到所有的得分点，因此，大家一定要心理上要重视听力，考试的时候提醒自己保持听力注意力。无时无刻保持警惕感，去找到出题的点。","permalink":"http://catzillaorz.github.io/2020/01/14/%E6%89%98%E7%A6%8F%E8%80%83%E5%8F%8B%E7%BB%8F%E9%AA%8C/","photos":[]},{"tags":[{"name":"托福","slug":"托福","permalink":"http://catzillaorz.github.io/tags/%E6%89%98%E7%A6%8F/"},{"name":"写作","slug":"写作","permalink":"http://catzillaorz.github.io/tags/%E5%86%99%E4%BD%9C/"}],"title":"托福写作-朗读素材1","date":"2020/01/13","text":"住在大城市更能照顾好家人 住在大城市更能照顾好家人 In large cities, there are more convenient facilities offered than in the countryside. There is an ample supply of daily necessities in urban districts. The advanced network of public transport makes it easier for people to commute to different locations, including shopping malls, parks and restaurants, etc. Medical care is also more accessible, with hospitals being set up on all corners of the city. Thus, health problems could be addressed in a timely manner. Meanwhile, there are many places for recreation in big cities so that the whole family can spend enjoyable times together. 人为什么应该用自己的知识去解决问题，而不是依赖别人 人为什么应该用自己的知识去解决问题，而不是依赖别人 Furthermore, using one’s own knowledge to solve a problem is a precious opportunity to conduct self assessment. Doubtlessly, self-evaluation is a necessary premise of one’s personal progress and overall development. During the course of searching for the answer, one is granted the chance to use what has been learnt and judge if his knowledge base is solid enough to handle difficulties in real life. Discovering one’s defects is also a critical step forward. After all, how could an individual obtain his success without a thorough test of himself? Therefore, overcoming a problem totally on one’s own could be a meaningful way to receive objective feedbacks of his personal ability and quality. 为什么电视转播比现场表演更好看 为什么电视转播比现场表演更好看 First of all, a large crowd present at an event makes the environment too noisy to bear. I once attended a live concert held by a famous singer in a city stadium. A group of fans who travelled all the way from another city was seated right behind me. They appeared to be so crazy about their idol that whenever this star began to sing, they went all out to scream out his name, and became excited to tears. Thus, other members of the audience and I were unable to hear a word. Our ears were also suffering from other noises around us. Since then, I have not been to any live performances. By contrast, the environment at home is much more peaceful and comfortable. With a cup of tea in my hand, I can enjoy the performance on TV to my heart’s content. 机器制品比手工制品有优势 机器制品比手工制品有优势？ In the first place, volume production considerably cuts down the prices of items made by machine. Advanced technology should be the major contributor to the enhanced productivity of modern industry. The installation of machines enables factories to produce more at higher speed. Thus, the costs have been brought down to a large degree. Consumers might be able to buy them at reasonable prices. By contrast, hand-made items like clothes and furniture require much more energy and time for manufacture. Inevitably, people have to pay more for it. Nowadays, the number of wise consumers is on the rise. Very few of them are willing to select more expensive goods. Thereafter, machine-made commodities, which are mostly cheaper, might become the first choice. 独立写作-套用仿写 Question: Do you agree or disagree with the following statement? Should the government focus more on preserving natural environment and less on economic development? Directions: Read the question below. You have 30 minutes to plan, write, and revise your essay. Typically, an effective response will contain a mininum of 300 words. As far as I am concerned, the government should focus more on preserving natural environment and less on economic development. Even though some people believe that the economic is most important things for now, especially in developing countries. As social beings, humans can never do without money and economic. Economic is the strongest enemy in all the developing countries and the same as developed countries. It has been widely acknowledged that healthy economic paves the way for a country to achieve the dream of the county, such as “American Dreams”, etc. However, that does not mean what has been living on for billions years’ planet, our home, the earth, should be ignore and is not worthwhile to fight for protecting it. On the other hand natural environment is where our home is, just as Thomas Jefferson once expressed. To some extent, the essence contained within all school subjects. Without them, the building would soon collapse. In order to achieve our human being’s future, it is imperative for us to protect the natural environment. Therefore, there is no excuse for anyone to shun the most fundamental task of protecting environment. In this regard, we may refer to Madame Curie, a Polish physicist and chemist famous for her pioneering research on radioactivity. She studied hard at school and earned her higher degrees. The subsequent scientific research made her the first person honored with two Nobel Prizes in physics and chemistry, and there are also a lot of other scientists like her posted a lot of paper to prove that how badly have human being hurt the earth. Evidently, these unprecedented achievements owed much to Madame Curies’s hardworking on protecting our environment. On the other hand, the modern world values possible ways living longer on earth with natural environment, which is a key to humans future. Only through interaction with each country can human bings master the art of making a better world. This vivid demonstrates the significance of relating well to natural. At universities, there are more and more projects or group work assigned to find more ways to protect natural environment.The participation in any project requires the ideas of helping people to understand how important it is for human beings living on earth which still have good natural environment.During these course of experiment, students work together, they will build some simulation of the earth on the computer. Just like different components of an engine, every factors is interrelated. If a single part break down, the whole engine may like a boom and it will break down forever. It is such a amazing experiment that depicts the hold life cycle of human and our earth and the value of living with natural harmoniously. To sum up, the government should focus more on preserving natural environment because it is the fundamental task about our life. One the other hand, the governments all over the world should take less on economic development, we have already developed compare to 1000 years ago, we don’t need to take risks to destroy the natural environment or the earth to develop the economic, it’s stupid, you’re killing yourself anyway.Every single day spent on campus ought to be cherished in our memories, as this crucial period in life definitely become a brighter future, isn’t it? Word Count: 549讲义day1 范文","permalink":"http://catzillaorz.github.io/2020/01/13/%E6%89%98%E7%A6%8F%E5%86%99%E4%BD%9C/","photos":[]},{"tags":[{"name":"tips","slug":"tips","permalink":"http://catzillaorz.github.io/tags/tips/"},{"name":"Lee","slug":"Lee","permalink":"http://catzillaorz.github.io/tags/Lee/"},{"name":"YouTube","slug":"YouTube","permalink":"http://catzillaorz.github.io/tags/YouTube/"}],"title":"来自李老师的fun facts","date":"2020/01/10","text":"996工作制是奋斗还是剥削？你该不该加班？李永乐老师讲机会成本 机会成本： 获得A = 放弃B 鱼 熊掌 600 0 500 1 300 2 0 0 生活案例 农民 ≥ 种地 ≈ 打工 学生 ≥ 考研 ≈ 工作 工人 ≥ 加班 ≈ 休息 ≠ 健身 ≠ 读书 ≠ 恋爱 时间成本不同 富人 1h ≥ ¥10000 （ƒx ≥ 买LV包 | f0 ≤ 谈恋爱） 穷人 1h ≥ ¥10 （ƒx ≥ 谈恋爱 | fx ≤ LV包） 成本收益 编辑成本递增 编辑效用递减 YouTube 板书截图 KaTeXYou can render LaTeX mathematical expressions using KaTeX: The Gamma function satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral $$\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.$$ You can find more information about LaTeX mathematical expressions here.","permalink":"http://catzillaorz.github.io/2020/01/10/%E6%9D%A5%E8%87%AA%E6%9D%8E%E8%80%81%E5%B8%88%E7%9A%84fun-facts/","photos":[]},{"tags":[{"name":"Music","slug":"Music","permalink":"http://catzillaorz.github.io/tags/Music/"},{"name":"tips","slug":"tips","permalink":"http://catzillaorz.github.io/tags/tips/"},{"name":"Lee","slug":"Lee","permalink":"http://catzillaorz.github.io/tags/Lee/"},{"name":"YouTube","slug":"YouTube","permalink":"http://catzillaorz.github.io/tags/YouTube/"}],"title":"Music fun facts","date":"2020/01/09","text":"音乐也有科学道理吗？Do、Re、Mi…都是如何确定的？李永乐老师讲音律古代音律 毕达哥拉斯：五度相生法 频率： 2:1 4:3 3:2 频率与弦长和重量有关 管仲：三分损宜法 宫、商、角、 徵、羽 现代韵律 十二平均律 物理实验 板书截图 Youtube link 五度音环——如何真正地用好它C G D A E B F(#) F B(b) E(b) A(b) D(b) Carolyn Gets Drunk And Eats Butterflies Carolyn fondled beads Youtube link","permalink":"http://catzillaorz.github.io/2020/01/09/Music-fun-facts/","photos":[]},{"tags":[{"name":"Docker","slug":"Docker","permalink":"http://catzillaorz.github.io/tags/Docker/"}],"title":"dotCloud与TheBigBang","date":"2020/01/03","text":"TheBigBang把最宝贵的时间花在可迁移的技能上——那些永不过时的技能。 从人类出现到2003年，创造出的数据仅相当于如今人类两天创造的数据量 全球最大的图书馆，美国国会图书馆总和不足今天人类一天产生的数据量的万分之一 It's expanding ever outward but one dayIt will cause the stars to go the other wayCollapsing ever inward, we won't be here, it wont be hurtOur best and brightest figure that it'll make an even bigger bang!Australopithecus would really have been sick of usDebating out while here they're catching deer (we're catching viruseReligion or astronomy, Encarta, DeuteronomyIt all started with the big bang!Music and mythology, Einstein and astrologyIt all started with the big bang!It all started with the big BANG! dot Cloud2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。 这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。 后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。 Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。 正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。 有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。 2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。 不开则已，一开惊人。 越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。 Docker的人气迅速攀升，速度之快，令人瞠目结舌。 开源当月，Docker 0.1 版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0 版本正式发布。 此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。 Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc. 。 Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。 在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是VMWare和OpenStack。 相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。 虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。 虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。 而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。 它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。 正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。 大家需要注意，Docker本身并不是容器，它是创建容器的工具，是应用容器引擎。 想要搞懂Docker，其实看它的两句口号就行。 第一句，是“Build, Ship and Run”。 也就是，“搭建、发送、运行”，三板斧。 所以，Docker的第二句口号就是：“Build once，Run anywhere（搭建一次，到处能用）”。 Docker技术的三大核心概念，分别是： 镜像（Image） 容器（Container） 仓库（Repository） 我刚才例子里面，那个放在包里的“镜像”，就是Docker镜像。而我的背包，就是Docker仓库。我在空地上，用魔法造好的房子，就是一个Docker容器。 说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。 负责对Docker镜像进行管理的，是Docker Registry服务（类似仓库管理员）。 不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？ 所以，Docker Registry服务对镜像的管理是非常严格的。 最常使用的Registry公开服务，是官方的Docker Hub，这也是默认的 Registry，并拥有大量的高质量的官方镜像。 就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。 就在这个时候，K8S出现了。 K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。 Kubernetes 这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。 和Docker不同，K8S的创造者，是众人皆知的行业巨头——Google。 然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的Borg系统。 K8S是2014年6月由Google公司正式公布出来并宣布开源的。 同年7月，微软、Red Hat、IBM、Docker、CoreOS、 Mesosphere和Saltstack 等公司，相继加入K8S。 之后的一年内，VMware、HP、Intel等公司，也陆续加入。 一个K8S系统，通常称为一个K8S集群（Cluster）。 这个集群主要包括两个部分： 一个Master节点（主节点） 一群Node节点（计算节点） Master节点包括API Server、Scheduler、Controller manager、etcd。 API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。 Scheduler负责对集群内部的资源进行调度，相当于“调度室”。 Controller manager负责管理控制器，相当于“大总管”。 然后是Node节点。 Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是Pod。 Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。 Docker，不用说了，创建容器的。 Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。 Kube-proxy，主要负责为Pod对象提供代理。 Fluentd，主要负责日志收集、存储与查询。 其他 早在 2014 年，携程的一些业务部门开始引入 Kafka 作为业务日志的收集处理系统。2015 年，基于 Kafka 的高并发、大数据的特点，携程框架研发部在 Kafka 之上设计了 Hermes Kafka 消息系统，作为大规模的消息场景的统一的中间件。随着业务量的迅速增加，以及具体业务、系统运维上的一些误用，Kafka 现有系统变得不稳定，经历了多次 down 机，故障期间完全不可用，持续时间长达 5 小时以上，恢复缓慢。Kafka 还能用多久？成为一个迫切棘手的问题。问题严重又难以解决，必须做出改变。 Kafka 2.0升级实战！携程的经验有何可借鉴之处？","permalink":"http://catzillaorz.github.io/2020/01/03/dotCloud%E4%B8%8ETheBigBang/","photos":[]},{"tags":[{"name":"YearBeast","slug":"YearBeast","permalink":"http://catzillaorz.github.io/tags/YearBeast/"}],"title":"</2019><2020>","date":"2019/12/31","text":"一眨眼又到新的一年了，早知道不眨眼了。 花有重开日， 人无再少年。 相逢拌酩酊， 何必备芳鲜。 要知道，像2020年这样ABAB的年份，每隔101年才会出现一次，比一个世纪还要长。 Take good care of yourself…","permalink":"http://catzillaorz.github.io/2019/12/31/2019-2020/","photos":[]},{"tags":[{"name":"分布式","slug":"分布式","permalink":"http://catzillaorz.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}],"title":"大型分布式网站术语分析","date":"2019/12/31","text":"I/O优化 增加缓存，减少磁盘的访问次数。 优化磁盘的管理系统，设计最优的磁盘方式策略，以及磁盘的寻址策略，这是在底层操作系统层面考虑的。 设计合理的磁盘存储数据块，以及访问这些数据库的策略，这是在应用层面考虑的。例如，我们可以给存放的数据设计索引，通过寻址索引来加快和减少磁盘的访问量，还可以采用异步和非阻塞的方式加快磁盘的访问速度。 应用合理的RAID策略提升磁盘I/O。 Web前端调优 减少网络交互的次数（多次请求合并） 减少网络传输数据量的大小(压缩) 尽量减少编码（尽量提前将字符转化为字节，或者减少从字符到字节的转化过程。） 使用浏览器缓存 减少Cookie传输 合理布局页面 使用页面压缩 延迟加载页面 SS在最上面，JS在最下面 CDN 反向代理 页面静态化 异地 服务降级（自动优雅降级） 拒绝服务和关闭服务 幂等性设计 有些服务天然具有幂等性，比如讲用户性别设置为男性，不管设置多少次，结果都一样。但是对转账交易等操作，问题就会比较复杂，需要通过交易编号等信息进行服务调用有效性校验，只有有效的操作才能继续执行。 （注：幂等性是系统的接口对外一种承诺(而不是实现), 承诺只要调用接口成功, 外部多次调用对系统的影响是一致的. 声明为幂等的接口会认为外部调用失败是常态, 并且失败之后必然会有重试.） 失效转移 若数据服务器集群中任何一台服务器宕机，那么应用程序针对这台服务器的所有读写操作都需要重新路由到其他服务器，保证数据访问不会失败，这个过程叫失效转移。 失效转移包括：失效确认（心跳检测和应用程序访问失败报告）、访问转移、数据恢复。 失效转移保证当一个数据副本不可访问时，可以快速切换访问数据的其他副本，保证系统可用。 性能优化 根据网站分层架构,性能优化可分为： web前端性能优化、应用服务器性能优化、存储服务器性能优化。 浏览器访问优化：减少http请求;使用浏览器缓存;启用压缩;css放在页面最上面、javaScript放在页面最下面;减少Cookie传输 CDN加速 反向代理 应用服务器性能优化 分布式缓存（Redis等） 异步操作（消息队列） 使用集群（负载均衡） 代码优化 存储性能优化 机械硬盘vs固态硬盘 B+树 vs LSM树 RAID vs HDFS 代码优化 多线程（Q:怎么确保线程安全？无锁机制有哪些？） 资源复用（单例模式，连接池，线程池） 数据结构 垃圾回收 负载均衡 HTTP重定向负载均衡 当用户发来请求的时候，Web服务器通过修改HTTP响应头中的Location标记来返回一个新的url，然后浏览器再继续请求这个新url，实际上就是页面重定向。通过重定向，来达到“负载均衡”的目标。例如，我们在下载PHP源码包的时候，点击下载链接时，为了解决不同国家和地域下载速度的问题，它会返回一个离我们近的下载地址。重定向的HTTP返回码是302。 优点：比较简单。 缺点：浏览器需要两次请求服务器才能完成一次访问，性能较差。重定向服务自身的处理能力有可能成为瓶颈，整个集群的伸缩性国模有限；使用HTTP302响应码重定向，有可能使搜索引擎判断为SEO作弊，降低搜索排名。 DNS域名解析负载均衡 DNS（Domain Name System）负责域名解析的服务，域名url实际上是服务器的别名，实际映射是一个IP地址，解析过程，就是DNS完成域名到IP的映射。而一个域名是可以配置成对应多个IP的。因此，DNS也就可以作为负载均衡服务。 事实上，大型网站总是部分使用DNS域名解析，利用域名解析作为第一级负载均衡手段，即域名解析得到的一组服务器并不是实际提供Web服务的物理服务器，而是同样提供负载均衡服务的内部服务器，这组内部负载均衡服务器再进行负载均衡，将请求分发到真是的Web服务器上。 优点：将负载均衡的工作转交给DNS，省掉了网站管理维护负载均衡服务器的麻烦，同时许多DNS还支持基于地理位置的域名解析，即会将域名解析成举例用户地理最近的一个服务器地址，这样可以加快用户访问速度，改善性能。 缺点：不能自由定义规则，而且变更被映射的IP或者机器故障时很麻烦，还存在DNS生效延迟的问题。而且DNS负载均衡的控制权在域名服务商那里，网站无法对其做更多改善和更强大的管理。 反向代理负载均衡 反向代理服务可以缓存资源以改善网站性能。实际上，在部署位置上，反向代理服务器处于Web服务器前面（这样才可能缓存Web相应，加速访问），这个位置也正好是负载均衡服务器的位置，所以大多数反向代理服务器同时提供负载均衡的功能，管理一组Web服务器，将请求根据负载均衡算法转发到不同的Web服务器上。Web服务器处理完成的响应也需要通过反向代理服务器返回给用户。由于web服务器不直接对外提供访问，因此Web服务器不需要使用外部ip地址，而反向代理服务器则需要配置双网卡和内部外部两套IP地址。 优点：和反向代理服务器功能集成在一起，部署简单。 缺点：反向代理服务器是所有请求和响应的中转站，其性能可能会成为瓶颈。 LVS-NAT:修改IP地址 LVS-TUN: 一个IP报文封装在另一个IP报文的技术。 LVS-DR:将数据帧的MAC地址改为选出服务器的MAC地址，再将修改后的数据帧在与服务器组的局域网上发送。 缓存 缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段，现在CPU越来越快的一个重要因素就是使用了更多的缓存，在复杂的软件设计中，缓存几乎无处不在。大型网站架构设计在很多方面都使用了缓存设计。 CDN: 及内容分发网络，部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商哪里，在这里缓存网站的一些静态资源（较少变化的数据），可以就近以最快速度返回给用户，如视频网站和门户网站会将用户访问量大的热点内容缓存在CDN中。 反向代理：反向代理属于网站前端架构的一部分，部署在网站的前端，当用户请求到达网站的数据中心时，最先访问到的就是反向代理服务器，这里缓存网站的静态资源，无需将请求继续转发给应用服务器就能返回给用户。 本地缓存：在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而无需访问数据库。 分布式缓存：大型网站的数据量非常庞大，即使只缓存一小部分，需要的内存空间也不是单机能承受的，所以除了本地缓存，还需要分布式缓存，将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据。 使用缓存有两个前提条件，一是数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中；二是数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性。网站应用中，缓存处理可以加快数据访问速度，还可以减轻后端应用和数据存储的负载压力，这一点对网站数据库架构至关重要，网站数据库几乎都是按照有缓存的前提进行负载能力设计的。 负载均衡算法 轮询 Round Robin 加强轮询 Weight Round Robin 随机 Random 加强随机 Weight Random 最少连接 Least Connections 加强最少连接 源地址散列 Hash 其他算法 最快算法(Fastest)：传递连接给那些响应最快的服务器。当其中某个服务器发生第二到第7 层的故障，BIG-IP 就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。 观察算法(Observed)：连接数目和响应时间以这两项的最佳平衡为依据为新的请求选择服务器。当其中某个服务器发生第二到第7 层的故障，BIG-IP就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。 预测算法(Predictive)：BIG-IP利用收集到的服务器当前的性能指标，进行预测分析，选择一台服务器在下一个时间片内，其性能将达到最佳的服务器相应用户的请求。(被BIG-IP 进行检测) 动态性能分配算法(Dynamic Ratio-APM):BIG-IP 收集到的应用程序和应用服务器的各项性能参数，动态调整流量分配。 动态服务器补充算法(Dynamic Server Act.):当主服务器群中因故障导致数量减少时，动态地将备份服务器补充至主服务器群。 服务质量算法(QoS):按不同的优先级对数据流进行分配。 服务类型算法(ToS): 按不同的服务类型(在Type of Field中标识)负载均衡对数据流进行分配。 规则模式算法：针对不同的数据流设置导向规则，用户可自行 扩展性和伸缩性的区别 扩展性：指对现有系统影响最小的情况下，系统功能可持续扩展或替身的能力。表现在系统基础设施稳定不需要经常变更，应用之间较少依赖和耦合，对需求变更可以敏捷响应。它是系统架构设计层面的开闭原则（对扩展开放，对修改关闭），架构设计考虑未来功能扩展，当系统增加新功能时，不需要对现有系统的结构和代码进行修改。 衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能就可以上线新产品。不同产品之间是否很少耦合，一个产品改动对其他产品无影响，其他产品和功能不需要受牵连进行改动。 伸缩性：所谓网站的伸缩性指是不需要改变网站的软硬件设计，仅仅通过改变部署的服务器数量就可以扩大或者缩小网站的服务处理能力。 指系统能够增加（减少）自身资源规模的方式增强（减少）自己计算处理事务的能力。如果这种增减是成比例的，就被称作线性伸缩性。在网站架构中，通常指利用集群的方式增加服务器数量、提高系统的整体事务吞吐能力。 衡量架构伸缩性的主要标准就是可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来服务无差别的服务、集群中的可容纳的总的服务器数量是否有限制。 分布式缓存的一致性hash 具体算法过程：先构造一个长度为2^32的整数环（这个环被称作一致性Hash环）根据节点名称的Hash值（其分布范围为[0,2^32 - 1]）将缓存服务器阶段设置在这个Hash环上。然后根据需要缓存的数据的Key值计算得到Hash值（其分布范围也同样为[0,2^32 - 1]），然后在Hash环上顺时针查找举例这个KEY的hash值最近的缓存服务器节点，完成KEY到服务器的Hash映射查找。 优化策略：将每台物理服务器虚拟为一组虚拟缓存服务器，将虚拟服务器的Hash值放置在Hash环上，key在换上先找到虚拟服务器节点，再得到物理服务器的信息。 一台物理服务器设置多少个虚拟服务器节点合适呢？经验值：150。 网络安全 XSS攻击 跨站点脚本攻击(Cross Site Script)，指黑客通过篡改网页，注入恶意的HTML脚本，在用户浏览网页时，控制用户浏览器进行恶意操作的一种攻击方式。 防范手段：消毒（XSS攻击者一般都是通过在请求中嵌入恶意脚本大道攻击的目的，这些脚本是一般用户输入中不使用的，如果进行过滤和消毒处理，即对某些html危险字符转移，如“>”转译为“& gt;”）;HttpOnly(防止XSS攻击者窃取Cookie). 注入攻击：SQL注入和OS注入 SQL防范：预编译语句PreparedStatement; ORM；避免密码明文存放；处理好相应的异常。 CSRF（Cross Site Request Forgery，跨站点请求伪造）。听起来与XSS有点相似，事实上两者区别很大，XSS利用的是站内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。 防范：httpOnly;增加token;通过Referer识别。 文件上传漏洞 DDos攻击 加密技术 摘要加密：MD5, SHA 对称加密：DES算法，RC算法， AES 非对称加密：RSA 非对称加密技术通常用在信息安全传输，数字签名等场合。 HTTPS传输中浏览器使用的数字证书实质上是经过权威机构认证的非对称加密的公钥。 流控（流量控制） 流量丢弃 通过单机内存队列来进行有限的等待，直接丢弃用户请求的处理方式显得简单而粗暴，并且如果是I/O密集型应用（包括网络I/O和磁盘I/O），瓶颈一般不再CPU和内存。因此，适当的等待，既能够替身用户体验，又能够提高资源利用率。 通过分布式消息队列来将用户的请求异步化。 参考资料 LVS：三种负载均衡方式比较+另三种负载均衡方式 《大型网站技术架构——核心原理与技术分析》李智慧 著。 亿级Web系统搭建：单机到分布式集群 《大型分布式网站架构设计与实现》陈康贤 著。","permalink":"http://catzillaorz.github.io/2019/12/31/%E5%A4%A7%E5%9E%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%AB%99%E6%9C%AF%E8%AF%AD%E5%88%86%E6%9E%90/","photos":[]},{"tags":[{"name":"tips","slug":"tips","permalink":"http://catzillaorz.github.io/tags/tips/"},{"name":"Shell","slug":"Shell","permalink":"http://catzillaorz.github.io/tags/Shell/"}],"title":"Shell 助力开发效率提升","date":"2019/12/27","text":"通过本文的介绍, 你应该对相关命令有一个初步的了解, 知道比如用什么命令可以完成怎样的操作, 至于具体的参数, 你不用去刻意地记, 等到你用到的时候, 你再去 cmd –help 或者 man cmd去看, 用熟悉了, 常用的你也就记住了. 本文首先介绍了Linux/Mac下一些常用的命令行工具, 然后介绍了一些常用的命令, 最后通过一两个案例来说明这些工具的强大之处: 比如给定一个nginx日志文件, 能够找出HTTP 404 请求最多的top 10 是什么? 比如能找到请求耗时最多的top 10是什么? 再比如能够简单的得到每小时的”PV”是多少? 再比如拿到一篇文章, 能否简单统计一下这篇文章单次词频最高的10个词语是什么? Mac 环境 zsh on-my-zsh plugin git autojump osx(man-preview/quick-look/pfd(print Finder director)/cdf(cd Finder)) 常用快捷键(bindkey) 演示: 高亮/git/智能补全/跳转(j,d)… MacOS彩蛋-批量替换git图床CDN地址 find ./ -type f -exec sed -i'' -e \"s/raw.githubusercontent.com\\/CatzillaOrz\\/imgcdn\\/master\\//cdn.jsdelivr.net\\/gh\\/catzillaorz\\/imgcdn\\//g\" {} \\;rm -rf *.md-e## 优化以上find ./ -type f -name '*12-29-*.md' -exec sed -i'' -e \"s/raw.githubusercontent.com\\/CatzillaOrz\\/imgcdn\\/master\\//cdn.jsdelivr.net\\/gh\\/catzillaorz\\/imgcdn\\//g\" {} \\; Terminal Cheatsheet env | grep env | grep QMSAUTHN_ Shell 基础命令 which/whereis, 常用 whatis, man, –help ➜ .oh-my-zsh git:(master)$ whereis ls/bin/ls➜ .oh-my-zsh git:(master)$ which lsls: aliased to ls -G 基本文件目录操作 rm, mkdir, mv, cp, cd, ls, ln, file, stat, wc(-l/w/c), head, more, tail, cat... 利器 管道: | Shell 文本处理 这里就是通过案例讲了一下12个命令的大致用法和参数, 可以通过点击右边的目录直达你想要了解的命令. find, grep, xargs, cut, paste, commjoin, sort, uniq, tr, sed, awk find 常用参数 文件名 -name, 文件类型-type, 查找最大深度-maxdepth 时间过滤(create/access/modify) -[cam]time 执行动作 -exec 示例 find ./ -name \"*.json\"find . -maxdepth 7 -name \"*.json\" -type ffind . -name \"*.log.gz\" -ctime +7 -size +1M -delete (atime/ctime/mtime)find . -name \"*.scala\" -atime -7 -exec du -h {} \\; grep 常用参数 -v(invert-match),-c(count),-n(line-number),-i(ignore-case),-l, -L, -R(-r, –recursive), -e 示例 grep 'partner' ./*.scala -lgrep -e 'World' -e 'first' -i -R ./ (-e: or) 相关命令: grep -z / zgrep / zcat xx | grep cut 常用参数 -b(字节)-c(字符)-f(第几列), -d(分隔符), f范围: n, n-, -m, n-m 示例 echo \"helloworldhellp\" | cut -c1-10cut -d, -f2-8 csu.db.export.csv paste 常用参数 -d 分隔符-s 列转行 示例 ➜ Documents$ cat file11 112 223 334 44➜ Documents$ cat file2one 1two 2three 3one1 4➜ Documents$ paste -d, file1 file21 11,one 12 22,two 23 33,three 34 44,one1 4➜ Documents$ paste -s -d: file1 file2a 11:b bb:3 33:4 44one 1:two 2:three 3:one1 4 join 类似sql中的 ...inner join ...on ..., -t 分隔符, 默认为空格或tab ➜ Documents$ cat j11 112 223 334 445 55➜ Documents$ cat j2one 1 0one 2 1two 4 2three 5 3one1 5 4➜ Documents$ join -1 1 -2 3 j1 j21 11 one 22 22 two 43 33 three 54 44 one1 5 comm 常用参数 用法 comm [-123i] file1 file2 字典序列, 3列: 只在file1/file2/both 去掉某列, i 忽略大小写 示例 ➜ Documents$ seq 1 5 >file11➜ Documents$ seq 2 6 >file22➜ Documents$ cat file1112345➜ Documents$ cat file2223456➜ Documents$ comm file11 file221 2 3 4 5 6➜ Documents$ comm -1 file11 file22 2 3 4 56➜ Documents$ comm -2 file11 file221 2 3 4 5➜ Documents$ comm -23 file11 file221 相关命令 diff(类似git diff) sort 常用参数 -d, –dictionary-order -n, –numeric-sort -r, –reverse -b, –ignore-leading-blanks -k, –key 示例 ➜ Documents$ cat file2one 1two 2three 3one1 4➜ Documents$ sort file2one 1one1 4three 3two 2➜ Documents$ sort -b -k2 -r file2one1 4three 3two 2one 1 uniq 常用参数 -c 重复次数-d 重复的-u 没重复的-f 忽略前几列 示例 ➜ Documents$ cat file41122331111➜ Documents$ sort file4 | uniq -c3 111 221 33➜ Documents$ sort file4 | uniq -d11➜ Documents$ sort file4 | uniq -u2233➜ Documents$ cat file3one 1two 1three 3one1 4➜ Documents$ uniq -c -f 1 file32 one 11 three 31 one1 4 注意: uniq比较相邻的是否重复, 一般与sort联用 tr 常用参数 -c 补集-d 删除-s 压缩相邻重复的 示例 ➜ Documents$ echo '1111234444533hello' | tr '[1-3]' '[a-c]'aaaabc44445cchello➜ Documents$ echo '1111234444533hello' | tr -d '[1-3]'44445hello➜ Documents$ echo '1111234444533hello' | tr -dc '[1-3]'11112333➜ Documents$ echo '1111234444533hello' | tr -s '[0-9]'123453hello➜ Documents$ echo 'helloworld' | tr '[:lower:]' '[:upper:]'HELLOWORLD sed 常用参数 -d 删除-s 替换, g 全局-e 多个命令叠加-i 修改原文件(Mac下加参数 “”, 备份) 示例 ➜ Documents$ cat file2one 1two 2three 3one1 4➜ Documents$ sed \"2,3d\" file2one 1one1 4➜ Documents$ sed '/one/d' file2two 2three 3➜ Documents$ sed 's/one/111/g' file2111 1two 2three 31111 4#将one替换成111 并将含有two的行删除➜ Documents$ sed -e 's/one/111/g' -e '/two/d' file2111 1three 31111 4# ()标记(转义), \\1 引用➜ Documents$ sed 's/\\([0-9]\\)/\\1.html/g' file2one 1.htmltwo 2.htmlthree 3.htmlone1.html 4.html# 与上面一样 & 标记匹配的字符➜ Documents$ sed 's/[0-9]/&.html/g' file2one 1.htmltwo 2.htmlthree 3.htmlone1.html 4.html➜ Documents$ cat mobile.csv\"13090246026\"\"18020278026\"\"18520261021\"\"13110221022\"➜ Documents$ sed 's/\\([0-9]\\{3\\}\\)[0-9]\\{4\\}/\\1xxxx/g' mobile.csv\"130xxxx6026\"\"180xxxx8026\"\"185xxxx1021\"\"131xxxx1022\" awk 基本参数和语法 NR 行号, NF 列数量 $1 第1列, $2, $3… -F fs fs分隔符，字符串或正则 语法: awk ‘BEGIN{ commands } pattern{ commands } END{ commands }’, 流程如下: 执行begin 对输入每一行执行 pattern{ commands }, pattern 可以是 正则/reg exp/, 关系运算等 处理完毕, 执行 end 示例 ➜ Documents$ cat file511 11 aa cc22 22 bb33 33 d11 1111 11#行号, 列数量, 第3列➜ Documents$ awk '{print NR\"(\"NF\"):\", $3}' file51(4): aa2(3): bb3(3): d4(2):5(2):#字符串分割, 打印1，2列➜ Documents$ awk -F\"xxxx\" '{print $1, $2}' mobile.csv\"130 6026\"\"180 8026\"\"185 1021\"\"131 1022\"#添加表达式➜ Documents$ awk '$1>=22 {print NR\":\", $3}' file52: bb3: d#累加1到36，奇数，偶数➜ Documents$ seq 36 | awk 'BEGIN{sum=0; print \"question:\"} {print $1\" +\"; sum+=$1} END{print \"=\"; print sum}' | xargs | sed 's/+ =/=/'question: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 = 666➜ Documents$ seq 36 | awk 'BEGIN{sum=0; print \"question:\"} $1 % 2 ==1 {print $1\" +\"; sum+=$1} END{print \"=\"; print sum}' | xargs | sed 's/+ =/=/'question: 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 = 324➜ Documents$ seq 36 | awk 'BEGIN{sum=0; print \"question:\"} $1 % 2 !=1 {print $1\" +\"; sum+=$1} END{print \"=\"; print sum}' | xargs | sed 's/+ =/=/'question: 2 + 4 + 6 + 8 + 10 + 12 + 14 + 16 + 18 + 20 + 22 + 24 + 26 + 28 + 30 + 32 + 34 + 36 = 342 其他高级语法: for, while 等, 各种函数等, 本身awk是一个强大的语言, 可以掌握一些基本的用法. 实际应用日志统计分析 例如拿到一个nginx日志文件, 可以做很多事情, 比如看哪些请求是耗时最久的进而进行优化, 比如看每小时的”PV”数 等等. ➜ Documents$ head -n5 std.nginx.log106.38.187.225 - - [20/Feb/2017:03:31:01 +0800] www.tanglei.name \"GET /baike/208344.html HTTP/1.0\" 301 486 \"-\" \"Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322) 360JK yunjiankong 975382\" \"106.38.187.225, 106.38.187.225\" - 0.000106.38.187.225 - - [20/Feb/2017:03:31:02 +0800] www.tanglei.name \"GET /baike/208344.html HTTP/1.0\" 301 486 \"-\" \"Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322) 360JK yunjiankong 975382\" \"106.38.187.225, 106.38.187.225\" - 0.00010.130.64.143 - - [20/Feb/2017:03:31:02 +0800] stdbaike.bdp.cc \"POST /baike/wp-cron.php?doing_wp_cron=1487532662.2058920860290527343750 HTTP/1.1\" 200 182 \"-\" \"WordPress/4.5.6; http://www.tanglei.name/baike\" \"10.130.64.143\" 0.205 0.20510.130.64.143 - - [20/Feb/2017:03:31:02 +0800] www.tanglei.name \"GET /external/api/login-status HTTP/1.0\" 200 478 \"-\" \"-\" \"10.130.64.143\" 0.003 0.00410.130.64.143 - - [20/Feb/2017:03:31:02 +0800] www.tanglei.name \"GET /content_util/authorcontents?count=5&offset=0&israndom=1&author=9 HTTP/1.0\" 200 11972 \"-\" \"-\" \"10.130.64.143\" 0.013 0.013 上面是nginx的一个案例, 例如希望找到top 10 请求的path: head -n 10000 std.nginx.log | awk '{print $8 \",\" $10}' | grep ',404' | sort | uniq -c | sort -nr -k1 | head -n 10#orhead -n 10000 std.nginx.log | awk '$10==404 {print $8}' |sort | uniq -c | sort -nr -k1 | head -n 10 当然, 你可能一次不会直接处理成功, 一般会先少拿一部分数据进行处理看逻辑是否正常, 或者你可以缓存一些中间结果. cat std.nginx.log | awk '{print $8 \",\" $10}' | grep ',404' >404.logsort 404.log | uniq -c | sort -nr -k1 | head -n 10 再比如每小时请求数量, 请求耗时等等 ➜ Documents$ head -n 100000 std.nginx.log | awk -F: '{print $1 $2}' | cut -f3 -d/ | uniq -c8237 20170315051 20170416083 20170518561 20170622723 20170719345 201708 其他实际案例 ip block 案例: db数据批处理 背景: 因为某服务bug, 导致插入到db的图片路径不对, 需要将形如(安全需要已经将敏感数据替换) https://www.tanglei.name/upload/photos/129630//internal-public/shangtongdai/2017-02-19-abcdefg-eb85-4c24-883e-hijklmn.jpg 替换成 http://www.tanglei.me/internal-public/shangtongdai/2017-02-19-abcdefg-eb85-4c24-883e-hijklmn.jpg, 因为mysql等db貌似不支持直接正则的替换, 所以不能够很方便的进行写sql进行替换. 当然将数据导出, 然后写python等脚本处理也是一种解决方案, 但如果用上面的命令行处理, 只需要几十秒即可完成. 步骤: 准备数据 select id, photo_url_1, photo_url_2, photo_url_3 from somedb.sometable wherephoto_url_1 like 'https://www.tanglei.name/upload/photos/%//internal-public/%' orphoto_url_2 like 'https://www.tanglei.name/upload/photos/%//internal-public/%' orphoto_url_3 like 'https://www.tanglei.name/upload/photos/%//internal-public/%'; 替换原文件 一般在用sed替换的时候, 先测试一下是否正常替换. #测试是否OKhead -n 5 customers.csv | sed 's|https://www.tanglei.name/upload/photos/[0-9]\\{1,\\}/|http://www.tanglei.me|g'# 直接替换原文件, 可以sed -i \".bak\" 替换时保留原始备份文件sed -i \"\" 's|https://www.tanglei.name/upload/photos/[0-9]\\{1,\\}/|http://www.tanglei.me|g' customers.csv 拼接sql, 然后执行 awk -F, '{print \"update sometable set photo_url_1 = \" $2, \", photo_url_2 = \" $3, \", photo_url_3 = \" $4, \" where id = \" $1 \";\" }' customers.csv > customer.sql#然后执行sql 即可 其他 play framework session 老方式: 需要启play环境, 慢 sbt \"project site\" consoleQuickimport play.api.libs._val sec = \"secret...secret\"var uid = \"97522\"Crypto.sign(s\"uid=$uid\", sec.getBytes(\"UTF-8\")) + s\"-uid=$uid\" 新方式: ➜ Documents$ ~/stdcookie.sh 97522918xxxxdf64abcfcxxxxc465xx7554dxxxx21e-uid=97522➜ Documents$ cat ~/stdcookie.sh#!/bin/bash ## cannot remove this lineuid=$1hash=`echo -n \"uid=$uid\" | openssl dgst -sha1 -hmac \"secret...secret\"`echo \"$hash-uid=$uid\" 统计文章单词频率: 下面案例统计了川普就职演讲原文中词频最高的10个词. ➜ Documents$ head -n3 chuanpu.txtChief Justice Roberts, President Carter, President Clinton, President Bush, President Obama, fellow Americans and people of the world, thank you.We, the citizens of America, are now joined in a great national effort to rebuild our country and restore its promise for all of our people. Together we will determine the course of America and the world for many, many years to come.➜ Documents$ cat chuanpu.txt | tr -dc 'a-zA-Z ' | xargs -n 1 | sort | uniq -c | sort -nr -k1 | head -n 2065 the63 and48 of46 our42 will37 to21 We20 is18 we17 America15 a14 all13 in13 for13 be13 are10 your10 not10 And10 American 随机数 ➜ Documents$ cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 5cpBnvC0niwTybSSJhUUiZwIz6ykJxBvuVDP56NlHnugAt2yDySAB9HU2Nd0LlYCW0WEDzpjPop32T5STvR6K6SfZMyT6KvAIa9xBwBat7tJVaad279fOPdA9fEuDEqUdhTLrOiTH5FNP2nU3uflsjPUXJmfleI5c➜ Documents$ cat /dev/urandom | head -c32 | base64WoCqUye9mSXI/WhHODHDjzLaSb09xrOtbrJagG7Kfqc= 图片处理压缩, 可批量改图片大小等等 sips ➜ linux-shell-more-effiency$ sips -g all which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.pngpixelWidth: 280pixelHeight: 81typeIdentifier: public.pngformat: pngformatOptions: defaultdpiWidth: 72.000dpiHeight: 72.000samplesPerPixel: 4bitsPerSample: 8hasAlpha: yesspace: RGBprofile: DELL U2412M➜ linux-shell-more-effiency$ sips -Z 250 which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.png➜ linux-shell-more-effiency$ sips -g all which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.pngpixelWidth: 250pixelHeight: 72typeIdentifier: public.pngformat: pngformatOptions: defaultdpiWidth: 72.000dpiHeight: 72.000samplesPerPixel: 4bitsPerSample: 8hasAlpha: yesspace: RGBprofile: DELL U2412M➜ linux-shell-more-effiency$ sips -z 100 30 which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.png➜ linux-shell-more-effiency$ sips -g pixelWidth -g pixelHeight which-whereis.png/Users/tanglei/Documents/linux-shell-more-effiency/which-whereis.pngpixelWidth: 30pixelHeight: 100 Reference Linux工具快速教程 Linux命令大全 Advanced Bash-Scripting Guide UNIX环境高级编程","permalink":"http://catzillaorz.github.io/2019/12/27/Shell-%E5%8A%A9%E5%8A%9B%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87/","photos":[]},{"tags":[{"name":"Mac","slug":"Mac","permalink":"http://catzillaorz.github.io/tags/Mac/"},{"name":"Tips","slug":"Tips","permalink":"http://catzillaorz.github.io/tags/Tips/"}],"title":"Mac Tips","date":"2019/12/18","text":"Mac 软件推荐(续)之程序猿篇快捷键空格键: 预览cmd + ,: 设置cmd + -/=: 缩小/放大ctrl + u: 删除到行首(与zsh冲突, zsh中是删除整行)ctrl + k: 删除到行尾ctrl + p/n: 上/下移动一行或者前/后一个命令ctrl + b/f: 光标前/后移charesc + b/f: 光标前/后移word(蛋疼不能连续work)ctrl + a/e: 到行首/行尾ctrl + h/d: 删前/后字符ctrl + y: 粘贴ctrl + w: 删除前一个单词esc + d: 删后一个单词ctrl + _: undoctrl + r: bck-i-search/reverse-i-search, 输入关键字搜索历史命令cmd + shift + 3 截取整个屏幕.cmd + shift + 4 部分窗口, 出现十字供选取, 若此时按空格键(这个技能得点赞), 会选取当前应用的窗口, 再 tap 即可完成截图. Mac 内置的更多的快捷键列表可以参考 Mac 官网 iTerm2iTerm2官网有介绍功能. 以下是觉得可能常用的功能. 分屏功能 cmd + d 竖着分屏, cmd + shift + d 横着分屏 cmd + t 新建一个 tab, cmd + num 切换到第 num 个 tab 当前窗口含有分屏时, 通过 cmd + [ 和 cmd + ] 来进行切换小的分屏 热键 设置一个热键, 比如我的是 alt + 空格, 弹出 iTerm2, 且以半透明的方式显示在当前 active 的窗口上面. zsh这个墙裂推荐啊. 结合 oh my zsh, 丰富的插件资源. 语法高亮, 自动补全等特别好, 在此推荐的几个插件或功能. git autojump osx zsh-autosuggestions Vim所需即所获：像 IDE 一样使用 vim","permalink":"http://catzillaorz.github.io/2019/12/18/Mac-Tips/","photos":[]},{"tags":[{"name":"codewars","slug":"codewars","permalink":"http://catzillaorz.github.io/tags/codewars/"}],"title":"codewars mangic","date":"2019/12/09","text":"javascript - 7 kyu Love vs friendship 7 kyu Love vs friendship If a = 1, b = 2, c = 3 ... z = 26Then l + o + v + e = 54and f + r + i + e + n + d + s + h + i + p = 108So friendship is twice stronger than love :-)The input will always be in lowercase and never be empty. solution: const wordsToMarks = s =&gt; [...s].reduce((res, c) =&gt; res += c.charCodeAt() - 96, 0) shell - 8kyu Even or Odd 8kyu Even or Odd #!/bin/bash# your code here(( $1 &amp; 1 )) &amp;&amp; echo \"Odd\" || echo \"Even\" shell - 8kyu Opposite number 8kyu Opposite number #!/bin/bashecho \"- $1\" | bc","permalink":"http://catzillaorz.github.io/2019/12/09/codewars-mangic/","photos":[]},{"tags":[{"name":"learn","slug":"learn","permalink":"http://catzillaorz.github.io/tags/learn/"}],"title":"learn how to learn","date":"2019/12/04","text":"准备工作 学习不只是找到好的学习路径，掌握好的学习方法就可以了的，要成为优秀的学习者，是要求很多素质和习惯的。我长期以来都是一个懒散的人，三分钟热度，自律很差。我相信大部分人都这样。在意识到学习任务的艰巨后，我想的是我不能再放弃了，我觉得我年轻试错的阶段已经过了，经不起再失败了，于是我专门花了很长时间来调整自己的习惯和行为。这里我分享一些对我帮助最大的资源： 一本书 《习惯的力量》（The Power of Habit）。这本书让我意识到自己的坏习惯是需要科学的方法来改变的，一味地自责和焦虑是没用的。习惯的改变靠的不是主观意志力，而是 cue （不知道怎么翻译，刺激物？）和日常流程（routine）来维持的，所以我把学习场所从家换到了星巴克。而 cue 分为情绪，时间，场所，上一个行为等，这些都需要自己去定位查找。找到触发你的坏习惯的 cue，改变它。另外，每天都要有计划，计划会触发奖赏期待，让你更不容易回到坏习惯。最重要的是，关键好习惯的养成，会让你养成其它好习惯更容易。比如早起的习惯一旦养成，我又养成了早上学习最具挑战知识的习惯。 一门课程 Coursera 上有一门课叫 Learning How To Learn, 目前是世界上参与人数最多的一门 MOOC 课程。这门课免费。讲师 Dr. Barbara Oakley 是奥克兰大学的工程学教授。她本来是学斯拉夫语言文学的，一直畏惧工科，数理学科成绩也很差，直到快 30 岁时，她才决定挑战自己去学工程学。听她讲学习过程是最有说服力的。另一位讲师 Dr. Terrence Sejnowski 是顶尖的神经科学专家。他会从脑科学和神经科学的实证角度告诉你为什么应该怎样学。下面讲下我对这门课程的一些理念的应用。 大脑的发散和集中工作模式 发散模式（diffuse mode）指的是注意力从工作对象处转移开来，放松下来，让灵感有机会出现。集中模式（focused mode）自然是指全部注意力放在工作对象上，高强度思考。学习时，我采用番茄工作法，每工作 25 分钟休息 5 分钟。然后每工作 2 到 3 个小时，出门散下步，或者在家时耍下壶铃。这个习惯养成后，很多神奇的事情会发生。比如有一次我在写 Rxjs 应用时，卡在一个地方，怎么也想不出来解决方案，然后去洗了个澡，灵感就来了，换几个操作符的组合就解决了。还有数不清有多少次在梦里想出一个解决方案，起床就去试，结果真的行的通。 多运动 Dr. Terrence Sejnowski 讲解了为什么运动会促发大脑新的神经元的生长。高强度的脑力活动，你需要大脑保持最佳机能。我在开始学习之前就是个健身狂魔（见下图），每周有至少四天要去健身房。找到工作前的学习期，我也保持着这个频率锻炼。工作后，没时间再去健身房了，我就买了个 Concept 2 划船机，早上在家锻炼。锻炼推荐 HIIT （高强度间歇训练）方法，燃脂迅速，最短时间内达到锻炼效果。 硬拉训练 刻意训练 学生时代我经常忽略做题训练，看懂了答案就以为自己掌握了。但其实懂答案和自己写出来是两回事。学习者很容易产生能力幻觉（Illusion of Competence），看懂了知识点，就以为自己掌握了。只有自己能独立解释清楚的，才算是自己掌握的。自己在网上找些小挑战做（比如 100 days of code, 还有 JavaScript 30），多在 codewars 和 LeetCode 上刷题（我主要是在 codewars 上做题），可以巩固刚学的知识。 间隔重复 一天花 6 个小时学一个主题，和用 6 天时间，一天花 1 小时来学习同一个主题相比，肯定是后者掌握的更好。当然重复不是简单的重读一遍。而是刻意回忆，测试自己还能不能想起来。大家可以试试 Studies 这个软件，创建和管理知识卡片，方便复习。iOS 和 Mac 上都有。 还有很多，我就不全列了。强烈建议大家去学一遍课程，自己摸索出适合自己的方法。中文版在这里 一个习惯 早起。每天早上 4 点准时起床。我知道这个听起来挺疯狂，但我坚持了一年半了。（也有例外，但最晚大多数时候不超过 5 点，极个别例外比如加班，也不会超过 6 点）。我以前的习惯是经常晚上玩手机到凌晨 2 点睡，还骗自己，以为自己是夜猫子型。转变习惯用了一个月。下面是一些技巧。1. 吃补剂。我吃的是 Swiss Sleep，一种澳洲的草本保健品。我知道很多专家说保健品不靠谱，但我吃了这个真的睡的更香了，用 Sleep Cycle 监测到的深度睡眠增加了。2. 下午 2 点之后不喝咖啡，晚上 8 点之后不看电子屏幕。3. 睡前深呼吸，放慢呼吸频率。四，我用 Yeelight 床头灯，早上定时模拟日出。自然醒的感觉，不会像闹钟那样讨厌。早起后，早上至少有 3 个小时不会有人打扰你（我做的更极端，直接把微信卸载了，全天都没人打扰）。而晚上睡的早，也不会漫无目的地玩手机聊天。从早上起床到中午 12 点，我可以完成 10 个番茄闹钟。中途还有充足的休息时间。 一个 APP Headspace 是国外一个比较流行的冥想软件。可能很多人对冥想的感觉就是太玄学，但它真的作用很大。对于我而言，主要是两个作用，一个是集中注意力，另外一个是克服焦虑。一个人没有其他帮助，学习一个全新的领域，也不知道能不能成功，压力还是很大的。而这种压力可能并不一定会转化为动力，而是会积累着，成为拖累。冥想可以让我暂时远离这些担忧，调整注意力。Headspace 的指导语速很慢，听懂比较容易。 阅读原文","permalink":"http://catzillaorz.github.io/2019/12/04/learn-how-to-learn/","photos":[]},{"tags":[{"name":"Redux","slug":"Redux","permalink":"http://catzillaorz.github.io/tags/Redux/"},{"name":"RxJS","slug":"RxJS","permalink":"http://catzillaorz.github.io/tags/RxJS/"},{"name":"MobX","slug":"MobX","permalink":"http://catzillaorz.github.io/tags/MobX/"}],"title":"前端状态管理博弈","date":"2019/12/04","text":"从时间旅行的乌托邦，看状态管理的设计误区Redux 的状态管理理念非常优雅，随之附带的时间旅行调试支持也非常酷炫。但这个特性是否是传说中的银弹，又会给使用者带来什么额外的负担呢？让我们重新思考一下吧。 什么是时间旅行 在 2015 年的 React Europe 会议上，Dan Abramov 展示了通过 Redux DevTools 让开发者在历史状态中自由穿梭，从而提升调试体验的 Demo，这个工具的使用体验非常惊艳，也取得了非常好的反响。在此之后，Vuex 与 MobX 等状态管理库也陆续在它们的调试工具中引入了对类似功能的支持。我们可以认为，前端状态管理领域中，狭义的『时间旅行』概念是在满足了下面这几个前提后，开发时在历史状态中任意回溯的功能： 将局部 state 统一到全局 store 中做状态管理。开发环境中安装了与状态管理库配套的 DevTools，或引入了特殊的监控组件。开发环境中启用了 Webpack 的 HMR 热加载。 需要特别注意的是，这个功能完全是调试时使用的。不过，由于这个能力给人的印象过于深刻，它也成为了许多人转向 React + Redux 技术栈的主要理由之一：漂亮的概念模型加上漂亮的调试体验，这套方案简直就是神器啊！而正如 React 第一个在浏览器里实现了声明式渲染一样，Redux 也第一个在浏览器里实现了理想中的调试体验，这些原创性的工作对前端领域的贡献是非常大的。在下文中，我们对 React + Redux 一些潜在问题的分析，也是建立在尊重社区工作的基础上的。 阅读原文…","permalink":"http://catzillaorz.github.io/2019/12/04/%E5%89%8D%E7%AB%AF%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%8D%9A%E5%BC%88/","photos":[]},{"tags":[{"name":"photo","slug":"photo","permalink":"http://catzillaorz.github.io/tags/photo/"}],"title":"it·me","date":"2019/12/04","text":"Hatsune-Miku 危险级别排行","permalink":"http://catzillaorz.github.io/2019/12/04/it%C2%B7me/","photos":[]},{"tags":[{"name":"blabla","slug":"blabla","permalink":"http://catzillaorz.github.io/tags/blabla/"}],"title":"随笔2019.12.31","date":"2019/11/27","text":"随笔20191127 使用了 HEXO-THEME-HUHU 大牛主题，适配移动端设备。 微信访问需要使用浏览器打开 Logo的配置项不生效，在构建结束后，发布前，使用shell脚本替换 评论、统计、好友、标签、分类、代码块高亮等功能待完善 Finally, I got this conversation - 7month ago 《哥德尔、埃舍尔、巴赫——永恒的金带》——人工智能. 正如标题所说，这本书交织地介绍了数理逻辑学家哥德尔、版画家埃舍尔和巴洛克作曲家巴赫，探索了三个伟人在不同领域中作品的共同理念。 就像本书作者侯世达所说：“我认识到，哥德尔、埃舍尔和巴赫只是用不同的方式来表达一样相同的本质。 Thoughts: 时间很公平，但命运各不相同，很多人可能被生活所迫，everybody gets busy to living or gets busy to dieing. 能如此困境中脱引而出的人，如同爱因斯坦、乔布斯、华人Zoom袁征，他们似乎有同样的fate，但最终不甘命运摆布。 大多人，迷失在世俗中，归咎于命运。 极少数人保持清醒，目标明确，屡败屡战。 same life, different fate. 年终总结忙碌的一年里，在领导及各部门各同事的帮助下，我顺利的完成了本年度的工作。为了今后更好的工作，总结经验、完善不足，本人就本年度的工作总结如下： 取得的成绩 AI营销管理系统 使用新Uiframe分别实现了「客户中心」、「总经理」、「渠道主管」页面功能及数据Mock QloudAuth 使用新UIframe 搭建qloud-auth项目 为平台提供了Auth管理页面，集成插件等主要功能 统一用户及权限管理服务，以应用、用户、角色和许可这四个实体为依托，相互关联实现身份管理系统的逻辑，使得身份管理明晰简单 QloudWiki QloudWiki ，即文档管理服务 专为云服务提供文档管理 简单易用——作为Qlouddop产品的插件，用于各个项目中文档编辑、管理、查看 易读易写——使用Markdown语法编辑文档， Markdown 的目标是实现「易读易写」 角色分配——集成于Qloudauth及Qlouddop实现项目与角色控制 权限控制——通过Qloudauth实现读写权限控制，精确到项目文件目录控制 安全机制——通过非常规方式绕过用户验证和权限验证的方式都将被拦截 Git文档托管——使用Git作为文档托管平台 QloudITG 是一个灵活的、现代化的 IT 治理平台 在 QloudITG 中，所有需要管理和治理的实体均称为资产，例如服务、配置、API、流程定义、容器镜像等 资产类型管理：资产的模型元数据，定义资产类型及资产包含的属性：编辑方式、存储方式等。 资产登记审计管理：新增或编辑具体的资产的属性信息，记录资产属性信息的所有变化。 资产生命周期管理：管理资产的状态，创建、提交、审核、发布、归档等。 资产血缘关联管理：管理资产与资产之间的关联关系，关联关系支持图形化展示。 资产存储服务管理：管理资产物件的存储服务，如 QloudRepos, QloudDocs 等。 资产标签管理：通用标签及自定义标签，通用标签由资产类型决定，自定义标签由资产登记时编辑 QloudAlgo 为Alogo平台提供支持，重构了UI及实现了新功能，包含一下功能 算法管理 模型管理 资源数据管理 作业管理 QloudExp QmsExp是一个基于qloudbit的服务，监听KAFKA的异常队列TOPIC，把发到异常TOPIC的消息捕获，并且存储到数据库mariadb，对外提供restapi接口，实现分页查询的功能。Qloudexpui则通过Qmsexp提供的接口对收集到的异常进行分页展示和生成格式化后数据，并提供复制的功能 QloudHermes QloudHermes是一个依赖Kafka构建的快速、可靠的消息代理，UI界面。 通过Qloudhermes,UI界面发布端 发布消息, Qloudhermes就能将消息推送至订阅消息的服务器地址","permalink":"http://catzillaorz.github.io/2019/11/27/%E9%9A%8F%E7%AC%942019/","photos":[]},{"tags":[{"name":"serverless","slug":"serverless","permalink":"http://catzillaorz.github.io/tags/serverless/"}],"title":"Serverless For Frontend 前世今生","date":"2019/11/27","text":"前言作为一个前端，你可能一直在迷茫，Node.js 的定位是什么？为什么我们需要它？ 尤其是到了 2019 这个时间点，未来一段时间内，有一个词 – Serverless 你会听到想吐。 所有人都在说 Serverless 几乎没有人知道如何落地 Serverless 但大家都觉得其他人在大力做 Serverless 所以大家都在宣传自己在做 Serverless 演进史远古时代 天地初开，还没有出现前后端之分，仅有 设计 和 研发 两种角色： 设计师根据需求产出高保真的原型图。 研发根据需求和原型图来编写对应的业务逻辑和页面。 在 Web 1.0 的时代，大部分的 B/S 系统都采用的是 集中式架构，分为标准的三层（MVC）： 数据访问层：封装对数据库的访问。 服务层：用于业务逻辑的处理。 Web 层：用户处理页面渲染，路由逻辑等等。 比较流行的是 Struts + Spring + Hibernate 框架，还有 Dreamweaver 等前端三剑客。 石器时代 然而艺术和代码之间的 Gap，对于很多缺乏艺术细胞的直男程序猿来说，是一件非常头疼的事。如何更好的提升用户交互体验，如何像素级的还原设计稿，都需要更高专业度的投入。 同时，由于互联网的迅猛增长，集中式架构已经逐渐无法满足海量的访问，从而演进出 分布式架构 ，对研发的能力要求也进一步提升。 因此基于专业度的诉求，逐渐分化出 前端研发 和 后端研发 的角色： 前端此时更偏向设计，很多都是懂点研发的设计师承担。 后端则更深入到业务建模，系统运维等方面。 此时的业务开发的套路，变为： 前端研发 根据原型图，切图，产出 HTML/CSS/JS ，交付给 后端研发。 后端研发 把 CSS/JS 上传 CDN，然后把 HTML 手动改写为后端模板。 从数据库查询到一段动态数据。 套到模板上，渲染出页面。 此时的主要矛盾在于前后端耦合 ： 前端同学交付 HTML 页面，被后端改写为 TPL 模板。 如果需求变更，从而导致 HTML 修改后，后端再次套模板的时候，merge 起来会比较考眼力。 如果模板渲染有问题，往往是前端跑到后端的电脑上直接修改模板来调试，然后还需要同步回去自己的 HTML。 青铜器时代 随着 Web 2.0 的到来，以 Google 推出的 Gmail 为号角，前端进入富应用时代，各种框架层出不穷，从 AJAX + jQuery，到逐渐形成 Angular、React、Vue 三国鼎立。 此时的业务开发的套路，变为 前后端分离： 后端提供 API 接口，把 领域模型 转换为 数据传输对象，并通过 HTTP 对外服务。 前端通过 AJAX 调用对应的接口，接管模板层，直接在浏览器侧渲染，也称之为前端渲染。 前后端分离 一定程度上解决前后端的耦合问题，约定好接口后，前端可以直接 Mock 然后进行开发。 前端第一次翻身，如火如荼的投入到 前端框架 和 前端工程化 的建设中，矛盾在一定程度上弱化了。 蒸汽时代 随着后端 微服务化 的演进，开始走向深水区，服务下沉，趋向稳定，业务被划分为很多独立的微服务。 前端框架 和 前端工程化 趋向稳定，同时前端也进入了移动时代，出现了跨平台、跨终端适配的场景，对用户体验提出的更高的要求，对首屏时间等性能指标越来越重视，且发布频度越来越快。 此时的架构演化为： 后端分为很多微服务。 前端还是通过 HTTP 访问后端，但接口变多了，性能变低，且带来安全问题。 后端会提供一层 API 粘合层来缓解。 随之而来的新的矛盾：服务下沉与用户体验灵活性的矛盾 服务趋向稳定，倾向下沉。 用户体验趋向不稳定，诉求服务的高度灵活与定制。 不同设备对 API 有不同的诉求，需要裁剪。 服务端接口，究竟是面向 UI 还是通用服务？ 此时 Sam Newman 提出了 Backends For Frontends ： 简称之为 BFF，最重要的是：服务自治 ，谁使用谁开发，带来了灵活与高效。 BFF 根据团队的技术栈来选型，在我们的业务场景中，相对较优，生态最活跃，最能被前端接受的 Node.js。 BFF 层一直都存在，因为 领域模型 - UI 模型 的转换是必然会存在的，区别只是在于维护者是谁。 GraphQL 之类的网关可以视为通用型的 BFF。 此时，研发角色又转变为： 后端研发，专注于业务建模，维护中间件服务和业务微服务。 全栈研发，专注于处理 Web 层，比模板层更进一步，接管 BFF 层。 其中全栈研发又有两种来源： 从前端进化过来的，一般会选择 Node.js 作为技术栈，使用诸如 Egg 等框架来降低前端同学的上手成本。 前端资源严重不足，于是赋能后端，助其转变为全栈，使用 Ant Design、Umi 等降低后端同学的上手成本。 电气时代 BFF 的实践，在社区的分化严重, 在大公司和创业公司比较受欢迎，但在话语权不强的中型公司，则举步维艰。 小创业公司 - 追求快狠准，先活下来再说，效率优先，干就是了。 大公司 - 具备良好的基建和研发流程支撑，对效能有更高的追求，如荼如火。 中型公司 - 前端话语权不强，百废待兴，现有基建对前端不友好，推行举步维艰。 作为国内前端的引航者，过去几年，我们蚂蚁体验技术部工程产品的同学，产出了很多效能产品，包括： Basement 前端工作台 - 打造更适合前端场景的工作流，管控研发流程和质量。 云凤蝶 - 可视化建站，提升非前端专业同学在站点搭建方面的效能。 DockerLab - 轻运维，支持快速创新，让 idea 闪现到服务更加便捷。 Egg - 企业级的 Node.js 框架，扫清后端框架、中间件生态接入方面的障碍。 Ant Design - 企业级的中后台前端框架，让中后台产品 default to good. 但这些大部分还局限在 Pro Code 领域，离我们愿景中的终局还有很长的路要走。 此时的主要矛盾在于： 专业人才储备 远远低估了前端的缺人程度，一将难求，无人可招。 全栈人才的培养成本不低，包括前端需要学习后端 DevOps，后端需要学习前端的用户交互。 基建墙，各种流程太重 不同的基建服务需要去不同的后台走申请流程，N 多个工单需等待审批。 像 DRM 的配置、Mobilegw 的配置，需要在每种环境中单独配置一遍。 资源浪费 在 BFF 场景下，服务器水位较低（10% ~ 30%），基于微服务的高可用诉求导致了服务器资源的浪费。 譬如在蚂蚁容灾要求下，至少需要 11 台 4C8G 的容器。据此估算，支撑内部上千个中台应用，则就至少需要约 2000 台 32 核物理机！！！","permalink":"http://catzillaorz.github.io/2019/11/27/Serverless-For-Frontend-%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/","photos":[]},{"tags":[{"name":"前端方案","slug":"前端方案","permalink":"http://catzillaorz.github.io/tags/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/"}],"title":"微前端方案提出","date":"2019/11/26","text":"可能是你见过最完善的微前端解决方案前言 想跳过技术细节直接看怎么实践的同学可以拖到文章底部，直接看最后一节。 目前社区有很多关于微前端架构的介绍，但大多停留在概念介绍的阶段。而本文会就某一个具体的类型场景，着重介绍微前端架构可以带来什么价值以及具体实践过程中需要关注的技术决策，并辅以具体代码，从而能真正意义上帮助你构建一个生产可用的微前端架构系统。 而对于微前端的概念感兴趣或不熟悉的同学，可以通过搜索引擎来获取更多信息，如 知乎上的相关内容， 本文不再做过多介绍。 两个月前 Twitter 曾爆发过关于微前端的“热烈”讨论，参与大佬众多(Dan、Larkin 等)，对“事件”本身我们今天不做过多评论(后面可能会写篇文章来回顾一下)，有兴趣的同学可以通过这篇文章了解一二。 微前端的价值微前端架构具备以下几个核心价值： 技术栈无关主框架不限制接入应用的技术栈，子应用具备完全自主权独立开发、独立部署子应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新独立运行时每个子应用之间状态隔离，运行时状态不共享微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。 原文地址：阅读原文Ref：","permalink":"http://catzillaorz.github.io/2019/11/26/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/","photos":[]},{"tags":[{"name":"GFW","slug":"GFW","permalink":"http://catzillaorz.github.io/tags/GFW/"}],"title":"翻墙","date":"2019/09/17","text":"最新官方活动-新用户注册送$100（美元）点击直达 Out of The Great Fire Wall Gift card点我得券 Use vultr点我直达：","permalink":"http://catzillaorz.github.io/2019/09/17/%E7%BF%BB%E5%A2%99/","photos":[]},{"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://catzillaorz.github.io/tags/Flutter/"}],"title":"Flutter开发环境搭建-踩坑指南","date":"2019/09/16","text":"Flutter开发环境搭建-踩坑指南 相信有不少同学，一开始就被环境搭建恶心到，从而放弃。或者开始抱怨各种坑多，\b不愿再尝试。 很多同学可能看了太多关于Flutter的文章，都很想上手，但大多数都死在了搭建环境这一步。没关系，今天就来点不一样的，带你们从0开始，搭建你的Flutter环境。 这种文章本来没有必要出，但既然坑都踩了，方便大家搜索快速定位问题，就特意记录下各种深坑，也是为了方便大家快速定位解决问题，欢迎大家围观。 Get started: install 各个操作平台需要下载的Flutter 坑位 打不开（你懂的） 环境配置 下完了，该干啥 选择编辑器 填坑 此处可能需要科学上网提醒: 中国的开发者们，请先看一下这篇 wiki，查看是否需要对网络环境进行特别设置。需要注意的是，\b其实这一步才是死的人最多的吧。后面大段\b描述下各种深坑。 此处的坑，可能就是一劳永逸的命令行环境变量配置，\bMac例子： open .bash_profile点到为止。 甩出中文社区教程：编写你的第一个 Flutter App 编辑器当然选择vs code，谁用谁知道，Configure Editor\b请跟随教程指引，下载安装vs code 所需要的\b插件。 Install on macOS 甩出官网安装指南 \bmacOS 全文一开头就告诉你要用到的一些东西和命令。(以下都是命令行操作，跟着教程\b敲就可以) 他建议你安装在 ~/development 他建议你下载成功后设置PATH，这块是零时的，你可以试着玩一下，后面直接在 cd ~ 后键入open .bash_profile打开后，把你这段 export PATH=~/development/flutter/bin:$PATH加入， 这块的 ~/development/flutter/bin这段就是你解压后的真实\b路径，很好找吧？除非你忘了你解压到哪里了- -！ 如果。以上几步你都顺利完成了，接下来键入 flutter doctor检查下你还缺少哪些，然后痛苦的\binstall各种失败在向你招手…(后面继续讲，是哪些错误) You need a doctor 好不容易Flutter也下载好了，环境PATH也设置好啦，doctor，接着说，同学，你的Flutter还需要治疗。然后抛出以下体检结果： For example: Doctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel beta, v0.5.1, on Mac OS X 10.13.6 17G65, locale zh-Hans-CN)[!] Android toolchain - develop for Android devices ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ[!] iOS toolchain - develop for iOS devices✗ Xcode installation is incomplete; a full installation is necessary for iOS development.Download at: https://developer.apple.com/xcode/download/Or install Xcode via the App Store.Once installed, run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer✗ ideviceinstaller is not installed; this is used to discover connected iOS devices.To install, run: brew install --HEAD libimobiledevice brew install ideviceinstaller✗ ios-deploy not installed. To install: brew install ios-deploy✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side's plugin code that your plugin usage on the Dart side.Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.io/platform-plugins To install: brew install cocoapods pod setup 好在，不管你遇到什么，医生都会告诉你如何用指令安装: brew updatebrew install --HEAD libimobiledevicebrew install ideviceinstaller ios-deploy cocoapodspod setup 你就每次按医生说的下载就行了。 如果你以为能一帆风顺那你就大错特错了… Error: 大多数时候会报这个错： remote: Counting objects: 8152, done.remote: Compressing objects: 100% (5441/5441), done.error: RPC failed; curl 18 transfer closed with outstanding read data remainingfatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedError: Failed to download resource \"libimobiledevice\"Failure while executing; `git clone --branch master https://git.libimobiledevice.org/libimobiledevice.git /Users/~/Library/Caches/Homebrew/libimobiledevice--git` exited with 128. 心里一万只神兽喷涌而过。\b下载100% done ？ 然后跟我报错？ 丢出各种搜索到的issue： error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 54 error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54 fatal: The remote end hung up unexpectedly fatal: early EOF fatal: index-pack failed RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54 偶尔出现这种错： Updating Homebrew...==&gt; Cloning https://git.libimobiledevice.org/libimobiledevice.gitCloning into '/Users/~/Library/Caches/Homebrew/libimobiledevice--git'...remote: Counting objects: 8152, done.remote: Compressing objects: 100% (5441/5441), done.error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54fatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedError: Failed to download resource \"libimobiledevice\"Failure while executing; `git clone --branch master https://git.libimobiledevice.org/libimobiledevice.git /Users/~/Library/Caches/Homebrew/libimobiledevice--git` exited with 128. git error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54 RPC failed; curl 18 transfer closed with outstanding read data remaining You need calm down 以上错误，不知说你一定会遇到，只是有可能会遇到。 也不是特指以上issue里的某个\b\b依赖代码，拉取代码失败，因为你可能在不同的情况遇到类似的问题。 所以，答案也许就在上面这些链接中，但这里也会给你一些建议，若遇到类似报错，不妨尝试 git config http.postBuffer 524288000git config https.postBuffer 524288000 如果你试了以上办法真的，还是下载失败。最后的秘诀当然不是，重启电脑，应该是多试几次 多试几次 多试几次 多试几次\b- 意思就是多执行几次 brew install让他多去 pull 几次 github的 master 为什么不是 pip 或者 ruby，因为真的没遇到过这俩个出问题，几乎都是brew 说了那么多，最后还是在执行了 brew install --HEAD libimobiledevice 13次？还是23次，后终于自动成功了。ᔪ(⁰́◊⁰̀)ᔭ OMG Finally 这里提到的只是\b印象比较深刻的一些，你会发现\b很多类似的issue里很多人都遇到了此类问题，然而每个人都解决方法也不同。你会发现，有些issue依然开着，下面都回复也是络绎不绝。所以，不放弃，才是最后的解决方案，加油。 看到这里，真是被现实打败了。 光是环境就把人折磨的精疲力尽。但是，如果，这道坎你都过了，那后面还不是水到渠成的事吗！（逃 后续还会继续更新，共勉 \bFlutter官网教程 Flutter中文网","permalink":"http://catzillaorz.github.io/2019/09/16/Flutter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/","photos":[]},{"tags":[{"name":"扇贝","slug":"扇贝","permalink":"http://catzillaorz.github.io/tags/%E6%89%87%E8%B4%9D/"}],"title":"Quotes","date":"2019/09/11","text":"扇贝 Whatever is worth doing at all is worth doing well. 任何值得做的事，都值得将其做好。 Our growth depends not on how many experiences we devour, but on how many we digest. 成长靠的不是经历有多丰富，而是对过往经历的的细细品味和领会。 Happiness is not by chance, but by choice. 幸福靠的不是运气，而是选择。 If you are not willing to learn no one can help you. If you are determined to learn no one can stop you. 不想学，没人能帮你。决计要学，没人能阻止你。 The beauty you see in me is a reflection of you. 你在我身上看到的美，正是你的倒影。 Don’t get so busy making a living that you forget to make a life. 千万不要忙着营生而忘了享受人生。 Health is the thing that makes you feel that now is the best time of the year. 身体健康会让你觉得一年之中，此时此刻是最美好的。 Before you find your sole mate, you must first discovery your sole. 找到灵魂伴侣之前，你得先找到自己的灵魂。 Don’t give me excuses.Give me results. 我要的不是借口，而是结果。 Do not despise the bottom rungs in the ascent to greatness. 莫要小瞧通往伟大之路的最底层阶梯。 It’s tempting to want to live in the past. It’s familiar. It’s comfortable, but it’s where fossils come from 活在过去是一件很诱人的事，因为它既熟悉又舒适。但是化石就是这么来的。 The secret of change is to focus all of your energy, not on fighting the old, but on building the new. 改变的秘诀，是集中所有精力去建造新的东西，而非与过去抗衡。 To understand the heart and mind of a person, look not at what he has already achieved, but at what he aspires to. 若想了解一个人的内心世界，不要看他过去的成就，而要看他向往什么。 Let’s find a light inside our universe now where ain’t nobody keep on holding us down 无人能够阻挡我们去寻找属于自己的光芒 Great edifices, like great mountains, are the work of the ages. 雄伟的建筑如同巍峨山峦，都是时光的作品。 When I look back on these days, I’ll look and see your face. You were right there for me. 当我回忆过去，眼前就会浮现你的脸庞，你总会在那守候着我。 love cures people, both the one who give it and the one who receive it. 爱给人以治愈，对给予者和接受者来说都是如此。 If there’s any kind of magic in this world, it must be in the attempt of understanding someone, sharing something. 如果世上真的有什么奇迹，那么一定是去理解他人、与他人分享。 Of all the gin joints in all the towns in all the world, she walks into mine. 世界上有那么多的城镇，城镇中有那么多的酒馆，她却走进了我的酒馆。 Most people have the will to win; few have the will to prepare to win. 人人都渴望成功，但成功的寥寥无几。 You’re the coffee that I need in the mornging, you’re the sunshine in the rain when it’s pouring. 你是我清晨不可少的咖啡，是瓢泼大雨中的那一抹暖阳。 I love you three thousand. 我爱你 If you wish to survive, you need to cultivate a strong mental attitude. 若想生存下去，就得培养坚强的意志。 Let us always meet each other with smile, for the smile is the beginning of love. 让我们微笑面对每个人，因为微笑是爱的开始。 you can be my safety zone, somewhere I can go when I feel alone. 你可以做我的避风港。 Without labor nothing prospers. 没有辛勤劳动，就不会有欣欣向荣的一切 There is a light inside of all of us. It’s never hiding. You just have to light it. 我们内心深处都有一束光芒，无法隐藏，尽管去大放异彩吧 Life is not a problem to be solved, but a reality to be experienced. 人生不是待解决的难题，而是一种真实，等着我们去体验。 Don’t give up, never give up until the fight is over. 别放弃，坚持知道胜利 Challenges are what make life interesting and overcoming them is what makes life meaningful. 挑战让生活趣味盎然，战胜挑战让生活意义非凡。 No man is an island; Every book is a world. 没有谁是一座孤岛，每本书都是一个世界。 better to have loved and lost, than to have never loved at all. 宁愿爱过失去过，也不愿从未爱过。 Do not go where the path may lead: go instead where there is no path and leave a trail. 别沿着别人的路走，要开辟自己的路，留下自己的足迹。 A life spent making mistakes is not only more honorable, but more useful than a life spent doing nothing. 比起无所事事，会犯错的人生不仅更光荣，也更有意义。 You’re not obligated to win. You’re obligated to keep trying. 你不一定要获胜，但你必须不断尝试。 Intelligence is the ability to adapt to change. 智慧就是适应变化的能力。 —— 斯蒂芬霍金 It isn’t where you came from. It’s where you’re going that counts. 起点并不重要，重要的是，你要去往何方。 Motivation comes from working on things we care about. 为在意的事付出努力，动力随之而来。 You should love and take care of yourself because after all, it’s your own life. 要学会爱自己，照顾自己，毕竟生活是你自己的。 You do not find the happy life. You make it.’notes. 幸福不是可以的寻找，而是用心经营。 Don’t criticize what you can’t understand. 不懂得，不要随意批判。 The human race has one really effective weapon, and that is laughter. 欢笑是人类强而有力的武器。 Life’s too short to miss out anything, try to take it slowly. 生命短暂，慢慢来，不要错过任何沿途的风景。 If at first you don’t succeed, then dust yourself off and try again. 失败了没关系，重振旗鼓，从头再来。 Curiosity is the wick in the candle of learning. 如果学习是一根蜡烛，那好奇心就是烛芯。 Don’t allow your rituals to become ruts. 切忌墨守成规。 Without new expericences, something inside of us sleeps. 没有新鲜的经历，我们内心的某些东西就会沉睡。 I never looked back. It distracts from the now. 从不回头看，因为会让现在的我分心。 Sometimes the right path is not the easiest one. 有时候，正确的道路并不是最好走的那条。 They very things that hold you down are going to lift you up. 什么让你摔倒，什么就能让你\b翱翔。 Motral body; timeless souls. 肉体可以老去，但灵魂不朽。 I’ll face it with a grin. I’m never giving in. 我会微笑面对，永不放弃。 Why do we fall sir? So that we can learn to pick ourselves up. 我们为什么会摔倒？为了能学会自己站起来。 Bulid your ownd dreams, or someone else will hire you to build theirs. 筑造自己的梦吧，否则别人就会雇佣你去建造他们的。 True love cannot be found where it does not truly exist, nor can it be hiddenwhere it trully does. 真爱不存在的地方，怎么找也找不到，而当真爱到来时，想藏也藏不住。 Appreciation is a wonderful thing. It makes what is excellent in others belongto us as well. 欣赏是一件美妙的事，它让别人的优点也成为我们自己的。 You want to fly with the eagles . You need bigger wings . -Need for Speed 你想像雄鹰一样飞翔，就需要更宽大的翅膀。","permalink":"http://catzillaorz.github.io/2019/09/11/quotes/","photos":[]}]}